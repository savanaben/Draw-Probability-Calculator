
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop$3() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop$3;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
        let value;
        subscribe(store, _ => value = _)();
        return value;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function compute_rest_props(props, keys) {
        const rest = {};
        keys = new Set(keys);
        for (const k in props)
            if (!keys.has(k) && k[0] !== '$')
                rest[k] = props[k];
        return rest;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop$3;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop$3;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element.sheet;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
        return style.sheet;
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_svg_attributes(node, attributes) {
        for (const key in attributes) {
            attr(node, key, attributes[key]);
        }
    }
    function to_number(value) {
        return value === '' ? null : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value == null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function select_option(select, value, mounting) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
        if (!mounting || value !== undefined) {
            select.selectedIndex = -1; // no option should be selected
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked');
        return selected_option && selected_option.__value;
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }
    class HtmlTag {
        constructor(is_svg = false) {
            this.is_svg = false;
            this.is_svg = is_svg;
            this.e = this.n = null;
        }
        c(html) {
            this.h(html);
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                if (this.is_svg)
                    this.e = svg_element(target.nodeName);
                /** #7364  target for <template> may be provided as #document-fragment(11) */
                else
                    this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));
                this.t = target.tagName !== 'TEMPLATE' ? target : target.content;
                this.c(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    // we need to store the information for multiple documents because a Svelte application could also contain iframes
    // https://github.com/sveltejs/svelte/issues/3624
    const managed_styles = new Map();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash$2(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_style_information(doc, node) {
        const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
        managed_styles.set(doc, info);
        return info;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash$2(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
        if (!rules[name]) {
            rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            managed_styles.forEach(info => {
                const { ownerNode } = info.stylesheet;
                // there is no ownerNode if it runs on jsdom.
                if (ownerNode)
                    detach(ownerNode);
            });
            managed_styles.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    /**
     * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
     * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
     * it can be called from an external module).
     *
     * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
     *
     * https://svelte.dev/docs#run-time-svelte-onmount
     */
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    /**
     * Schedules a callback to run immediately after the component has been updated.
     *
     * The first time the callback runs will be after the initial `onMount`
     */
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    /**
     * Schedules a callback to run immediately before the component is unmounted.
     *
     * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
     * only one that runs inside a server-side component.
     *
     * https://svelte.dev/docs#run-time-svelte-ondestroy
     */
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    /**
     * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).
     * Event dispatchers are functions that can take two arguments: `name` and `detail`.
     *
     * Component events created with `createEventDispatcher` create a
     * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
     * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
     * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
     * property and can contain any type of data.
     *
     * https://svelte.dev/docs#run-time-svelte-createeventdispatcher
     */
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }

    const dirty_components = [];
    const binding_callbacks = [];
    let render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = /* @__PURE__ */ Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        // Do not reenter flush while dirty components are updated, as this can
        // result in an infinite loop. Instead, let the inner flush handle it.
        // Reentrancy is ok afterwards for bindings etc.
        if (flushidx !== 0) {
            return;
        }
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            try {
                while (flushidx < dirty_components.length) {
                    const component = dirty_components[flushidx];
                    flushidx++;
                    set_current_component(component);
                    update(component.$$);
                }
            }
            catch (e) {
                // reset dirty state to not end up in a deadlocked state and then rethrow
                dirty_components.length = 0;
                flushidx = 0;
                throw e;
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    /**
     * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
     */
    function flush_render_callbacks(fns) {
        const filtered = [];
        const targets = [];
        render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
        targets.forEach((c) => c());
        render_callbacks = filtered;
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }
    const null_transition = { duration: 0 };
    function create_bidirectional_transition(node, fn, params, intro) {
        const options = { direction: 'both' };
        let config = fn(node, params, options);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop$3, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config(options);
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        const updates = [];
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                // defer updates until all the DOM shuffling is done
                updates.push(() => block.p(child_ctx, dirty));
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        run_all(updates);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
                // if the component was destroyed immediately
                // it will update the `$$.on_destroy` reference to `null`.
                // the destructured on_destroy may still reference to the old array
                if (component.$$.on_destroy) {
                    component.$$.on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            flush_render_callbacks($$.after_update);
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: [],
            // state
            props,
            update: noop$3,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop$3;
        }
        $on(type, callback) {
            if (!is_function(callback)) {
                return noop$3;
            }
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        if (has_stop_immediate_propagation)
            modifiers.push('stopImmediatePropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.data === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=} start
     */
    function writable(value, start = noop$3) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop$3) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop$3;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0 && stop) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    // colorStore.js

    const groupColors = writable({});
    const simulationData = writable({
        preparedCards: [],
        manaRequirements: {}
    });

    const simplifiedRampMana = writable([]);

    const clonedOutputDiagrams = writable([]);

    const shouldResetSimulation = writable(false);
    const simulationType = writable('full'); // hand vs field simulation flag

    const simulationRun = writable(false);
    const simulationProgress = writable(0); // Tracks the progress of the simulation
    const combinationProgress = writable(0); // New store for getAllCombinations progress

    const cancelSimulation = writable(false);  // This store manages the cancellation state.
    const monteCarloResults = writable([]); // Store for Monte Carlo results
    const monteCarloHandResults = writable([]); // Store for Monte Carlo results

    const neededCombinationsCount = writable(0);  // Store for the count of needed combinations

    const activePopover = writable(null);

    const numberOfTurns = writable([1, 1, 1, 1, 1, 1]); // Default to drawing 1 card per turn for 5 turns

    const activeTab = writable(0); // Store for the active tab



    let idCounter = 0;

    function getNextUniqueId() {
      return `popover-${idCounter++}`;
    }

    // Mulligan configuration store
    const mulliganConfig = writable({
        maxMulligans: 0, // Max amount of mulligans (0 to 7)
        firstMulliganFree: false, // First mulligan is free (true/false)
        freeMulliganTillLands: false, // mulligan until meeting min/max land requirements (true/false)
        minLandsInHand: 2, // Min amount of lands in hand (0 to 7)
        maxLandsInHand: 5, // Max amount of lands in hand (0 to 7)
        allowTwoLandsPlusRamp: false, // Allow 2 lands + playable ramp (true/false)
        mulliganIfLandsRampCanOnlyMake: '', // Mulligan if lands can only make (color)
        mulliganUnlessOpeningHandCanMake: [], // Mulligan unless opening hand can make (array of colors)
        rampMustBePlayable: false, // If ramp drawn, must be playable (true/false)
        mustHavePlayableRamp: false // Must have ramp (true/false)
    });

    var top = 'top';
    var bottom = 'bottom';
    var right = 'right';
    var left = 'left';
    var auto = 'auto';
    var basePlacements = [top, bottom, right, left];
    var start = 'start';
    var end$1 = 'end';
    var clippingParents = 'clippingParents';
    var viewport = 'viewport';
    var popper = 'popper';
    var reference = 'reference';
    var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
      return acc.concat([placement + "-" + start, placement + "-" + end$1]);
    }, []);
    var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
      return acc.concat([placement, placement + "-" + start, placement + "-" + end$1]);
    }, []); // modifiers that need to read the DOM

    var beforeRead = 'beforeRead';
    var read = 'read';
    var afterRead = 'afterRead'; // pure-logic modifiers

    var beforeMain = 'beforeMain';
    var main = 'main';
    var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

    var beforeWrite = 'beforeWrite';
    var write = 'write';
    var afterWrite = 'afterWrite';
    var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

    function getNodeName(element) {
      return element ? (element.nodeName || '').toLowerCase() : null;
    }

    function getWindow(node) {
      if (node == null) {
        return window;
      }

      if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
      }

      return node;
    }

    function isElement(node) {
      var OwnElement = getWindow(node).Element;
      return node instanceof OwnElement || node instanceof Element;
    }

    function isHTMLElement(node) {
      var OwnElement = getWindow(node).HTMLElement;
      return node instanceof OwnElement || node instanceof HTMLElement;
    }

    function isShadowRoot(node) {
      // IE 11 has no ShadowRoot
      if (typeof ShadowRoot === 'undefined') {
        return false;
      }

      var OwnElement = getWindow(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
    }

    // and applies them to the HTMLElements such as popper and arrow

    function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function (name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        } // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]


        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (name) {
          var value = attributes[name];

          if (value === false) {
            element.removeAttribute(name);
          } else {
            element.setAttribute(name, value === true ? '' : value);
          }
        });
      });
    }

    function effect$2(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: '0',
          top: '0',
          margin: '0'
        },
        arrow: {
          position: 'absolute'
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;

      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }

      return function () {
        Object.keys(state.elements).forEach(function (name) {
          var element = state.elements[name];
          var attributes = state.attributes[name] || {};
          var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

          var style = styleProperties.reduce(function (style, property) {
            style[property] = '';
            return style;
          }, {}); // arrow is optional + virtual elements

          if (!isHTMLElement(element) || !getNodeName(element)) {
            return;
          }

          Object.assign(element.style, style);
          Object.keys(attributes).forEach(function (attribute) {
            element.removeAttribute(attribute);
          });
        });
      };
    } // eslint-disable-next-line import/no-unused-modules


    var applyStyles$1 = {
      name: 'applyStyles',
      enabled: true,
      phase: 'write',
      fn: applyStyles,
      effect: effect$2,
      requires: ['computeStyles']
    };

    function getBasePlacement(placement) {
      return placement.split('-')[0];
    }

    var max = Math.max;
    var min = Math.min;
    var round = Math.round;

    function getUAString() {
      var uaData = navigator.userAgentData;

      if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
        return uaData.brands.map(function (item) {
          return item.brand + "/" + item.version;
        }).join(' ');
      }

      return navigator.userAgent;
    }

    function isLayoutViewport() {
      return !/^((?!chrome|android).)*safari/i.test(getUAString());
    }

    function getBoundingClientRect(element, includeScale, isFixedStrategy) {
      if (includeScale === void 0) {
        includeScale = false;
      }

      if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
      }

      var clientRect = element.getBoundingClientRect();
      var scaleX = 1;
      var scaleY = 1;

      if (includeScale && isHTMLElement(element)) {
        scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
      }

      var _ref = isElement(element) ? getWindow(element) : window,
          visualViewport = _ref.visualViewport;

      var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
      var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
      var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
      var width = clientRect.width / scaleX;
      var height = clientRect.height / scaleY;
      return {
        width: width,
        height: height,
        top: y,
        right: x + width,
        bottom: y + height,
        left: x,
        x: x,
        y: y
      };
    }

    // means it doesn't take into account transforms.

    function getLayoutRect(element) {
      var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
      // Fixes https://github.com/popperjs/popper-core/issues/1223

      var width = element.offsetWidth;
      var height = element.offsetHeight;

      if (Math.abs(clientRect.width - width) <= 1) {
        width = clientRect.width;
      }

      if (Math.abs(clientRect.height - height) <= 1) {
        height = clientRect.height;
      }

      return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
      };
    }

    function contains(parent, child) {
      var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

      if (parent.contains(child)) {
        return true;
      } // then fallback to custom implementation with Shadow DOM support
      else if (rootNode && isShadowRoot(rootNode)) {
          var next = child;

          do {
            if (next && parent.isSameNode(next)) {
              return true;
            } // $FlowFixMe[prop-missing]: need a better way to handle this...


            next = next.parentNode || next.host;
          } while (next);
        } // Give up, the result is false


      return false;
    }

    function getComputedStyle$1(element) {
      return getWindow(element).getComputedStyle(element);
    }

    function isTableElement(element) {
      return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
    }

    function getDocumentElement(element) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
      element.document) || window.document).documentElement;
    }

    function getParentNode(element) {
      if (getNodeName(element) === 'html') {
        return element;
      }

      return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
        // $FlowFixMe[incompatible-return]
        // $FlowFixMe[prop-missing]
        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || ( // DOM Element detected
        isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement(element) // fallback

      );
    }

    function getTrueOffsetParent(element) {
      if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle$1(element).position === 'fixed') {
        return null;
      }

      return element.offsetParent;
    } // `.offsetParent` reports `null` for fixed elements, while absolute elements
    // return the containing block


    function getContainingBlock(element) {
      var isFirefox = /firefox/i.test(getUAString());
      var isIE = /Trident/i.test(getUAString());

      if (isIE && isHTMLElement(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = getComputedStyle$1(element);

        if (elementCss.position === 'fixed') {
          return null;
        }
      }

      var currentNode = getParentNode(element);

      if (isShadowRoot(currentNode)) {
        currentNode = currentNode.host;
      }

      while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
        var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }

      return null;
    } // Gets the closest ancestor positioned element. Handles some edge cases,
    // such as table ancestors and cross browser bugs.


    function getOffsetParent(element) {
      var window = getWindow(element);
      var offsetParent = getTrueOffsetParent(element);

      while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent(offsetParent);
      }

      if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
        return window;
      }

      return offsetParent || getContainingBlock(element) || window;
    }

    function getMainAxisFromPlacement(placement) {
      return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
    }

    function within(min$1, value, max$1) {
      return max(min$1, min(value, max$1));
    }
    function withinMaxClamp(min, value, max) {
      var v = within(min, value, max);
      return v > max ? max : v;
    }

    function getFreshSideObject() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    function mergePaddingObject(paddingObject) {
      return Object.assign({}, getFreshSideObject(), paddingObject);
    }

    function expandToHashMap(value, keys) {
      return keys.reduce(function (hashMap, key) {
        hashMap[key] = value;
        return hashMap;
      }, {});
    }

    var toPaddingObject = function toPaddingObject(padding, state) {
      padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
        placement: state.placement
      })) : padding;
      return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    };

    function arrow(_ref) {
      var _state$modifiersData$;

      var state = _ref.state,
          name = _ref.name,
          options = _ref.options;
      var arrowElement = state.elements.arrow;
      var popperOffsets = state.modifiersData.popperOffsets;
      var basePlacement = getBasePlacement(state.placement);
      var axis = getMainAxisFromPlacement(basePlacement);
      var isVertical = [left, right].indexOf(basePlacement) >= 0;
      var len = isVertical ? 'height' : 'width';

      if (!arrowElement || !popperOffsets) {
        return;
      }

      var paddingObject = toPaddingObject(options.padding, state);
      var arrowRect = getLayoutRect(arrowElement);
      var minProp = axis === 'y' ? top : left;
      var maxProp = axis === 'y' ? bottom : right;
      var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
      var startDiff = popperOffsets[axis] - state.rects.reference[axis];
      var arrowOffsetParent = getOffsetParent(arrowElement);
      var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
      // outside of the popper bounds

      var min = paddingObject[minProp];
      var max = clientSize - arrowRect[len] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
      var offset = within(min, center, max); // Prevents breaking syntax highlighting...

      var axisProp = axis;
      state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
    }

    function effect$1(_ref2) {
      var state = _ref2.state,
          options = _ref2.options;
      var _options$element = options.element,
          arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

      if (arrowElement == null) {
        return;
      } // CSS selector


      if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);

        if (!arrowElement) {
          return;
        }
      }

      if (!contains(state.elements.popper, arrowElement)) {
        return;
      }

      state.elements.arrow = arrowElement;
    } // eslint-disable-next-line import/no-unused-modules


    var arrow$1 = {
      name: 'arrow',
      enabled: true,
      phase: 'main',
      fn: arrow,
      effect: effect$1,
      requires: ['popperOffsets'],
      requiresIfExists: ['preventOverflow']
    };

    function getVariation(placement) {
      return placement.split('-')[1];
    }

    var unsetSides = {
      top: 'auto',
      right: 'auto',
      bottom: 'auto',
      left: 'auto'
    }; // Round the offsets to the nearest suitable subpixel based on the DPR.
    // Zooming can change the DPR, but it seems to report a value that will
    // cleanly divide the values into the appropriate subpixels.

    function roundOffsetsByDPR(_ref, win) {
      var x = _ref.x,
          y = _ref.y;
      var dpr = win.devicePixelRatio || 1;
      return {
        x: round(x * dpr) / dpr || 0,
        y: round(y * dpr) / dpr || 0
      };
    }

    function mapToStyles(_ref2) {
      var _Object$assign2;

      var popper = _ref2.popper,
          popperRect = _ref2.popperRect,
          placement = _ref2.placement,
          variation = _ref2.variation,
          offsets = _ref2.offsets,
          position = _ref2.position,
          gpuAcceleration = _ref2.gpuAcceleration,
          adaptive = _ref2.adaptive,
          roundOffsets = _ref2.roundOffsets,
          isFixed = _ref2.isFixed;
      var _offsets$x = offsets.x,
          x = _offsets$x === void 0 ? 0 : _offsets$x,
          _offsets$y = offsets.y,
          y = _offsets$y === void 0 ? 0 : _offsets$y;

      var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
        x: x,
        y: y
      }) : {
        x: x,
        y: y
      };

      x = _ref3.x;
      y = _ref3.y;
      var hasX = offsets.hasOwnProperty('x');
      var hasY = offsets.hasOwnProperty('y');
      var sideX = left;
      var sideY = top;
      var win = window;

      if (adaptive) {
        var offsetParent = getOffsetParent(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';

        if (offsetParent === getWindow(popper)) {
          offsetParent = getDocumentElement(popper);

          if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
            heightProp = 'scrollHeight';
            widthProp = 'scrollWidth';
          }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


        offsetParent = offsetParent;

        if (placement === top || (placement === left || placement === right) && variation === end$1) {
          sideY = bottom;
          var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
          offsetParent[heightProp];
          y -= offsetY - popperRect.height;
          y *= gpuAcceleration ? 1 : -1;
        }

        if (placement === left || (placement === top || placement === bottom) && variation === end$1) {
          sideX = right;
          var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
          offsetParent[widthProp];
          x -= offsetX - popperRect.width;
          x *= gpuAcceleration ? 1 : -1;
        }
      }

      var commonStyles = Object.assign({
        position: position
      }, adaptive && unsetSides);

      var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x,
        y: y
      }, getWindow(popper)) : {
        x: x,
        y: y
      };

      x = _ref4.x;
      y = _ref4.y;

      if (gpuAcceleration) {
        var _Object$assign;

        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
      }

      return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
    }

    function computeStyles(_ref5) {
      var state = _ref5.state,
          options = _ref5.options;
      var _options$gpuAccelerat = options.gpuAcceleration,
          gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
          _options$adaptive = options.adaptive,
          adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
          _options$roundOffsets = options.roundOffsets,
          roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
      var commonStyles = {
        placement: getBasePlacement(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === 'fixed'
      };

      if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive: adaptive,
          roundOffsets: roundOffsets
        })));
      }

      if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.arrow,
          position: 'absolute',
          adaptive: false,
          roundOffsets: roundOffsets
        })));
      }

      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-placement': state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var computeStyles$1 = {
      name: 'computeStyles',
      enabled: true,
      phase: 'beforeWrite',
      fn: computeStyles,
      data: {}
    };

    var passive = {
      passive: true
    };

    function effect(_ref) {
      var state = _ref.state,
          instance = _ref.instance,
          options = _ref.options;
      var _options$scroll = options.scroll,
          scroll = _options$scroll === void 0 ? true : _options$scroll,
          _options$resize = options.resize,
          resize = _options$resize === void 0 ? true : _options$resize;
      var window = getWindow(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.addEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.addEventListener('resize', instance.update, passive);
      }

      return function () {
        if (scroll) {
          scrollParents.forEach(function (scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
          });
        }

        if (resize) {
          window.removeEventListener('resize', instance.update, passive);
        }
      };
    } // eslint-disable-next-line import/no-unused-modules


    var eventListeners = {
      name: 'eventListeners',
      enabled: true,
      phase: 'write',
      fn: function fn() {},
      effect: effect,
      data: {}
    };

    var hash$1 = {
      left: 'right',
      right: 'left',
      bottom: 'top',
      top: 'bottom'
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash$1[matched];
      });
    }

    var hash = {
      start: 'end',
      end: 'start'
    };
    function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function (matched) {
        return hash[matched];
      });
    }

    function getWindowScroll(node) {
      var win = getWindow(node);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      };
    }

    function getWindowScrollBarX(element) {
      // If <html> has a CSS width greater than the viewport, then this will be
      // incorrect for RTL.
      // Popper 1 is broken in this case and never had a bug report so let's assume
      // it's not an issue. I don't think anyone ever specifies width on <html>
      // anyway.
      // Browsers where the left scrollbar doesn't cause an issue report `0` for
      // this (e.g. Edge 2019, IE11, Safari)
      return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    }

    function getViewportRect(element, strategy) {
      var win = getWindow(element);
      var html = getDocumentElement(element);
      var visualViewport = win.visualViewport;
      var width = html.clientWidth;
      var height = html.clientHeight;
      var x = 0;
      var y = 0;

      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        var layoutViewport = isLayoutViewport();

        if (layoutViewport || !layoutViewport && strategy === 'fixed') {
          x = visualViewport.offsetLeft;
          y = visualViewport.offsetTop;
        }
      }

      return {
        width: width,
        height: height,
        x: x + getWindowScrollBarX(element),
        y: y
      };
    }

    // of the `<html>` and `<body>` rect bounds if horizontally scrollable

    function getDocumentRect(element) {
      var _element$ownerDocumen;

      var html = getDocumentElement(element);
      var winScroll = getWindowScroll(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
      var y = -winScroll.scrollTop;

      if (getComputedStyle$1(body || html).direction === 'rtl') {
        x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
      }

      return {
        width: width,
        height: height,
        x: x,
        y: y
      };
    }

    function isScrollParent(element) {
      // Firefox wants us to check `-x` and `-y` variations as well
      var _getComputedStyle = getComputedStyle$1(element),
          overflow = _getComputedStyle.overflow,
          overflowX = _getComputedStyle.overflowX,
          overflowY = _getComputedStyle.overflowY;

      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }

    function getScrollParent(node) {
      if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
        // $FlowFixMe[incompatible-return]: assume body is always available
        return node.ownerDocument.body;
      }

      if (isHTMLElement(node) && isScrollParent(node)) {
        return node;
      }

      return getScrollParent(getParentNode(node));
    }

    /*
    given a DOM element, return the list of all scroll parents, up the list of ancesors
    until we get to the top window object. This list is what we attach scroll listeners
    to, because if any of these parent elements scroll, we'll need to re-calculate the
    reference element's position.
    */

    function listScrollParents(element, list) {
      var _element$ownerDocumen;

      if (list === void 0) {
        list = [];
      }

      var scrollParent = getScrollParent(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = getWindow(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)));
    }

    function rectToClientRect(rect) {
      return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }

    function getInnerBoundingClientRect(element, strategy) {
      var rect = getBoundingClientRect(element, false, strategy === 'fixed');
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }

    function getClientRectFromMixedType(element, clippingParent, strategy) {
      return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    } // A "clipping parent" is an overflowable container with the characteristic of
    // clipping (or hiding) overflowing elements with a position different from
    // `initial`


    function getClippingParents(element) {
      var clippingParents = listScrollParents(getParentNode(element));
      var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

      if (!isElement(clipperElement)) {
        return [];
      } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


      return clippingParents.filter(function (clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
      });
    } // Gets the maximum area that the element is visible in due to any number of
    // clipping parents


    function getClippingRect(element, boundary, rootBoundary, strategy) {
      var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
      var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents[0];
      var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent, strategy);
        accRect.top = max(rect.top, accRect.top);
        accRect.right = min(rect.right, accRect.right);
        accRect.bottom = min(rect.bottom, accRect.bottom);
        accRect.left = max(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent, strategy));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }

    function computeOffsets(_ref) {
      var reference = _ref.reference,
          element = _ref.element,
          placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement(placement) : null;
      var variation = placement ? getVariation(placement) : null;
      var commonX = reference.x + reference.width / 2 - element.width / 2;
      var commonY = reference.y + reference.height / 2 - element.height / 2;
      var offsets;

      switch (basePlacement) {
        case top:
          offsets = {
            x: commonX,
            y: reference.y - element.height
          };
          break;

        case bottom:
          offsets = {
            x: commonX,
            y: reference.y + reference.height
          };
          break;

        case right:
          offsets = {
            x: reference.x + reference.width,
            y: commonY
          };
          break;

        case left:
          offsets = {
            x: reference.x - element.width,
            y: commonY
          };
          break;

        default:
          offsets = {
            x: reference.x,
            y: reference.y
          };
      }

      var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

      if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';

        switch (variation) {
          case start:
            offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
            break;

          case end$1:
            offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
            break;
        }
      }

      return offsets;
    }

    function detectOverflow(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          _options$placement = _options.placement,
          placement = _options$placement === void 0 ? state.placement : _options$placement,
          _options$strategy = _options.strategy,
          strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
          _options$boundary = _options.boundary,
          boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
          _options$rootBoundary = _options.rootBoundary,
          rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
          _options$elementConte = _options.elementContext,
          elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
          _options$altBoundary = _options.altBoundary,
          altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
          _options$padding = _options.padding,
          padding = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
      var altContext = elementContext === popper ? reference : popper;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
      var referenceClientRect = getBoundingClientRect(state.elements.reference);
      var popperOffsets = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
      });
      var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
      var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
      // 0 or negative = within the clipping rect

      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

      if (elementContext === popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function (key) {
          var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
          var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
          overflowOffsets[key] += offset[axis] * multiply;
        });
      }

      return overflowOffsets;
    }

    function computeAutoPlacement(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          placement = _options.placement,
          boundary = _options.boundary,
          rootBoundary = _options.rootBoundary,
          padding = _options.padding,
          flipVariations = _options.flipVariations,
          _options$allowedAutoP = _options.allowedAutoPlacements,
          allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
      var variation = getVariation(placement);
      var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
        return getVariation(placement) === variation;
      }) : basePlacements;
      var allowedPlacements = placements$1.filter(function (placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
      });

      if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;
      } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


      var overflows = allowedPlacements.reduce(function (acc, placement) {
        acc[placement] = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding
        })[getBasePlacement(placement)];
        return acc;
      }, {});
      return Object.keys(overflows).sort(function (a, b) {
        return overflows[a] - overflows[b];
      });
    }

    function getExpandedFallbackPlacements(placement) {
      if (getBasePlacement(placement) === auto) {
        return [];
      }

      var oppositePlacement = getOppositePlacement(placement);
      return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    }

    function flip(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;

      if (state.modifiersData[name]._skip) {
        return;
      }

      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
          specifiedFallbackPlacements = options.fallbackPlacements,
          padding = options.padding,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          _options$flipVariatio = options.flipVariations,
          flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
          allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = getBasePlacement(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
      var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
        return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding,
          flipVariations: flipVariations,
          allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements[0];

      for (var i = 0; i < placements.length; i++) {
        var placement = placements[i];

        var _basePlacement = getBasePlacement(placement);

        var isStartVariation = getVariation(placement) === start;
        var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          altBoundary: altBoundary,
          padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

        if (referenceRect[len] > popperRect[len]) {
          mainVariationSide = getOppositePlacement(mainVariationSide);
        }

        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];

        if (checkMainAxis) {
          checks.push(overflow[_basePlacement] <= 0);
        }

        if (checkAltAxis) {
          checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }

        if (checks.every(function (check) {
          return check;
        })) {
          firstFittingPlacement = placement;
          makeFallbackChecks = false;
          break;
        }

        checksMap.set(placement, checks);
      }

      if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;

        var _loop = function _loop(_i) {
          var fittingPlacement = placements.find(function (placement) {
            var checks = checksMap.get(placement);

            if (checks) {
              return checks.slice(0, _i).every(function (check) {
                return check;
              });
            }
          });

          if (fittingPlacement) {
            firstFittingPlacement = fittingPlacement;
            return "break";
          }
        };

        for (var _i = numberOfChecks; _i > 0; _i--) {
          var _ret = _loop(_i);

          if (_ret === "break") break;
        }
      }

      if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
      }
    } // eslint-disable-next-line import/no-unused-modules


    var flip$1 = {
      name: 'flip',
      enabled: true,
      phase: 'main',
      fn: flip,
      requiresIfExists: ['offset'],
      data: {
        _skip: false
      }
    };

    function getSideOffsets(overflow, rect, preventedOffsets) {
      if (preventedOffsets === void 0) {
        preventedOffsets = {
          x: 0,
          y: 0
        };
      }

      return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
      };
    }

    function isAnySideFullyClipped(overflow) {
      return [top, right, bottom, left].some(function (side) {
        return overflow[side] >= 0;
      });
    }

    function hide(_ref) {
      var state = _ref.state,
          name = _ref.name;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var preventedOffsets = state.modifiersData.preventOverflow;
      var referenceOverflow = detectOverflow(state, {
        elementContext: 'reference'
      });
      var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
      });
      var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
      var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
      var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
      var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
      state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
      };
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
      });
    } // eslint-disable-next-line import/no-unused-modules


    var hide$1 = {
      name: 'hide',
      enabled: true,
      phase: 'main',
      requiresIfExists: ['preventOverflow'],
      fn: hide
    };

    function distanceAndSkiddingToXY(placement, rects, offset) {
      var basePlacement = getBasePlacement(placement);
      var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

      var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
      })) : offset,
          skidding = _ref[0],
          distance = _ref[1];

      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [left, right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
      } : {
        x: skidding,
        y: distance
      };
    }

    function offset(_ref2) {
      var state = _ref2.state,
          options = _ref2.options,
          name = _ref2.name;
      var _options$offset = options.offset,
          offset = _options$offset === void 0 ? [0, 0] : _options$offset;
      var data = placements.reduce(function (acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
      }, {});
      var _data$state$placement = data[state.placement],
          x = _data$state$placement.x,
          y = _data$state$placement.y;

      if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var offset$1 = {
      name: 'offset',
      enabled: true,
      phase: 'main',
      requires: ['popperOffsets'],
      fn: offset
    };

    function popperOffsets(_ref) {
      var state = _ref.state,
          name = _ref.name;
      // Offsets are the actual position the popper needs to have to be
      // properly positioned near its reference element
      // This is the most basic placement, and will be adjusted by
      // the modifiers in the next step
      state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var popperOffsets$1 = {
      name: 'popperOffsets',
      enabled: true,
      phase: 'read',
      fn: popperOffsets,
      data: {}
    };

    function getAltAxis(axis) {
      return axis === 'x' ? 'y' : 'x';
    }

    function preventOverflow(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;
      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          padding = options.padding,
          _options$tether = options.tether,
          tether = _options$tether === void 0 ? true : _options$tether,
          _options$tetherOffset = options.tetherOffset,
          tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = detectOverflow(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
      });
      var basePlacement = getBasePlacement(state.placement);
      var variation = getVariation(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = getMainAxisFromPlacement(basePlacement);
      var altAxis = getAltAxis(mainAxis);
      var popperOffsets = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
      })) : tetherOffset;
      var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
      } : Object.assign({
        mainAxis: 0,
        altAxis: 0
      }, tetherOffsetValue);
      var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
      var data = {
        x: 0,
        y: 0
      };

      if (!popperOffsets) {
        return;
      }

      if (checkMainAxis) {
        var _offsetModifierState$;

        var mainSide = mainAxis === 'y' ? top : left;
        var altSide = mainAxis === 'y' ? bottom : right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min$1 = offset + overflow[mainSide];
        var max$1 = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds

        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
          width: 0,
          height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)

        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
      }

      if (checkAltAxis) {
        var _offsetModifierState$2;

        var _mainSide = mainAxis === 'x' ? top : left;

        var _altSide = mainAxis === 'x' ? bottom : right;

        var _offset = popperOffsets[altAxis];

        var _len = altAxis === 'y' ? 'height' : 'width';

        var _min = _offset + overflow[_mainSide];

        var _max = _offset - overflow[_altSide];

        var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var preventOverflow$1 = {
      name: 'preventOverflow',
      enabled: true,
      phase: 'main',
      fn: preventOverflow,
      requiresIfExists: ['offset']
    };

    function getHTMLElementScroll(element) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }

    function getNodeScroll(node) {
      if (node === getWindow(node) || !isHTMLElement(node)) {
        return getWindowScroll(node);
      } else {
        return getHTMLElementScroll(node);
      }
    }

    function isElementScaled(element) {
      var rect = element.getBoundingClientRect();
      var scaleX = round(rect.width) / element.offsetWidth || 1;
      var scaleY = round(rect.height) / element.offsetHeight || 1;
      return scaleX !== 1 || scaleY !== 1;
    } // Returns the composite rect of an element relative to its offsetParent.
    // Composite means it takes into account transforms as well as layout.


    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) {
        isFixed = false;
      }

      var isOffsetParentAnElement = isHTMLElement(offsetParent);
      var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
      var documentElement = getDocumentElement(offsetParent);
      var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
      var scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      var offsets = {
        x: 0,
        y: 0
      };

      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }

        if (isHTMLElement(offsetParent)) {
          offsets = getBoundingClientRect(offsetParent, true);
          offsets.x += offsetParent.clientLeft;
          offsets.y += offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }

      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }

    function order(modifiers) {
      var map = new Map();
      var visited = new Set();
      var result = [];
      modifiers.forEach(function (modifier) {
        map.set(modifier.name, modifier);
      }); // On visiting object, check for its dependencies and visit them recursively

      function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function (dep) {
          if (!visited.has(dep)) {
            var depModifier = map.get(dep);

            if (depModifier) {
              sort(depModifier);
            }
          }
        });
        result.push(modifier);
      }

      modifiers.forEach(function (modifier) {
        if (!visited.has(modifier.name)) {
          // check for visited object
          sort(modifier);
        }
      });
      return result;
    }

    function orderModifiers(modifiers) {
      // order based on dependencies
      var orderedModifiers = order(modifiers); // order based on phase

      return modifierPhases.reduce(function (acc, phase) {
        return acc.concat(orderedModifiers.filter(function (modifier) {
          return modifier.phase === phase;
        }));
      }, []);
    }

    function debounce(fn) {
      var pending;
      return function () {
        if (!pending) {
          pending = new Promise(function (resolve) {
            Promise.resolve().then(function () {
              pending = undefined;
              resolve(fn());
            });
          });
        }

        return pending;
      };
    }

    function mergeByName(modifiers) {
      var merged = modifiers.reduce(function (merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
          options: Object.assign({}, existing.options, current.options),
          data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
      }, {}); // IE11 does not support Object.values

      return Object.keys(merged).map(function (key) {
        return merged[key];
      });
    }

    var DEFAULT_OPTIONS = {
      placement: 'bottom',
      modifiers: [],
      strategy: 'absolute'
    };

    function areValidElements() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return !args.some(function (element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
      });
    }

    function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) {
        generatorOptions = {};
      }

      var _generatorOptions = generatorOptions,
          _generatorOptions$def = _generatorOptions.defaultModifiers,
          defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
          _generatorOptions$def2 = _generatorOptions.defaultOptions,
          defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
      return function createPopper(reference, popper, options) {
        if (options === void 0) {
          options = defaultOptions;
        }

        var state = {
          placement: 'bottom',
          orderedModifiers: [],
          options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
          modifiersData: {},
          elements: {
            reference: reference,
            popper: popper
          },
          attributes: {},
          styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
          state: state,
          setOptions: function setOptions(setOptionsAction) {
            var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
            cleanupModifierEffects();
            state.options = Object.assign({}, defaultOptions, state.options, options);
            state.scrollParents = {
              reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
              popper: listScrollParents(popper)
            }; // Orders the modifiers based on their dependencies and `phase`
            // properties

            var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

            state.orderedModifiers = orderedModifiers.filter(function (m) {
              return m.enabled;
            });
            runModifierEffects();
            return instance.update();
          },
          // Sync update – it will always be executed, even if not necessary. This
          // is useful for low frequency updates where sync behavior simplifies the
          // logic.
          // For high frequency updates (e.g. `resize` and `scroll` events), always
          // prefer the async Popper#update method
          forceUpdate: function forceUpdate() {
            if (isDestroyed) {
              return;
            }

            var _state$elements = state.elements,
                reference = _state$elements.reference,
                popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
            // anymore

            if (!areValidElements(reference, popper)) {
              return;
            } // Store the reference and popper rects to be read by modifiers


            state.rects = {
              reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
              popper: getLayoutRect(popper)
            }; // Modifiers have the ability to reset the current update cycle. The
            // most common use case for this is the `flip` modifier changing the
            // placement, which then needs to re-run all the modifiers, because the
            // logic was previously ran for the previous placement and is therefore
            // stale/incorrect

            state.reset = false;
            state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
            // is filled with the initial data specified by the modifier. This means
            // it doesn't persist and is fresh on each update.
            // To ensure persistent data, use `${name}#persistent`

            state.orderedModifiers.forEach(function (modifier) {
              return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
            });

            for (var index = 0; index < state.orderedModifiers.length; index++) {
              if (state.reset === true) {
                state.reset = false;
                index = -1;
                continue;
              }

              var _state$orderedModifie = state.orderedModifiers[index],
                  fn = _state$orderedModifie.fn,
                  _state$orderedModifie2 = _state$orderedModifie.options,
                  _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                  name = _state$orderedModifie.name;

              if (typeof fn === 'function') {
                state = fn({
                  state: state,
                  options: _options,
                  name: name,
                  instance: instance
                }) || state;
              }
            }
          },
          // Async and optimistically optimized update – it will not be executed if
          // not necessary (debounced to run at most once-per-tick)
          update: debounce(function () {
            return new Promise(function (resolve) {
              instance.forceUpdate();
              resolve(state);
            });
          }),
          destroy: function destroy() {
            cleanupModifierEffects();
            isDestroyed = true;
          }
        };

        if (!areValidElements(reference, popper)) {
          return instance;
        }

        instance.setOptions(options).then(function (state) {
          if (!isDestroyed && options.onFirstUpdate) {
            options.onFirstUpdate(state);
          }
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.

        function runModifierEffects() {
          state.orderedModifiers.forEach(function (_ref) {
            var name = _ref.name,
                _ref$options = _ref.options,
                options = _ref$options === void 0 ? {} : _ref$options,
                effect = _ref.effect;

            if (typeof effect === 'function') {
              var cleanupFn = effect({
                state: state,
                name: name,
                instance: instance,
                options: options
              });

              var noopFn = function noopFn() {};

              effectCleanupFns.push(cleanupFn || noopFn);
            }
          });
        }

        function cleanupModifierEffects() {
          effectCleanupFns.forEach(function (fn) {
            return fn();
          });
          effectCleanupFns = [];
        }

        return instance;
      };
    }

    var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
    var createPopper = /*#__PURE__*/popperGenerator({
      defaultModifiers: defaultModifiers
    }); // eslint-disable-next-line import/no-unused-modules

    function createPopperActions(initOptions) {
        let popperInstance = null;
        let referenceNode;
        let contentNode;
        let options = initOptions;
        const initPopper = () => {
            if (referenceNode !== undefined && contentNode !== undefined) {
                popperInstance = createPopper(referenceNode, contentNode, options);
            }
        };
        const deinitPopper = () => {
            if (popperInstance !== null) {
                popperInstance.destroy();
                popperInstance = null;
            }
        };
        const referenceAction = (node) => {
            if ('subscribe' in node) {
                setupVirtualElementObserver(node);
                return {};
            }
            else {
                referenceNode = node;
                initPopper();
                return {
                    destroy() {
                        deinitPopper();
                    },
                };
            }
        };
        const setupVirtualElementObserver = (node) => {
            const unsubscribe = node.subscribe(($node) => {
                if (referenceNode === undefined) {
                    referenceNode = $node;
                    initPopper();
                }
                else {
                    // Preserve the reference to the virtual element.
                    Object.assign(referenceNode, $node);
                    popperInstance?.update();
                }
            });
            onDestroy(unsubscribe);
        };
        const contentAction = (node, contentOptions) => {
            contentNode = node;
            options = { ...initOptions, ...contentOptions };
            initPopper();
            return {
                update(newContentOptions) {
                    options = { ...initOptions, ...newContentOptions };
                    popperInstance?.setOptions(options);
                },
                destroy() {
                    deinitPopper();
                },
            };
        };
        return [referenceAction, contentAction, () => popperInstance];
    }

    function styleInject(css, ref) {
      if ( ref === void 0 ) ref = {};
      var insertAt = ref.insertAt;

      if (!css || typeof document === 'undefined') { return; }

      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';

      if (insertAt === 'top') {
        if (head.firstChild) {
          head.insertBefore(style, head.firstChild);
        } else {
          head.appendChild(style);
        }
      } else {
        head.appendChild(style);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
    }

    var css_248z$d = "";
    styleInject(css_248z$d);

    /* src\Popover.svelte generated by Svelte v3.59.2 */

    const { console: console_1$5 } = globals;
    const file$e = "src\\Popover.svelte";
    const get_content_slot_changes$1 = dirty => ({});
    const get_content_slot_context$1 = ctx => ({});
    const get_trigger_slot_changes = dirty => ({});
    const get_trigger_slot_context = ctx => ({});

    // (93:0) {#if $show}
    function create_if_block$9(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const content_slot_template = /*#slots*/ ctx[11].content;
    	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[10], get_content_slot_context$1);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (content_slot) content_slot.c();
    			attr_dev(div, "class", "popover-content svelte-1vj19wa");
    			add_location(div, file$e, 93, 2, 2996);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (content_slot) {
    				content_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(/*popperContent*/ ctx[3].call(null, div)),
    					action_destroyer(/*clickOutside*/ ctx[6].call(null, div))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (content_slot) {
    				if (content_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						content_slot,
    						content_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(content_slot_template, /*$$scope*/ ctx[10], dirty, get_content_slot_changes$1),
    						get_content_slot_context$1
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(content_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(content_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (content_slot) content_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(93:0) {#if $show}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let div;
    	let t;
    	let if_block_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	const trigger_slot_template = /*#slots*/ ctx[11].trigger;
    	const trigger_slot = create_slot(trigger_slot_template, ctx, /*$$scope*/ ctx[10], get_trigger_slot_context);
    	let if_block = /*$show*/ ctx[0] && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (trigger_slot) trigger_slot.c();
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(div, "class", "popover-button-container svelte-1vj19wa");
    			attr_dev(div, "aria-label", "More information");
    			attr_dev(div, "tabindex", "0");
    			add_location(div, file$e, 79, 0, 2710);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (trigger_slot) {
    				trigger_slot.m(div, null);
    			}

    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(/*popperRef*/ ctx[2].call(null, div)),
    					listen_dev(div, "mousedown", handleMousedown, false, false, false, false),
    					listen_dev(div, "click", /*togglePopover*/ ctx[4], false, false, false, false),
    					listen_dev(div, "keydown", /*handleKeydown*/ ctx[7], false, false, false, false),
    					listen_dev(div, "blur", /*handleBlur*/ ctx[5], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (trigger_slot) {
    				if (trigger_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						trigger_slot,
    						trigger_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(trigger_slot_template, /*$$scope*/ ctx[10], dirty, get_trigger_slot_changes),
    						get_trigger_slot_context
    					);
    				}
    			}

    			if (/*$show*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$show*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$9(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(trigger_slot, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(trigger_slot, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (trigger_slot) trigger_slot.d(detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function handleMousedown(event) {
    	event.stopPropagation(); // Prevent click outside logic from triggering
    } // This function might not be necessary if togglePopover is handling the logic

    function instance$f($$self, $$props, $$invalidate) {
    	let $activePopover;
    	let $show;
    	validate_store(activePopover, 'activePopover');
    	component_subscribe($$self, activePopover, $$value => $$invalidate(9, $activePopover = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Popover', slots, ['trigger','content']);
    	let { placement = 'top' } = $$props;
    	let show = writable(false);
    	validate_store(show, 'show');
    	component_subscribe($$self, show, value => $$invalidate(0, $show = value));
    	const componentId = getNextUniqueId(); // Generates a unique ID for each popover instance
    	console.log(`Popover initialized with componentId: ${componentId}`);

    	const [popperRef, popperContent, getPopperInstance] = createPopperActions({
    		placement,
    		modifiers: [
    			{
    				name: 'offset',
    				options: { offset: [0, 8] }
    			},
    			{
    				name: 'flip',
    				options: {
    					fallbackPlacements: ['top', 'bottom', 'right', 'left']
    				}
    			},
    			{
    				name: 'preventOverflow',
    				options: { boundary: 'clippingParents' }
    			}
    		]
    	});

    	function togglePopover(event) {
    		event.stopPropagation(); // Prevent click outside logic from triggering

    		if (!get_store_value(show)) {
    			console.log(`Opening popover with componentId: ${componentId}`);
    			activePopover.set(componentId); // Set this popover as the active one
    			show.set(true);
    		} else {
    			console.log(`Closing popover with componentId: ${componentId}`);
    			activePopover.set(null); // Clear the active popover if this popover is being closed
    			show.set(false);
    		}
    	}

    	// Function to close the popover when focus moves away from the button
    	// Consider if you need this based on your UX requirements
    	function handleBlur(event) {
    		show.set(false); // Close the popover
    	}

    	function clickOutside(node) {
    		const handleClick = event => {
    			if (!node.contains(event.target)) {
    				show.set(false);
    			}
    		};

    		document.addEventListener('mousedown', handleClick);

    		return {
    			destroy() {
    				document.removeEventListener('mousedown', handleClick);
    			}
    		};
    	}

    	// Adjust handleKeydown to ensure it's only for Enter key and stops propagation
    	function handleKeydown(event) {
    		if (event.key === 'Enter') {
    			event.stopPropagation(); // Prevent any potential bubbling issues

    			// Toggle logic might need to be adjusted based on how you want Enter to behave
    			togglePopover(event);
    		}
    	}

    	const writable_props = ['placement'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$5.warn(`<Popover> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('placement' in $$props) $$invalidate(8, placement = $$props.placement);
    		if ('$$scope' in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		createPopperActions,
    		writable,
    		get: get_store_value,
    		activePopover,
    		getNextUniqueId,
    		placement,
    		show,
    		componentId,
    		popperRef,
    		popperContent,
    		getPopperInstance,
    		togglePopover,
    		handleMousedown,
    		handleBlur,
    		clickOutside,
    		handleKeydown,
    		$activePopover,
    		$show
    	});

    	$$self.$inject_state = $$props => {
    		if ('placement' in $$props) $$invalidate(8, placement = $$props.placement);
    		if ('show' in $$props) $$invalidate(1, show = $$props.show);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$activePopover*/ 512) {
    			// Reactive statement to close this popover if it's not the active one
    			if ($activePopover !== componentId && get_store_value(show)) {
    				console.log(`Closing popover with componentId: ${componentId} because activePopover is: ${$activePopover}`);
    				show.set(false);
    			}
    		}
    	};

    	return [
    		$show,
    		show,
    		popperRef,
    		popperContent,
    		togglePopover,
    		handleBlur,
    		clickOutside,
    		handleKeydown,
    		placement,
    		$activePopover,
    		$$scope,
    		slots
    	];
    }

    class Popover extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, { placement: 8 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Popover",
    			options,
    			id: create_fragment$f.name
    		});
    	}

    	get placement() {
    		throw new Error("<Popover>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placement(value) {
    		throw new Error("<Popover>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // Get CSS class list from a props object
    function classList(props) {
      const {
        beat,
        fade,
        beatFade,
        bounce,
        shake,
        flash,
        spin,
        spinPulse,
        spinReverse,
        pulse,
        fixedWidth,
        inverse,
        border,
        listItem,
        flip,
        size,
        rotation,
        pull
      } = props;

      // map of CSS class names to properties
      const classes = {
        'fa-beat': beat,
        'fa-fade': fade,
        'fa-beat-fade': beatFade,
        'fa-bounce': bounce,
        'fa-shake': shake,
        'fa-flash': flash,
        'fa-spin': spin,
        'fa-spin-reverse': spinReverse,
        'fa-spin-pulse': spinPulse,
        'fa-pulse': pulse,
        'fa-fw': fixedWidth,
        'fa-inverse': inverse,
        'fa-border': border,
        'fa-li': listItem,
        'fa-flip': flip === true,
        'fa-flip-horizontal': flip === 'horizontal' || flip === 'both',
        'fa-flip-vertical': flip === 'vertical' || flip === 'both',
        [`fa-${size}`]: typeof size !== 'undefined' && size !== null,
        [`fa-rotate-${rotation}`]:
          typeof rotation !== 'undefined' && rotation !== null && rotation !== 0,
        [`fa-pull-${pull}`]: typeof pull !== 'undefined' && pull !== null,
        'fa-swap-opacity': props.swapOpacity
      };

      // map over all the keys in the classes object
      // return an array of the keys where the value for the key is not null
      return Object.keys(classes)
        .map(key => (classes[key] ? key : null))
        .filter(key => key)
    }

    // Camelize taken from humps
    // humps is copyright © 2012+ Dom Christie
    // Released under the MIT license.

    // Performant way to determine if object coerces to a number
    function _isNumerical(obj) {
      obj = obj - 0;

      // eslint-disable-next-line no-self-compare
      return obj === obj
    }

    function camelize(string) {
      if (_isNumerical(string)) {
        return string
      }

      // eslint-disable-next-line no-useless-escape
      string = string.replace(/[\-_\s]+(.)?/g, function(match, chr) {
        return chr ? chr.toUpperCase() : ''
      });

      // Ensure 1st char is always lowercase
      return string.substr(0, 1).toLowerCase() + string.substr(1)
    }

    function styleToString(style) {
      if (typeof style === 'string') {
        return style
      }

      return Object.keys(style).reduce((acc, key) => (
        acc + key.split(/(?=[A-Z])/).join('-').toLowerCase() + ':' + style[key] + ';'
      ), '')
    }

    function convert(createElement, element, extraProps = {}) {
      if (typeof element === 'string') {
        return element
      }

      const children = (element.children || []).map((child) => {
        return convert(createElement, child)
      });

      /* eslint-disable dot-notation */
      const mixins = Object.keys(element.attributes || {}).reduce(
        (acc, key) => {
          const val = element.attributes[key];

          if (key === 'style') {
            acc.attrs['style'] = styleToString(val);
          } else {
            if (key.indexOf('aria-') === 0 || key.indexOf('data-') === 0) {
              acc.attrs[key.toLowerCase()] = val;
            } else {
              acc.attrs[camelize(key)] = val;
            }
          }

          return acc
        },
        { attrs: {} }
      );

      /* eslint-enable */

      return createElement(element.tag, { ...mixins.attrs }, children)
    }

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }

      return keys;
    }

    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }

      return target;
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof(obj);
    }

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", {
        writable: false
      });
      return Constructor;
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _toConsumableArray(arr) {
      return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
    }

    function _arrayWithoutHoles(arr) {
      if (Array.isArray(arr)) return _arrayLikeToArray(arr);
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function _iterableToArray(iter) {
      if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
    }

    function _iterableToArrayLimit(arr, i) {
      var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

      if (_i == null) return;
      var _arr = [];
      var _n = true;
      var _d = false;

      var _s, _e;

      try {
        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

      return arr2;
    }

    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var noop = function noop() {};

    var _WINDOW = {};
    var _DOCUMENT = {};
    var _MUTATION_OBSERVER = null;
    var _PERFORMANCE = {
      mark: noop,
      measure: noop
    };

    try {
      if (typeof window !== 'undefined') _WINDOW = window;
      if (typeof document !== 'undefined') _DOCUMENT = document;
      if (typeof MutationObserver !== 'undefined') _MUTATION_OBSERVER = MutationObserver;
      if (typeof performance !== 'undefined') _PERFORMANCE = performance;
    } catch (e) {}

    var _ref = _WINDOW.navigator || {},
        _ref$userAgent = _ref.userAgent,
        userAgent = _ref$userAgent === void 0 ? '' : _ref$userAgent;
    var WINDOW = _WINDOW;
    var DOCUMENT = _DOCUMENT;
    var MUTATION_OBSERVER = _MUTATION_OBSERVER;
    var PERFORMANCE = _PERFORMANCE;
    !!WINDOW.document;
    var IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === 'function' && typeof DOCUMENT.createElement === 'function';
    var IS_IE = ~userAgent.indexOf('MSIE') || ~userAgent.indexOf('Trident/');

    var _familyProxy, _familyProxy2, _familyProxy3, _familyProxy4, _familyProxy5;

    var NAMESPACE_IDENTIFIER = '___FONT_AWESOME___';
    var UNITS_IN_GRID = 16;
    var DEFAULT_CSS_PREFIX = 'fa';
    var DEFAULT_REPLACEMENT_CLASS = 'svg-inline--fa';
    var DATA_FA_I2SVG = 'data-fa-i2svg';
    var DATA_FA_PSEUDO_ELEMENT = 'data-fa-pseudo-element';
    var DATA_FA_PSEUDO_ELEMENT_PENDING = 'data-fa-pseudo-element-pending';
    var DATA_PREFIX = 'data-prefix';
    var DATA_ICON = 'data-icon';
    var HTML_CLASS_I2SVG_BASE_CLASS = 'fontawesome-i2svg';
    var MUTATION_APPROACH_ASYNC = 'async';
    var TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS = ['HTML', 'HEAD', 'STYLE', 'SCRIPT'];
    var PRODUCTION$1 = function () {
      try {
        return process.env.NODE_ENV === 'production';
      } catch (e) {
        return false;
      }
    }();
    var FAMILY_CLASSIC = 'classic';
    var FAMILY_SHARP = 'sharp';
    var FAMILIES = [FAMILY_CLASSIC, FAMILY_SHARP];

    function familyProxy(obj) {
      // Defaults to the classic family if family is not available
      return new Proxy(obj, {
        get: function get(target, prop) {
          return prop in target ? target[prop] : target[FAMILY_CLASSIC];
        }
      });
    }
    var PREFIX_TO_STYLE = familyProxy((_familyProxy = {}, _defineProperty(_familyProxy, FAMILY_CLASSIC, {
      'fa': 'solid',
      'fas': 'solid',
      'fa-solid': 'solid',
      'far': 'regular',
      'fa-regular': 'regular',
      'fal': 'light',
      'fa-light': 'light',
      'fat': 'thin',
      'fa-thin': 'thin',
      'fad': 'duotone',
      'fa-duotone': 'duotone',
      'fab': 'brands',
      'fa-brands': 'brands',
      'fak': 'kit',
      'fakd': 'kit',
      'fa-kit': 'kit',
      'fa-kit-duotone': 'kit'
    }), _defineProperty(_familyProxy, FAMILY_SHARP, {
      'fa': 'solid',
      'fass': 'solid',
      'fa-solid': 'solid',
      'fasr': 'regular',
      'fa-regular': 'regular',
      'fasl': 'light',
      'fa-light': 'light',
      'fast': 'thin',
      'fa-thin': 'thin'
    }), _familyProxy));
    var STYLE_TO_PREFIX = familyProxy((_familyProxy2 = {}, _defineProperty(_familyProxy2, FAMILY_CLASSIC, {
      solid: 'fas',
      regular: 'far',
      light: 'fal',
      thin: 'fat',
      duotone: 'fad',
      brands: 'fab',
      kit: 'fak'
    }), _defineProperty(_familyProxy2, FAMILY_SHARP, {
      solid: 'fass',
      regular: 'fasr',
      light: 'fasl',
      thin: 'fast'
    }), _familyProxy2));
    var PREFIX_TO_LONG_STYLE = familyProxy((_familyProxy3 = {}, _defineProperty(_familyProxy3, FAMILY_CLASSIC, {
      fab: 'fa-brands',
      fad: 'fa-duotone',
      fak: 'fa-kit',
      fal: 'fa-light',
      far: 'fa-regular',
      fas: 'fa-solid',
      fat: 'fa-thin'
    }), _defineProperty(_familyProxy3, FAMILY_SHARP, {
      fass: 'fa-solid',
      fasr: 'fa-regular',
      fasl: 'fa-light',
      fast: 'fa-thin'
    }), _familyProxy3));
    var LONG_STYLE_TO_PREFIX = familyProxy((_familyProxy4 = {}, _defineProperty(_familyProxy4, FAMILY_CLASSIC, {
      'fa-brands': 'fab',
      'fa-duotone': 'fad',
      'fa-kit': 'fak',
      'fa-light': 'fal',
      'fa-regular': 'far',
      'fa-solid': 'fas',
      'fa-thin': 'fat'
    }), _defineProperty(_familyProxy4, FAMILY_SHARP, {
      'fa-solid': 'fass',
      'fa-regular': 'fasr',
      'fa-light': 'fasl',
      'fa-thin': 'fast'
    }), _familyProxy4));
    var ICON_SELECTION_SYNTAX_PATTERN = /fa(s|r|l|t|d|b|k|ss|sr|sl|st)?[\-\ ]/; // eslint-disable-line no-useless-escape

    var LAYERS_TEXT_CLASSNAME = 'fa-layers-text';
    var FONT_FAMILY_PATTERN = /Font ?Awesome ?([56 ]*)(Solid|Regular|Light|Thin|Duotone|Brands|Free|Pro|Sharp|Kit)?.*/i;
    var FONT_WEIGHT_TO_PREFIX = familyProxy((_familyProxy5 = {}, _defineProperty(_familyProxy5, FAMILY_CLASSIC, {
      900: 'fas',
      400: 'far',
      normal: 'far',
      300: 'fal',
      100: 'fat'
    }), _defineProperty(_familyProxy5, FAMILY_SHARP, {
      900: 'fass',
      400: 'fasr',
      300: 'fasl',
      100: 'fast'
    }), _familyProxy5));
    var oneToTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    var oneToTwenty = oneToTen.concat([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);
    var ATTRIBUTES_WATCHED_FOR_MUTATION = ['class', 'data-prefix', 'data-icon', 'data-fa-transform', 'data-fa-mask'];
    var DUOTONE_CLASSES = {
      GROUP: 'duotone-group',
      SWAP_OPACITY: 'swap-opacity',
      PRIMARY: 'primary',
      SECONDARY: 'secondary'
    };
    var prefixes = new Set();
    Object.keys(STYLE_TO_PREFIX[FAMILY_CLASSIC]).map(prefixes.add.bind(prefixes));
    Object.keys(STYLE_TO_PREFIX[FAMILY_SHARP]).map(prefixes.add.bind(prefixes));
    var RESERVED_CLASSES = [].concat(FAMILIES, _toConsumableArray(prefixes), ['2xs', 'xs', 'sm', 'lg', 'xl', '2xl', 'beat', 'border', 'fade', 'beat-fade', 'bounce', 'flip-both', 'flip-horizontal', 'flip-vertical', 'flip', 'fw', 'inverse', 'layers-counter', 'layers-text', 'layers', 'li', 'pull-left', 'pull-right', 'pulse', 'rotate-180', 'rotate-270', 'rotate-90', 'rotate-by', 'shake', 'spin-pulse', 'spin-reverse', 'spin', 'stack-1x', 'stack-2x', 'stack', 'ul', DUOTONE_CLASSES.GROUP, DUOTONE_CLASSES.SWAP_OPACITY, DUOTONE_CLASSES.PRIMARY, DUOTONE_CLASSES.SECONDARY]).concat(oneToTen.map(function (n) {
      return "".concat(n, "x");
    })).concat(oneToTwenty.map(function (n) {
      return "w-".concat(n);
    }));

    var initial = WINDOW.FontAwesomeConfig || {};

    function getAttrConfig(attr) {
      var element = DOCUMENT.querySelector('script[' + attr + ']');

      if (element) {
        return element.getAttribute(attr);
      }
    }

    function coerce(val) {
      // Getting an empty string will occur if the attribute is set on the HTML tag but without a value
      // We'll assume that this is an indication that it should be toggled to true
      if (val === '') return true;
      if (val === 'false') return false;
      if (val === 'true') return true;
      return val;
    }

    if (DOCUMENT && typeof DOCUMENT.querySelector === 'function') {
      var attrs = [['data-family-prefix', 'familyPrefix'], ['data-css-prefix', 'cssPrefix'], ['data-family-default', 'familyDefault'], ['data-style-default', 'styleDefault'], ['data-replacement-class', 'replacementClass'], ['data-auto-replace-svg', 'autoReplaceSvg'], ['data-auto-add-css', 'autoAddCss'], ['data-auto-a11y', 'autoA11y'], ['data-search-pseudo-elements', 'searchPseudoElements'], ['data-observe-mutations', 'observeMutations'], ['data-mutate-approach', 'mutateApproach'], ['data-keep-original-source', 'keepOriginalSource'], ['data-measure-performance', 'measurePerformance'], ['data-show-missing-icons', 'showMissingIcons']];
      attrs.forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            attr = _ref2[0],
            key = _ref2[1];

        var val = coerce(getAttrConfig(attr));

        if (val !== undefined && val !== null) {
          initial[key] = val;
        }
      });
    }

    var _default = {
      styleDefault: 'solid',
      familyDefault: 'classic',
      cssPrefix: DEFAULT_CSS_PREFIX,
      replacementClass: DEFAULT_REPLACEMENT_CLASS,
      autoReplaceSvg: true,
      autoAddCss: true,
      autoA11y: true,
      searchPseudoElements: false,
      observeMutations: true,
      mutateApproach: 'async',
      keepOriginalSource: true,
      measurePerformance: false,
      showMissingIcons: true
    }; // familyPrefix is deprecated but we must still support it if present

    if (initial.familyPrefix) {
      initial.cssPrefix = initial.familyPrefix;
    }

    var _config = _objectSpread2(_objectSpread2({}, _default), initial);

    if (!_config.autoReplaceSvg) _config.observeMutations = false;
    var config = {};
    Object.keys(_default).forEach(function (key) {
      Object.defineProperty(config, key, {
        enumerable: true,
        set: function set(val) {
          _config[key] = val;

          _onChangeCb.forEach(function (cb) {
            return cb(config);
          });
        },
        get: function get() {
          return _config[key];
        }
      });
    }); // familyPrefix is deprecated as of 6.2.0 and should be removed in 7.0.0

    Object.defineProperty(config, 'familyPrefix', {
      enumerable: true,
      set: function set(val) {
        _config.cssPrefix = val;

        _onChangeCb.forEach(function (cb) {
          return cb(config);
        });
      },
      get: function get() {
        return _config.cssPrefix;
      }
    });
    WINDOW.FontAwesomeConfig = config;
    var _onChangeCb = [];
    function onChange(cb) {
      _onChangeCb.push(cb);

      return function () {
        _onChangeCb.splice(_onChangeCb.indexOf(cb), 1);
      };
    }

    var d = UNITS_IN_GRID;
    var meaninglessTransform = {
      size: 16,
      x: 0,
      y: 0,
      rotate: 0,
      flipX: false,
      flipY: false
    };
    function insertCss(css) {
      if (!css || !IS_DOM) {
        return;
      }

      var style = DOCUMENT.createElement('style');
      style.setAttribute('type', 'text/css');
      style.innerHTML = css;
      var headChildren = DOCUMENT.head.childNodes;
      var beforeChild = null;

      for (var i = headChildren.length - 1; i > -1; i--) {
        var child = headChildren[i];
        var tagName = (child.tagName || '').toUpperCase();

        if (['STYLE', 'LINK'].indexOf(tagName) > -1) {
          beforeChild = child;
        }
      }

      DOCUMENT.head.insertBefore(style, beforeChild);
      return css;
    }
    var idPool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    function nextUniqueId() {
      var size = 12;
      var id = '';

      while (size-- > 0) {
        id += idPool[Math.random() * 62 | 0];
      }

      return id;
    }
    function toArray(obj) {
      var array = [];

      for (var i = (obj || []).length >>> 0; i--;) {
        array[i] = obj[i];
      }

      return array;
    }
    function classArray(node) {
      if (node.classList) {
        return toArray(node.classList);
      } else {
        return (node.getAttribute('class') || '').split(' ').filter(function (i) {
          return i;
        });
      }
    }
    function htmlEscape(str) {
      return "".concat(str).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    }
    function joinAttributes(attributes) {
      return Object.keys(attributes || {}).reduce(function (acc, attributeName) {
        return acc + "".concat(attributeName, "=\"").concat(htmlEscape(attributes[attributeName]), "\" ");
      }, '').trim();
    }
    function joinStyles(styles) {
      return Object.keys(styles || {}).reduce(function (acc, styleName) {
        return acc + "".concat(styleName, ": ").concat(styles[styleName].trim(), ";");
      }, '');
    }
    function transformIsMeaningful(transform) {
      return transform.size !== meaninglessTransform.size || transform.x !== meaninglessTransform.x || transform.y !== meaninglessTransform.y || transform.rotate !== meaninglessTransform.rotate || transform.flipX || transform.flipY;
    }
    function transformForSvg(_ref) {
      var transform = _ref.transform,
          containerWidth = _ref.containerWidth,
          iconWidth = _ref.iconWidth;
      var outer = {
        transform: "translate(".concat(containerWidth / 2, " 256)")
      };
      var innerTranslate = "translate(".concat(transform.x * 32, ", ").concat(transform.y * 32, ") ");
      var innerScale = "scale(".concat(transform.size / 16 * (transform.flipX ? -1 : 1), ", ").concat(transform.size / 16 * (transform.flipY ? -1 : 1), ") ");
      var innerRotate = "rotate(".concat(transform.rotate, " 0 0)");
      var inner = {
        transform: "".concat(innerTranslate, " ").concat(innerScale, " ").concat(innerRotate)
      };
      var path = {
        transform: "translate(".concat(iconWidth / 2 * -1, " -256)")
      };
      return {
        outer: outer,
        inner: inner,
        path: path
      };
    }
    function transformForCss(_ref2) {
      var transform = _ref2.transform,
          _ref2$width = _ref2.width,
          width = _ref2$width === void 0 ? UNITS_IN_GRID : _ref2$width,
          _ref2$height = _ref2.height,
          height = _ref2$height === void 0 ? UNITS_IN_GRID : _ref2$height,
          _ref2$startCentered = _ref2.startCentered,
          startCentered = _ref2$startCentered === void 0 ? false : _ref2$startCentered;
      var val = '';

      if (startCentered && IS_IE) {
        val += "translate(".concat(transform.x / d - width / 2, "em, ").concat(transform.y / d - height / 2, "em) ");
      } else if (startCentered) {
        val += "translate(calc(-50% + ".concat(transform.x / d, "em), calc(-50% + ").concat(transform.y / d, "em)) ");
      } else {
        val += "translate(".concat(transform.x / d, "em, ").concat(transform.y / d, "em) ");
      }

      val += "scale(".concat(transform.size / d * (transform.flipX ? -1 : 1), ", ").concat(transform.size / d * (transform.flipY ? -1 : 1), ") ");
      val += "rotate(".concat(transform.rotate, "deg) ");
      return val;
    }

    var baseStyles = ":root, :host {\n  --fa-font-solid: normal 900 1em/1 \"Font Awesome 6 Solid\";\n  --fa-font-regular: normal 400 1em/1 \"Font Awesome 6 Regular\";\n  --fa-font-light: normal 300 1em/1 \"Font Awesome 6 Light\";\n  --fa-font-thin: normal 100 1em/1 \"Font Awesome 6 Thin\";\n  --fa-font-duotone: normal 900 1em/1 \"Font Awesome 6 Duotone\";\n  --fa-font-sharp-solid: normal 900 1em/1 \"Font Awesome 6 Sharp\";\n  --fa-font-sharp-regular: normal 400 1em/1 \"Font Awesome 6 Sharp\";\n  --fa-font-sharp-light: normal 300 1em/1 \"Font Awesome 6 Sharp\";\n  --fa-font-sharp-thin: normal 100 1em/1 \"Font Awesome 6 Sharp\";\n  --fa-font-brands: normal 400 1em/1 \"Font Awesome 6 Brands\";\n}\n\nsvg:not(:root).svg-inline--fa, svg:not(:host).svg-inline--fa {\n  overflow: visible;\n  box-sizing: content-box;\n}\n\n.svg-inline--fa {\n  display: var(--fa-display, inline-block);\n  height: 1em;\n  overflow: visible;\n  vertical-align: -0.125em;\n}\n.svg-inline--fa.fa-2xs {\n  vertical-align: 0.1em;\n}\n.svg-inline--fa.fa-xs {\n  vertical-align: 0em;\n}\n.svg-inline--fa.fa-sm {\n  vertical-align: -0.0714285705em;\n}\n.svg-inline--fa.fa-lg {\n  vertical-align: -0.2em;\n}\n.svg-inline--fa.fa-xl {\n  vertical-align: -0.25em;\n}\n.svg-inline--fa.fa-2xl {\n  vertical-align: -0.3125em;\n}\n.svg-inline--fa.fa-pull-left {\n  margin-right: var(--fa-pull-margin, 0.3em);\n  width: auto;\n}\n.svg-inline--fa.fa-pull-right {\n  margin-left: var(--fa-pull-margin, 0.3em);\n  width: auto;\n}\n.svg-inline--fa.fa-li {\n  width: var(--fa-li-width, 2em);\n  top: 0.25em;\n}\n.svg-inline--fa.fa-fw {\n  width: var(--fa-fw-width, 1.25em);\n}\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.fa-layers-counter, .fa-layers-text {\n  display: inline-block;\n  position: absolute;\n  text-align: center;\n}\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -0.125em;\n  width: 1em;\n}\n.fa-layers svg.svg-inline--fa {\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter {\n  background-color: var(--fa-counter-background-color, #ff253a);\n  border-radius: var(--fa-counter-border-radius, 1em);\n  box-sizing: border-box;\n  color: var(--fa-inverse, #fff);\n  line-height: var(--fa-counter-line-height, 1);\n  max-width: var(--fa-counter-max-width, 5em);\n  min-width: var(--fa-counter-min-width, 1.5em);\n  overflow: hidden;\n  padding: var(--fa-counter-padding, 0.25em 0.5em);\n  right: var(--fa-right, 0);\n  text-overflow: ellipsis;\n  top: var(--fa-top, 0);\n  -webkit-transform: scale(var(--fa-counter-scale, 0.25));\n          transform: scale(var(--fa-counter-scale, 0.25));\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-bottom-right {\n  bottom: var(--fa-bottom, 0);\n  right: var(--fa-right, 0);\n  top: auto;\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right;\n}\n\n.fa-layers-bottom-left {\n  bottom: var(--fa-bottom, 0);\n  left: var(--fa-left, 0);\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left;\n}\n\n.fa-layers-top-right {\n  top: var(--fa-top, 0);\n  right: var(--fa-right, 0);\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-top-left {\n  left: var(--fa-left, 0);\n  right: auto;\n  top: var(--fa-top, 0);\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: top left;\n          transform-origin: top left;\n}\n\n.fa-1x {\n  font-size: 1em;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-6x {\n  font-size: 6em;\n}\n\n.fa-7x {\n  font-size: 7em;\n}\n\n.fa-8x {\n  font-size: 8em;\n}\n\n.fa-9x {\n  font-size: 9em;\n}\n\n.fa-10x {\n  font-size: 10em;\n}\n\n.fa-2xs {\n  font-size: 0.625em;\n  line-height: 0.1em;\n  vertical-align: 0.225em;\n}\n\n.fa-xs {\n  font-size: 0.75em;\n  line-height: 0.0833333337em;\n  vertical-align: 0.125em;\n}\n\n.fa-sm {\n  font-size: 0.875em;\n  line-height: 0.0714285718em;\n  vertical-align: 0.0535714295em;\n}\n\n.fa-lg {\n  font-size: 1.25em;\n  line-height: 0.05em;\n  vertical-align: -0.075em;\n}\n\n.fa-xl {\n  font-size: 1.5em;\n  line-height: 0.0416666682em;\n  vertical-align: -0.125em;\n}\n\n.fa-2xl {\n  font-size: 2em;\n  line-height: 0.03125em;\n  vertical-align: -0.1875em;\n}\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: var(--fa-li-margin, 2.5em);\n  padding-left: 0;\n}\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  left: calc(var(--fa-li-width, 2em) * -1);\n  position: absolute;\n  text-align: center;\n  width: var(--fa-li-width, 2em);\n  line-height: inherit;\n}\n\n.fa-border {\n  border-color: var(--fa-border-color, #eee);\n  border-radius: var(--fa-border-radius, 0.1em);\n  border-style: var(--fa-border-style, solid);\n  border-width: var(--fa-border-width, 0.08em);\n  padding: var(--fa-border-padding, 0.2em 0.25em 0.15em);\n}\n\n.fa-pull-left {\n  float: left;\n  margin-right: var(--fa-pull-margin, 0.3em);\n}\n\n.fa-pull-right {\n  float: right;\n  margin-left: var(--fa-pull-margin, 0.3em);\n}\n\n.fa-beat {\n  -webkit-animation-name: fa-beat;\n          animation-name: fa-beat;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\n}\n\n.fa-bounce {\n  -webkit-animation-name: fa-bounce;\n          animation-name: fa-bounce;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\n}\n\n.fa-fade {\n  -webkit-animation-name: fa-fade;\n          animation-name: fa-fade;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n}\n\n.fa-beat-fade {\n  -webkit-animation-name: fa-beat-fade;\n          animation-name: fa-beat-fade;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n}\n\n.fa-flip {\n  -webkit-animation-name: fa-flip;\n          animation-name: fa-flip;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\n}\n\n.fa-shake {\n  -webkit-animation-name: fa-shake;\n          animation-name: fa-shake;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\n          animation-timing-function: var(--fa-animation-timing, linear);\n}\n\n.fa-spin {\n  -webkit-animation-name: fa-spin;\n          animation-name: fa-spin;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 2s);\n          animation-duration: var(--fa-animation-duration, 2s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\n          animation-timing-function: var(--fa-animation-timing, linear);\n}\n\n.fa-spin-reverse {\n  --fa-animation-direction: reverse;\n}\n\n.fa-pulse,\n.fa-spin-pulse {\n  -webkit-animation-name: fa-spin;\n          animation-name: fa-spin;\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, steps(8));\n          animation-timing-function: var(--fa-animation-timing, steps(8));\n}\n\n@media (prefers-reduced-motion: reduce) {\n  .fa-beat,\n.fa-bounce,\n.fa-fade,\n.fa-beat-fade,\n.fa-flip,\n.fa-pulse,\n.fa-shake,\n.fa-spin,\n.fa-spin-pulse {\n    -webkit-animation-delay: -1ms;\n            animation-delay: -1ms;\n    -webkit-animation-duration: 1ms;\n            animation-duration: 1ms;\n    -webkit-animation-iteration-count: 1;\n            animation-iteration-count: 1;\n    -webkit-transition-delay: 0s;\n            transition-delay: 0s;\n    -webkit-transition-duration: 0s;\n            transition-duration: 0s;\n  }\n}\n@-webkit-keyframes fa-beat {\n  0%, 90% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  45% {\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\n            transform: scale(var(--fa-beat-scale, 1.25));\n  }\n}\n@keyframes fa-beat {\n  0%, 90% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  45% {\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\n            transform: scale(var(--fa-beat-scale, 1.25));\n  }\n}\n@-webkit-keyframes fa-bounce {\n  0% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  10% {\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n  }\n  30% {\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n  }\n  50% {\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n  }\n  57% {\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n  }\n  64% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  100% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n}\n@keyframes fa-bounce {\n  0% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  10% {\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n  }\n  30% {\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n  }\n  50% {\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n  }\n  57% {\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n  }\n  64% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  100% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n}\n@-webkit-keyframes fa-fade {\n  50% {\n    opacity: var(--fa-fade-opacity, 0.4);\n  }\n}\n@keyframes fa-fade {\n  50% {\n    opacity: var(--fa-fade-opacity, 0.4);\n  }\n}\n@-webkit-keyframes fa-beat-fade {\n  0%, 100% {\n    opacity: var(--fa-beat-fade-opacity, 0.4);\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\n  }\n}\n@keyframes fa-beat-fade {\n  0%, 100% {\n    opacity: var(--fa-beat-fade-opacity, 0.4);\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\n  }\n}\n@-webkit-keyframes fa-flip {\n  50% {\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n  }\n}\n@keyframes fa-flip {\n  50% {\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n  }\n}\n@-webkit-keyframes fa-shake {\n  0% {\n    -webkit-transform: rotate(-15deg);\n            transform: rotate(-15deg);\n  }\n  4% {\n    -webkit-transform: rotate(15deg);\n            transform: rotate(15deg);\n  }\n  8%, 24% {\n    -webkit-transform: rotate(-18deg);\n            transform: rotate(-18deg);\n  }\n  12%, 28% {\n    -webkit-transform: rotate(18deg);\n            transform: rotate(18deg);\n  }\n  16% {\n    -webkit-transform: rotate(-22deg);\n            transform: rotate(-22deg);\n  }\n  20% {\n    -webkit-transform: rotate(22deg);\n            transform: rotate(22deg);\n  }\n  32% {\n    -webkit-transform: rotate(-12deg);\n            transform: rotate(-12deg);\n  }\n  36% {\n    -webkit-transform: rotate(12deg);\n            transform: rotate(12deg);\n  }\n  40%, 100% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n}\n@keyframes fa-shake {\n  0% {\n    -webkit-transform: rotate(-15deg);\n            transform: rotate(-15deg);\n  }\n  4% {\n    -webkit-transform: rotate(15deg);\n            transform: rotate(15deg);\n  }\n  8%, 24% {\n    -webkit-transform: rotate(-18deg);\n            transform: rotate(-18deg);\n  }\n  12%, 28% {\n    -webkit-transform: rotate(18deg);\n            transform: rotate(18deg);\n  }\n  16% {\n    -webkit-transform: rotate(-22deg);\n            transform: rotate(-22deg);\n  }\n  20% {\n    -webkit-transform: rotate(22deg);\n            transform: rotate(22deg);\n  }\n  32% {\n    -webkit-transform: rotate(-12deg);\n            transform: rotate(-12deg);\n  }\n  36% {\n    -webkit-transform: rotate(12deg);\n            transform: rotate(12deg);\n  }\n  40%, 100% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n}\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.fa-rotate-90 {\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1);\n}\n\n.fa-flip-both,\n.fa-flip-horizontal.fa-flip-vertical {\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1);\n}\n\n.fa-rotate-by {\n  -webkit-transform: rotate(var(--fa-rotate-angle, none));\n          transform: rotate(var(--fa-rotate-angle, none));\n}\n\n.fa-stack {\n  display: inline-block;\n  vertical-align: middle;\n  height: 2em;\n  position: relative;\n  width: 2.5em;\n}\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: var(--fa-stack-z-index, auto);\n}\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1.25em;\n}\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2.5em;\n}\n\n.fa-inverse {\n  color: var(--fa-inverse, #fff);\n}\n\n.sr-only,\n.fa-sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.sr-only-focusable:not(:focus),\n.fa-sr-only-focusable:not(:focus) {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.svg-inline--fa .fa-primary {\n  fill: var(--fa-primary-color, currentColor);\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa .fa-secondary {\n  fill: var(--fa-secondary-color, currentColor);\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-primary {\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa mask .fa-primary,\n.svg-inline--fa mask .fa-secondary {\n  fill: black;\n}\n\n.fad.fa-inverse,\n.fa-duotone.fa-inverse {\n  color: var(--fa-inverse, #fff);\n}";

    function css() {
      var dcp = DEFAULT_CSS_PREFIX;
      var drc = DEFAULT_REPLACEMENT_CLASS;
      var fp = config.cssPrefix;
      var rc = config.replacementClass;
      var s = baseStyles;

      if (fp !== dcp || rc !== drc) {
        var dPatt = new RegExp("\\.".concat(dcp, "\\-"), 'g');
        var customPropPatt = new RegExp("\\--".concat(dcp, "\\-"), 'g');
        var rPatt = new RegExp("\\.".concat(drc), 'g');
        s = s.replace(dPatt, ".".concat(fp, "-")).replace(customPropPatt, "--".concat(fp, "-")).replace(rPatt, ".".concat(rc));
      }

      return s;
    }

    var _cssInserted = false;

    function ensureCss() {
      if (config.autoAddCss && !_cssInserted) {
        insertCss(css());
        _cssInserted = true;
      }
    }

    var InjectCSS = {
      mixout: function mixout() {
        return {
          dom: {
            css: css,
            insertCss: ensureCss
          }
        };
      },
      hooks: function hooks() {
        return {
          beforeDOMElementCreation: function beforeDOMElementCreation() {
            ensureCss();
          },
          beforeI2svg: function beforeI2svg() {
            ensureCss();
          }
        };
      }
    };

    var w = WINDOW || {};
    if (!w[NAMESPACE_IDENTIFIER]) w[NAMESPACE_IDENTIFIER] = {};
    if (!w[NAMESPACE_IDENTIFIER].styles) w[NAMESPACE_IDENTIFIER].styles = {};
    if (!w[NAMESPACE_IDENTIFIER].hooks) w[NAMESPACE_IDENTIFIER].hooks = {};
    if (!w[NAMESPACE_IDENTIFIER].shims) w[NAMESPACE_IDENTIFIER].shims = [];
    var namespace = w[NAMESPACE_IDENTIFIER];

    var functions = [];

    var listener = function listener() {
      DOCUMENT.removeEventListener('DOMContentLoaded', listener);
      loaded = 1;
      functions.map(function (fn) {
        return fn();
      });
    };

    var loaded = false;

    if (IS_DOM) {
      loaded = (DOCUMENT.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(DOCUMENT.readyState);
      if (!loaded) DOCUMENT.addEventListener('DOMContentLoaded', listener);
    }

    function domready (fn) {
      if (!IS_DOM) return;
      loaded ? setTimeout(fn, 0) : functions.push(fn);
    }

    function toHtml(abstractNodes) {
      var tag = abstractNodes.tag,
          _abstractNodes$attrib = abstractNodes.attributes,
          attributes = _abstractNodes$attrib === void 0 ? {} : _abstractNodes$attrib,
          _abstractNodes$childr = abstractNodes.children,
          children = _abstractNodes$childr === void 0 ? [] : _abstractNodes$childr;

      if (typeof abstractNodes === 'string') {
        return htmlEscape(abstractNodes);
      } else {
        return "<".concat(tag, " ").concat(joinAttributes(attributes), ">").concat(children.map(toHtml).join(''), "</").concat(tag, ">");
      }
    }

    function iconFromMapping(mapping, prefix, iconName) {
      if (mapping && mapping[prefix] && mapping[prefix][iconName]) {
        return {
          prefix: prefix,
          iconName: iconName,
          icon: mapping[prefix][iconName]
        };
      }
    }

    /**
     * Internal helper to bind a function known to have 4 arguments
     * to a given context.
     */

    var bindInternal4 = function bindInternal4(func, thisContext) {
      return function (a, b, c, d) {
        return func.call(thisContext, a, b, c, d);
      };
    };

    /**
     * # Reduce
     *
     * A fast object `.reduce()` implementation.
     *
     * @param  {Object}   subject      The object to reduce over.
     * @param  {Function} fn           The reducer function.
     * @param  {mixed}    initialValue The initial value for the reducer, defaults to subject[0].
     * @param  {Object}   thisContext  The context for the reducer.
     * @return {mixed}                 The final result.
     */


    var reduce = function fastReduceObject(subject, fn, initialValue, thisContext) {
      var keys = Object.keys(subject),
          length = keys.length,
          iterator = thisContext !== undefined ? bindInternal4(fn, thisContext) : fn,
          i,
          key,
          result;

      if (initialValue === undefined) {
        i = 1;
        result = subject[keys[0]];
      } else {
        i = 0;
        result = initialValue;
      }

      for (; i < length; i++) {
        key = keys[i];
        result = iterator(result, subject[key], key, subject);
      }

      return result;
    };

    /**
     * ucs2decode() and codePointAt() are both works of Mathias Bynens and licensed under MIT
     *
     * Copyright Mathias Bynens <https://mathiasbynens.be/>

     * Permission is hereby granted, free of charge, to any person obtaining
     * a copy of this software and associated documentation files (the
     * "Software"), to deal in the Software without restriction, including
     * without limitation the rights to use, copy, modify, merge, publish,
     * distribute, sublicense, and/or sell copies of the Software, and to
     * permit persons to whom the Software is furnished to do so, subject to
     * the following conditions:

     * The above copyright notice and this permission notice shall be
     * included in all copies or substantial portions of the Software.

     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
     * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
     * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
     * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     */
    function ucs2decode(string) {
      var output = [];
      var counter = 0;
      var length = string.length;

      while (counter < length) {
        var value = string.charCodeAt(counter++);

        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
          var extra = string.charCodeAt(counter++);

          if ((extra & 0xFC00) == 0xDC00) {
            // eslint-disable-line eqeqeq
            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
          } else {
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }

      return output;
    }

    function toHex(unicode) {
      var decoded = ucs2decode(unicode);
      return decoded.length === 1 ? decoded[0].toString(16) : null;
    }
    function codePointAt(string, index) {
      var size = string.length;
      var first = string.charCodeAt(index);
      var second;

      if (first >= 0xD800 && first <= 0xDBFF && size > index + 1) {
        second = string.charCodeAt(index + 1);

        if (second >= 0xDC00 && second <= 0xDFFF) {
          return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
        }
      }

      return first;
    }

    function normalizeIcons(icons) {
      return Object.keys(icons).reduce(function (acc, iconName) {
        var icon = icons[iconName];
        var expanded = !!icon.icon;

        if (expanded) {
          acc[icon.iconName] = icon.icon;
        } else {
          acc[iconName] = icon;
        }

        return acc;
      }, {});
    }

    function defineIcons(prefix, icons) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var _params$skipHooks = params.skipHooks,
          skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;
      var normalized = normalizeIcons(icons);

      if (typeof namespace.hooks.addPack === 'function' && !skipHooks) {
        namespace.hooks.addPack(prefix, normalizeIcons(icons));
      } else {
        namespace.styles[prefix] = _objectSpread2(_objectSpread2({}, namespace.styles[prefix] || {}), normalized);
      }
      /**
       * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction
       * of new styles we needed to differentiate between them. Prefix `fa` is now an alias
       * for `fas` so we'll ease the upgrade process for our users by automatically defining
       * this as well.
       */


      if (prefix === 'fas') {
        defineIcons('fa', icons);
      }
    }

    var _LONG_STYLE, _PREFIXES, _PREFIXES_FOR_FAMILY;
    var styles = namespace.styles,
        shims = namespace.shims;
    var LONG_STYLE = (_LONG_STYLE = {}, _defineProperty(_LONG_STYLE, FAMILY_CLASSIC, Object.values(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC])), _defineProperty(_LONG_STYLE, FAMILY_SHARP, Object.values(PREFIX_TO_LONG_STYLE[FAMILY_SHARP])), _LONG_STYLE);
    var _defaultUsablePrefix = null;
    var _byUnicode = {};
    var _byLigature = {};
    var _byOldName = {};
    var _byOldUnicode = {};
    var _byAlias = {};
    var PREFIXES = (_PREFIXES = {}, _defineProperty(_PREFIXES, FAMILY_CLASSIC, Object.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC])), _defineProperty(_PREFIXES, FAMILY_SHARP, Object.keys(PREFIX_TO_STYLE[FAMILY_SHARP])), _PREFIXES);

    function isReserved(name) {
      return ~RESERVED_CLASSES.indexOf(name);
    }

    function getIconName(cssPrefix, cls) {
      var parts = cls.split('-');
      var prefix = parts[0];
      var iconName = parts.slice(1).join('-');

      if (prefix === cssPrefix && iconName !== '' && !isReserved(iconName)) {
        return iconName;
      } else {
        return null;
      }
    }
    var build = function build() {
      var lookup = function lookup(reducer) {
        return reduce(styles, function (o, style, prefix) {
          o[prefix] = reduce(style, reducer, {});
          return o;
        }, {});
      };

      _byUnicode = lookup(function (acc, icon, iconName) {
        if (icon[3]) {
          acc[icon[3]] = iconName;
        }

        if (icon[2]) {
          var aliases = icon[2].filter(function (a) {
            return typeof a === 'number';
          });
          aliases.forEach(function (alias) {
            acc[alias.toString(16)] = iconName;
          });
        }

        return acc;
      });
      _byLigature = lookup(function (acc, icon, iconName) {
        acc[iconName] = iconName;

        if (icon[2]) {
          var aliases = icon[2].filter(function (a) {
            return typeof a === 'string';
          });
          aliases.forEach(function (alias) {
            acc[alias] = iconName;
          });
        }

        return acc;
      });
      _byAlias = lookup(function (acc, icon, iconName) {
        var aliases = icon[2];
        acc[iconName] = iconName;
        aliases.forEach(function (alias) {
          acc[alias] = iconName;
        });
        return acc;
      }); // If we have a Kit, we can't determine if regular is available since we
      // could be auto-fetching it. We'll have to assume that it is available.

      var hasRegular = 'far' in styles || config.autoFetchSvg;
      var shimLookups = reduce(shims, function (acc, shim) {
        var maybeNameMaybeUnicode = shim[0];
        var prefix = shim[1];
        var iconName = shim[2];

        if (prefix === 'far' && !hasRegular) {
          prefix = 'fas';
        }

        if (typeof maybeNameMaybeUnicode === 'string') {
          acc.names[maybeNameMaybeUnicode] = {
            prefix: prefix,
            iconName: iconName
          };
        }

        if (typeof maybeNameMaybeUnicode === 'number') {
          acc.unicodes[maybeNameMaybeUnicode.toString(16)] = {
            prefix: prefix,
            iconName: iconName
          };
        }

        return acc;
      }, {
        names: {},
        unicodes: {}
      });
      _byOldName = shimLookups.names;
      _byOldUnicode = shimLookups.unicodes;
      _defaultUsablePrefix = getCanonicalPrefix(config.styleDefault, {
        family: config.familyDefault
      });
    };
    onChange(function (c) {
      _defaultUsablePrefix = getCanonicalPrefix(c.styleDefault, {
        family: config.familyDefault
      });
    });
    build();
    function byUnicode(prefix, unicode) {
      return (_byUnicode[prefix] || {})[unicode];
    }
    function byLigature(prefix, ligature) {
      return (_byLigature[prefix] || {})[ligature];
    }
    function byAlias(prefix, alias) {
      return (_byAlias[prefix] || {})[alias];
    }
    function byOldName(name) {
      return _byOldName[name] || {
        prefix: null,
        iconName: null
      };
    }
    function byOldUnicode(unicode) {
      var oldUnicode = _byOldUnicode[unicode];
      var newUnicode = byUnicode('fas', unicode);
      return oldUnicode || (newUnicode ? {
        prefix: 'fas',
        iconName: newUnicode
      } : null) || {
        prefix: null,
        iconName: null
      };
    }
    function getDefaultUsablePrefix() {
      return _defaultUsablePrefix;
    }
    var emptyCanonicalIcon = function emptyCanonicalIcon() {
      return {
        prefix: null,
        iconName: null,
        rest: []
      };
    };
    function getCanonicalPrefix(styleOrPrefix) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _params$family = params.family,
          family = _params$family === void 0 ? FAMILY_CLASSIC : _params$family;
      var style = PREFIX_TO_STYLE[family][styleOrPrefix];
      var prefix = STYLE_TO_PREFIX[family][styleOrPrefix] || STYLE_TO_PREFIX[family][style];
      var defined = styleOrPrefix in namespace.styles ? styleOrPrefix : null;
      return prefix || defined || null;
    }
    var PREFIXES_FOR_FAMILY = (_PREFIXES_FOR_FAMILY = {}, _defineProperty(_PREFIXES_FOR_FAMILY, FAMILY_CLASSIC, Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC])), _defineProperty(_PREFIXES_FOR_FAMILY, FAMILY_SHARP, Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_SHARP])), _PREFIXES_FOR_FAMILY);
    function getCanonicalIcon(values) {
      var _famProps;

      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _params$skipLookups = params.skipLookups,
          skipLookups = _params$skipLookups === void 0 ? false : _params$skipLookups;
      var famProps = (_famProps = {}, _defineProperty(_famProps, FAMILY_CLASSIC, "".concat(config.cssPrefix, "-").concat(FAMILY_CLASSIC)), _defineProperty(_famProps, FAMILY_SHARP, "".concat(config.cssPrefix, "-").concat(FAMILY_SHARP)), _famProps);
      var givenPrefix = null;
      var family = FAMILY_CLASSIC;

      if (values.includes(famProps[FAMILY_CLASSIC]) || values.some(function (v) {
        return PREFIXES_FOR_FAMILY[FAMILY_CLASSIC].includes(v);
      })) {
        family = FAMILY_CLASSIC;
      }

      if (values.includes(famProps[FAMILY_SHARP]) || values.some(function (v) {
        return PREFIXES_FOR_FAMILY[FAMILY_SHARP].includes(v);
      })) {
        family = FAMILY_SHARP;
      }

      var canonical = values.reduce(function (acc, cls) {
        var iconName = getIconName(config.cssPrefix, cls);

        if (styles[cls]) {
          cls = LONG_STYLE[family].includes(cls) ? LONG_STYLE_TO_PREFIX[family][cls] : cls;
          givenPrefix = cls;
          acc.prefix = cls;
        } else if (PREFIXES[family].indexOf(cls) > -1) {
          givenPrefix = cls;
          acc.prefix = getCanonicalPrefix(cls, {
            family: family
          });
        } else if (iconName) {
          acc.iconName = iconName;
        } else if (cls !== config.replacementClass && cls !== famProps[FAMILY_CLASSIC] && cls !== famProps[FAMILY_SHARP]) {
          acc.rest.push(cls);
        }

        if (!skipLookups && acc.prefix && acc.iconName) {
          var shim = givenPrefix === 'fa' ? byOldName(acc.iconName) : {};
          var aliasIconName = byAlias(acc.prefix, acc.iconName);

          if (shim.prefix) {
            givenPrefix = null;
          }

          acc.iconName = shim.iconName || aliasIconName || acc.iconName;
          acc.prefix = shim.prefix || acc.prefix;

          if (acc.prefix === 'far' && !styles['far'] && styles['fas'] && !config.autoFetchSvg) {
            // Allow a fallback from the regular style to solid if regular is not available
            // but only if we aren't auto-fetching SVGs
            acc.prefix = 'fas';
          }
        }

        return acc;
      }, emptyCanonicalIcon());

      if (values.includes('fa-brands') || values.includes('fab')) {
        canonical.prefix = 'fab';
      }

      if (values.includes('fa-duotone') || values.includes('fad')) {
        canonical.prefix = 'fad';
      }

      if (!canonical.prefix && family === FAMILY_SHARP && (styles['fass'] || config.autoFetchSvg)) {
        canonical.prefix = 'fass';
        canonical.iconName = byAlias(canonical.prefix, canonical.iconName) || canonical.iconName;
      }

      if (canonical.prefix === 'fa' || givenPrefix === 'fa') {
        // The fa prefix is not canonical. So if it has made it through until this point
        // we will shift it to the correct prefix.
        canonical.prefix = getDefaultUsablePrefix() || 'fas';
      }

      return canonical;
    }

    var Library = /*#__PURE__*/function () {
      function Library() {
        _classCallCheck(this, Library);

        this.definitions = {};
      }

      _createClass(Library, [{
        key: "add",
        value: function add() {
          var _this = this;

          for (var _len = arguments.length, definitions = new Array(_len), _key = 0; _key < _len; _key++) {
            definitions[_key] = arguments[_key];
          }

          var additions = definitions.reduce(this._pullDefinitions, {});
          Object.keys(additions).forEach(function (key) {
            _this.definitions[key] = _objectSpread2(_objectSpread2({}, _this.definitions[key] || {}), additions[key]);
            defineIcons(key, additions[key]); // TODO can we stop doing this? We can't get the icons by 'fa-solid' any longer so this probably needs to change

            var longPrefix = PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC][key];
            if (longPrefix) defineIcons(longPrefix, additions[key]);
            build();
          });
        }
      }, {
        key: "reset",
        value: function reset() {
          this.definitions = {};
        }
      }, {
        key: "_pullDefinitions",
        value: function _pullDefinitions(additions, definition) {
          var normalized = definition.prefix && definition.iconName && definition.icon ? {
            0: definition
          } : definition;
          Object.keys(normalized).map(function (key) {
            var _normalized$key = normalized[key],
                prefix = _normalized$key.prefix,
                iconName = _normalized$key.iconName,
                icon = _normalized$key.icon;
            var aliases = icon[2];
            if (!additions[prefix]) additions[prefix] = {};

            if (aliases.length > 0) {
              aliases.forEach(function (alias) {
                if (typeof alias === 'string') {
                  additions[prefix][alias] = icon;
                }
              });
            }

            additions[prefix][iconName] = icon;
          });
          return additions;
        }
      }]);

      return Library;
    }();

    var _plugins = [];
    var _hooks = {};
    var providers = {};
    var defaultProviderKeys = Object.keys(providers);
    function registerPlugins(nextPlugins, _ref) {
      var obj = _ref.mixoutsTo;
      _plugins = nextPlugins;
      _hooks = {};
      Object.keys(providers).forEach(function (k) {
        if (defaultProviderKeys.indexOf(k) === -1) {
          delete providers[k];
        }
      });

      _plugins.forEach(function (plugin) {
        var mixout = plugin.mixout ? plugin.mixout() : {};
        Object.keys(mixout).forEach(function (tk) {
          if (typeof mixout[tk] === 'function') {
            obj[tk] = mixout[tk];
          }

          if (_typeof(mixout[tk]) === 'object') {
            Object.keys(mixout[tk]).forEach(function (sk) {
              if (!obj[tk]) {
                obj[tk] = {};
              }

              obj[tk][sk] = mixout[tk][sk];
            });
          }
        });

        if (plugin.hooks) {
          var hooks = plugin.hooks();
          Object.keys(hooks).forEach(function (hook) {
            if (!_hooks[hook]) {
              _hooks[hook] = [];
            }

            _hooks[hook].push(hooks[hook]);
          });
        }

        if (plugin.provides) {
          plugin.provides(providers);
        }
      });

      return obj;
    }
    function chainHooks(hook, accumulator) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      var hookFns = _hooks[hook] || [];
      hookFns.forEach(function (hookFn) {
        accumulator = hookFn.apply(null, [accumulator].concat(args)); // eslint-disable-line no-useless-call
      });
      return accumulator;
    }
    function callHooks(hook) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      var hookFns = _hooks[hook] || [];
      hookFns.forEach(function (hookFn) {
        hookFn.apply(null, args);
      });
      return undefined;
    }
    function callProvided() {
      var hook = arguments[0];
      var args = Array.prototype.slice.call(arguments, 1);
      return providers[hook] ? providers[hook].apply(null, args) : undefined;
    }

    function findIconDefinition(iconLookup) {
      if (iconLookup.prefix === 'fa') {
        iconLookup.prefix = 'fas';
      }

      var iconName = iconLookup.iconName;
      var prefix = iconLookup.prefix || getDefaultUsablePrefix();
      if (!iconName) return;
      iconName = byAlias(prefix, iconName) || iconName;
      return iconFromMapping(library.definitions, prefix, iconName) || iconFromMapping(namespace.styles, prefix, iconName);
    }
    var library = new Library();
    var noAuto = function noAuto() {
      config.autoReplaceSvg = false;
      config.observeMutations = false;
      callHooks('noAuto');
    };
    var dom = {
      i2svg: function i2svg() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (IS_DOM) {
          callHooks('beforeI2svg', params);
          callProvided('pseudoElements2svg', params);
          return callProvided('i2svg', params);
        } else {
          return Promise.reject('Operation requires a DOM of some kind.');
        }
      },
      watch: function watch() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var autoReplaceSvgRoot = params.autoReplaceSvgRoot;

        if (config.autoReplaceSvg === false) {
          config.autoReplaceSvg = true;
        }

        config.observeMutations = true;
        domready(function () {
          autoReplace({
            autoReplaceSvgRoot: autoReplaceSvgRoot
          });
          callHooks('watch', params);
        });
      }
    };
    var parse = {
      icon: function icon(_icon) {
        if (_icon === null) {
          return null;
        }

        if (_typeof(_icon) === 'object' && _icon.prefix && _icon.iconName) {
          return {
            prefix: _icon.prefix,
            iconName: byAlias(_icon.prefix, _icon.iconName) || _icon.iconName
          };
        }

        if (Array.isArray(_icon) && _icon.length === 2) {
          var iconName = _icon[1].indexOf('fa-') === 0 ? _icon[1].slice(3) : _icon[1];
          var prefix = getCanonicalPrefix(_icon[0]);
          return {
            prefix: prefix,
            iconName: byAlias(prefix, iconName) || iconName
          };
        }

        if (typeof _icon === 'string' && (_icon.indexOf("".concat(config.cssPrefix, "-")) > -1 || _icon.match(ICON_SELECTION_SYNTAX_PATTERN))) {
          var canonicalIcon = getCanonicalIcon(_icon.split(' '), {
            skipLookups: true
          });
          return {
            prefix: canonicalIcon.prefix || getDefaultUsablePrefix(),
            iconName: byAlias(canonicalIcon.prefix, canonicalIcon.iconName) || canonicalIcon.iconName
          };
        }

        if (typeof _icon === 'string') {
          var _prefix = getDefaultUsablePrefix();

          return {
            prefix: _prefix,
            iconName: byAlias(_prefix, _icon) || _icon
          };
        }
      }
    };
    var api = {
      noAuto: noAuto,
      config: config,
      dom: dom,
      parse: parse,
      library: library,
      findIconDefinition: findIconDefinition,
      toHtml: toHtml
    };

    var autoReplace = function autoReplace() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _params$autoReplaceSv = params.autoReplaceSvgRoot,
          autoReplaceSvgRoot = _params$autoReplaceSv === void 0 ? DOCUMENT : _params$autoReplaceSv;
      if ((Object.keys(namespace.styles).length > 0 || config.autoFetchSvg) && IS_DOM && config.autoReplaceSvg) api.dom.i2svg({
        node: autoReplaceSvgRoot
      });
    };

    function domVariants(val, abstractCreator) {
      Object.defineProperty(val, 'abstract', {
        get: abstractCreator
      });
      Object.defineProperty(val, 'html', {
        get: function get() {
          return val.abstract.map(function (a) {
            return toHtml(a);
          });
        }
      });
      Object.defineProperty(val, 'node', {
        get: function get() {
          if (!IS_DOM) return;
          var container = DOCUMENT.createElement('div');
          container.innerHTML = val.html;
          return container.children;
        }
      });
      return val;
    }

    function asIcon (_ref) {
      var children = _ref.children,
          main = _ref.main,
          mask = _ref.mask,
          attributes = _ref.attributes,
          styles = _ref.styles,
          transform = _ref.transform;

      if (transformIsMeaningful(transform) && main.found && !mask.found) {
        var width = main.width,
            height = main.height;
        var offset = {
          x: width / height / 2,
          y: 0.5
        };
        attributes['style'] = joinStyles(_objectSpread2(_objectSpread2({}, styles), {}, {
          'transform-origin': "".concat(offset.x + transform.x / 16, "em ").concat(offset.y + transform.y / 16, "em")
        }));
      }

      return [{
        tag: 'svg',
        attributes: attributes,
        children: children
      }];
    }

    function asSymbol (_ref) {
      var prefix = _ref.prefix,
          iconName = _ref.iconName,
          children = _ref.children,
          attributes = _ref.attributes,
          symbol = _ref.symbol;
      var id = symbol === true ? "".concat(prefix, "-").concat(config.cssPrefix, "-").concat(iconName) : symbol;
      return [{
        tag: 'svg',
        attributes: {
          style: 'display: none;'
        },
        children: [{
          tag: 'symbol',
          attributes: _objectSpread2(_objectSpread2({}, attributes), {}, {
            id: id
          }),
          children: children
        }]
      }];
    }

    function makeInlineSvgAbstract(params) {
      var _params$icons = params.icons,
          main = _params$icons.main,
          mask = _params$icons.mask,
          prefix = params.prefix,
          iconName = params.iconName,
          transform = params.transform,
          symbol = params.symbol,
          title = params.title,
          maskId = params.maskId,
          titleId = params.titleId,
          extra = params.extra,
          _params$watchable = params.watchable,
          watchable = _params$watchable === void 0 ? false : _params$watchable;

      var _ref = mask.found ? mask : main,
          width = _ref.width,
          height = _ref.height;

      var isUploadedIcon = prefix === 'fak';
      var attrClass = [config.replacementClass, iconName ? "".concat(config.cssPrefix, "-").concat(iconName) : ''].filter(function (c) {
        return extra.classes.indexOf(c) === -1;
      }).filter(function (c) {
        return c !== '' || !!c;
      }).concat(extra.classes).join(' ');
      var content = {
        children: [],
        attributes: _objectSpread2(_objectSpread2({}, extra.attributes), {}, {
          'data-prefix': prefix,
          'data-icon': iconName,
          'class': attrClass,
          'role': extra.attributes.role || 'img',
          'xmlns': 'http://www.w3.org/2000/svg',
          'viewBox': "0 0 ".concat(width, " ").concat(height)
        })
      };
      var uploadedIconWidthStyle = isUploadedIcon && !~extra.classes.indexOf('fa-fw') ? {
        width: "".concat(width / height * 16 * 0.0625, "em")
      } : {};

      if (watchable) {
        content.attributes[DATA_FA_I2SVG] = '';
      }

      if (title) {
        content.children.push({
          tag: 'title',
          attributes: {
            id: content.attributes['aria-labelledby'] || "title-".concat(titleId || nextUniqueId())
          },
          children: [title]
        });
        delete content.attributes.title;
      }

      var args = _objectSpread2(_objectSpread2({}, content), {}, {
        prefix: prefix,
        iconName: iconName,
        main: main,
        mask: mask,
        maskId: maskId,
        transform: transform,
        symbol: symbol,
        styles: _objectSpread2(_objectSpread2({}, uploadedIconWidthStyle), extra.styles)
      });

      var _ref2 = mask.found && main.found ? callProvided('generateAbstractMask', args) || {
        children: [],
        attributes: {}
      } : callProvided('generateAbstractIcon', args) || {
        children: [],
        attributes: {}
      },
          children = _ref2.children,
          attributes = _ref2.attributes;

      args.children = children;
      args.attributes = attributes;

      if (symbol) {
        return asSymbol(args);
      } else {
        return asIcon(args);
      }
    }
    function makeLayersTextAbstract(params) {
      var content = params.content,
          width = params.width,
          height = params.height,
          transform = params.transform,
          title = params.title,
          extra = params.extra,
          _params$watchable2 = params.watchable,
          watchable = _params$watchable2 === void 0 ? false : _params$watchable2;

      var attributes = _objectSpread2(_objectSpread2(_objectSpread2({}, extra.attributes), title ? {
        'title': title
      } : {}), {}, {
        'class': extra.classes.join(' ')
      });

      if (watchable) {
        attributes[DATA_FA_I2SVG] = '';
      }

      var styles = _objectSpread2({}, extra.styles);

      if (transformIsMeaningful(transform)) {
        styles['transform'] = transformForCss({
          transform: transform,
          startCentered: true,
          width: width,
          height: height
        });
        styles['-webkit-transform'] = styles['transform'];
      }

      var styleString = joinStyles(styles);

      if (styleString.length > 0) {
        attributes['style'] = styleString;
      }

      var val = [];
      val.push({
        tag: 'span',
        attributes: attributes,
        children: [content]
      });

      if (title) {
        val.push({
          tag: 'span',
          attributes: {
            class: 'sr-only'
          },
          children: [title]
        });
      }

      return val;
    }
    function makeLayersCounterAbstract(params) {
      var content = params.content,
          title = params.title,
          extra = params.extra;

      var attributes = _objectSpread2(_objectSpread2(_objectSpread2({}, extra.attributes), title ? {
        'title': title
      } : {}), {}, {
        'class': extra.classes.join(' ')
      });

      var styleString = joinStyles(extra.styles);

      if (styleString.length > 0) {
        attributes['style'] = styleString;
      }

      var val = [];
      val.push({
        tag: 'span',
        attributes: attributes,
        children: [content]
      });

      if (title) {
        val.push({
          tag: 'span',
          attributes: {
            class: 'sr-only'
          },
          children: [title]
        });
      }

      return val;
    }

    var styles$1 = namespace.styles;
    function asFoundIcon(icon) {
      var width = icon[0];
      var height = icon[1];

      var _icon$slice = icon.slice(4),
          _icon$slice2 = _slicedToArray(_icon$slice, 1),
          vectorData = _icon$slice2[0];

      var element = null;

      if (Array.isArray(vectorData)) {
        element = {
          tag: 'g',
          attributes: {
            class: "".concat(config.cssPrefix, "-").concat(DUOTONE_CLASSES.GROUP)
          },
          children: [{
            tag: 'path',
            attributes: {
              class: "".concat(config.cssPrefix, "-").concat(DUOTONE_CLASSES.SECONDARY),
              fill: 'currentColor',
              d: vectorData[0]
            }
          }, {
            tag: 'path',
            attributes: {
              class: "".concat(config.cssPrefix, "-").concat(DUOTONE_CLASSES.PRIMARY),
              fill: 'currentColor',
              d: vectorData[1]
            }
          }]
        };
      } else {
        element = {
          tag: 'path',
          attributes: {
            fill: 'currentColor',
            d: vectorData
          }
        };
      }

      return {
        found: true,
        width: width,
        height: height,
        icon: element
      };
    }
    var missingIconResolutionMixin = {
      found: false,
      width: 512,
      height: 512
    };

    function maybeNotifyMissing(iconName, prefix) {
      if (!PRODUCTION$1 && !config.showMissingIcons && iconName) {
        console.error("Icon with name \"".concat(iconName, "\" and prefix \"").concat(prefix, "\" is missing."));
      }
    }

    function findIcon(iconName, prefix) {
      var givenPrefix = prefix;

      if (prefix === 'fa' && config.styleDefault !== null) {
        prefix = getDefaultUsablePrefix();
      }

      return new Promise(function (resolve, reject) {
        ({
          found: false,
          width: 512,
          height: 512,
          icon: callProvided('missingIconAbstract') || {}
        });

        if (givenPrefix === 'fa') {
          var shim = byOldName(iconName) || {};
          iconName = shim.iconName || iconName;
          prefix = shim.prefix || prefix;
        }

        if (iconName && prefix && styles$1[prefix] && styles$1[prefix][iconName]) {
          var icon = styles$1[prefix][iconName];
          return resolve(asFoundIcon(icon));
        }

        maybeNotifyMissing(iconName, prefix);
        resolve(_objectSpread2(_objectSpread2({}, missingIconResolutionMixin), {}, {
          icon: config.showMissingIcons && iconName ? callProvided('missingIconAbstract') || {} : {}
        }));
      });
    }

    var noop$1 = function noop() {};

    var p = config.measurePerformance && PERFORMANCE && PERFORMANCE.mark && PERFORMANCE.measure ? PERFORMANCE : {
      mark: noop$1,
      measure: noop$1
    };
    var preamble = "FA \"6.5.1\"";

    var begin = function begin(name) {
      p.mark("".concat(preamble, " ").concat(name, " begins"));
      return function () {
        return end(name);
      };
    };

    var end = function end(name) {
      p.mark("".concat(preamble, " ").concat(name, " ends"));
      p.measure("".concat(preamble, " ").concat(name), "".concat(preamble, " ").concat(name, " begins"), "".concat(preamble, " ").concat(name, " ends"));
    };

    var perf = {
      begin: begin,
      end: end
    };

    var noop$2 = function noop() {};

    function isWatched(node) {
      var i2svg = node.getAttribute ? node.getAttribute(DATA_FA_I2SVG) : null;
      return typeof i2svg === 'string';
    }

    function hasPrefixAndIcon(node) {
      var prefix = node.getAttribute ? node.getAttribute(DATA_PREFIX) : null;
      var icon = node.getAttribute ? node.getAttribute(DATA_ICON) : null;
      return prefix && icon;
    }

    function hasBeenReplaced(node) {
      return node && node.classList && node.classList.contains && node.classList.contains(config.replacementClass);
    }

    function getMutator() {
      if (config.autoReplaceSvg === true) {
        return mutators.replace;
      }

      var mutator = mutators[config.autoReplaceSvg];
      return mutator || mutators.replace;
    }

    function createElementNS(tag) {
      return DOCUMENT.createElementNS('http://www.w3.org/2000/svg', tag);
    }

    function createElement(tag) {
      return DOCUMENT.createElement(tag);
    }

    function convertSVG(abstractObj) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _params$ceFn = params.ceFn,
          ceFn = _params$ceFn === void 0 ? abstractObj.tag === 'svg' ? createElementNS : createElement : _params$ceFn;

      if (typeof abstractObj === 'string') {
        return DOCUMENT.createTextNode(abstractObj);
      }

      var tag = ceFn(abstractObj.tag);
      Object.keys(abstractObj.attributes || []).forEach(function (key) {
        tag.setAttribute(key, abstractObj.attributes[key]);
      });
      var children = abstractObj.children || [];
      children.forEach(function (child) {
        tag.appendChild(convertSVG(child, {
          ceFn: ceFn
        }));
      });
      return tag;
    }

    function nodeAsComment(node) {
      var comment = " ".concat(node.outerHTML, " ");
      /* BEGIN.ATTRIBUTION */

      comment = "".concat(comment, "Font Awesome fontawesome.com ");
      /* END.ATTRIBUTION */

      return comment;
    }

    var mutators = {
      replace: function replace(mutation) {
        var node = mutation[0];

        if (node.parentNode) {
          mutation[1].forEach(function (_abstract) {
            node.parentNode.insertBefore(convertSVG(_abstract), node);
          });

          if (node.getAttribute(DATA_FA_I2SVG) === null && config.keepOriginalSource) {
            var comment = DOCUMENT.createComment(nodeAsComment(node));
            node.parentNode.replaceChild(comment, node);
          } else {
            node.remove();
          }
        }
      },
      nest: function nest(mutation) {
        var node = mutation[0];
        var _abstract2 = mutation[1]; // If we already have a replaced node we do not want to continue nesting within it.
        // Short-circuit to the standard replacement

        if (~classArray(node).indexOf(config.replacementClass)) {
          return mutators.replace(mutation);
        }

        var forSvg = new RegExp("".concat(config.cssPrefix, "-.*"));
        delete _abstract2[0].attributes.id;

        if (_abstract2[0].attributes.class) {
          var splitClasses = _abstract2[0].attributes.class.split(' ').reduce(function (acc, cls) {
            if (cls === config.replacementClass || cls.match(forSvg)) {
              acc.toSvg.push(cls);
            } else {
              acc.toNode.push(cls);
            }

            return acc;
          }, {
            toNode: [],
            toSvg: []
          });

          _abstract2[0].attributes.class = splitClasses.toSvg.join(' ');

          if (splitClasses.toNode.length === 0) {
            node.removeAttribute('class');
          } else {
            node.setAttribute('class', splitClasses.toNode.join(' '));
          }
        }

        var newInnerHTML = _abstract2.map(function (a) {
          return toHtml(a);
        }).join('\n');

        node.setAttribute(DATA_FA_I2SVG, '');
        node.innerHTML = newInnerHTML;
      }
    };

    function performOperationSync(op) {
      op();
    }

    function perform(mutations, callback) {
      var callbackFunction = typeof callback === 'function' ? callback : noop$2;

      if (mutations.length === 0) {
        callbackFunction();
      } else {
        var frame = performOperationSync;

        if (config.mutateApproach === MUTATION_APPROACH_ASYNC) {
          frame = WINDOW.requestAnimationFrame || performOperationSync;
        }

        frame(function () {
          var mutator = getMutator();
          var mark = perf.begin('mutate');
          mutations.map(mutator);
          mark();
          callbackFunction();
        });
      }
    }
    var disabled = false;
    function disableObservation() {
      disabled = true;
    }
    function enableObservation() {
      disabled = false;
    }
    var mo = null;
    function observe(options) {
      if (!MUTATION_OBSERVER) {
        return;
      }

      if (!config.observeMutations) {
        return;
      }

      var _options$treeCallback = options.treeCallback,
          treeCallback = _options$treeCallback === void 0 ? noop$2 : _options$treeCallback,
          _options$nodeCallback = options.nodeCallback,
          nodeCallback = _options$nodeCallback === void 0 ? noop$2 : _options$nodeCallback,
          _options$pseudoElemen = options.pseudoElementsCallback,
          pseudoElementsCallback = _options$pseudoElemen === void 0 ? noop$2 : _options$pseudoElemen,
          _options$observeMutat = options.observeMutationsRoot,
          observeMutationsRoot = _options$observeMutat === void 0 ? DOCUMENT : _options$observeMutat;
      mo = new MUTATION_OBSERVER(function (objects) {
        if (disabled) return;
        var defaultPrefix = getDefaultUsablePrefix();
        toArray(objects).forEach(function (mutationRecord) {
          if (mutationRecord.type === 'childList' && mutationRecord.addedNodes.length > 0 && !isWatched(mutationRecord.addedNodes[0])) {
            if (config.searchPseudoElements) {
              pseudoElementsCallback(mutationRecord.target);
            }

            treeCallback(mutationRecord.target);
          }

          if (mutationRecord.type === 'attributes' && mutationRecord.target.parentNode && config.searchPseudoElements) {
            pseudoElementsCallback(mutationRecord.target.parentNode);
          }

          if (mutationRecord.type === 'attributes' && isWatched(mutationRecord.target) && ~ATTRIBUTES_WATCHED_FOR_MUTATION.indexOf(mutationRecord.attributeName)) {
            if (mutationRecord.attributeName === 'class' && hasPrefixAndIcon(mutationRecord.target)) {
              var _getCanonicalIcon = getCanonicalIcon(classArray(mutationRecord.target)),
                  prefix = _getCanonicalIcon.prefix,
                  iconName = _getCanonicalIcon.iconName;

              mutationRecord.target.setAttribute(DATA_PREFIX, prefix || defaultPrefix);
              if (iconName) mutationRecord.target.setAttribute(DATA_ICON, iconName);
            } else if (hasBeenReplaced(mutationRecord.target)) {
              nodeCallback(mutationRecord.target);
            }
          }
        });
      });
      if (!IS_DOM) return;
      mo.observe(observeMutationsRoot, {
        childList: true,
        attributes: true,
        characterData: true,
        subtree: true
      });
    }
    function disconnect() {
      if (!mo) return;
      mo.disconnect();
    }

    function styleParser (node) {
      var style = node.getAttribute('style');
      var val = [];

      if (style) {
        val = style.split(';').reduce(function (acc, style) {
          var styles = style.split(':');
          var prop = styles[0];
          var value = styles.slice(1);

          if (prop && value.length > 0) {
            acc[prop] = value.join(':').trim();
          }

          return acc;
        }, {});
      }

      return val;
    }

    function classParser (node) {
      var existingPrefix = node.getAttribute('data-prefix');
      var existingIconName = node.getAttribute('data-icon');
      var innerText = node.innerText !== undefined ? node.innerText.trim() : '';
      var val = getCanonicalIcon(classArray(node));

      if (!val.prefix) {
        val.prefix = getDefaultUsablePrefix();
      }

      if (existingPrefix && existingIconName) {
        val.prefix = existingPrefix;
        val.iconName = existingIconName;
      }

      if (val.iconName && val.prefix) {
        return val;
      }

      if (val.prefix && innerText.length > 0) {
        val.iconName = byLigature(val.prefix, node.innerText) || byUnicode(val.prefix, toHex(node.innerText));
      }

      if (!val.iconName && config.autoFetchSvg && node.firstChild && node.firstChild.nodeType === Node.TEXT_NODE) {
        val.iconName = node.firstChild.data;
      }

      return val;
    }

    function attributesParser (node) {
      var extraAttributes = toArray(node.attributes).reduce(function (acc, attr) {
        if (acc.name !== 'class' && acc.name !== 'style') {
          acc[attr.name] = attr.value;
        }

        return acc;
      }, {});
      var title = node.getAttribute('title');
      var titleId = node.getAttribute('data-fa-title-id');

      if (config.autoA11y) {
        if (title) {
          extraAttributes['aria-labelledby'] = "".concat(config.replacementClass, "-title-").concat(titleId || nextUniqueId());
        } else {
          extraAttributes['aria-hidden'] = 'true';
          extraAttributes['focusable'] = 'false';
        }
      }

      return extraAttributes;
    }

    function blankMeta() {
      return {
        iconName: null,
        title: null,
        titleId: null,
        prefix: null,
        transform: meaninglessTransform,
        symbol: false,
        mask: {
          iconName: null,
          prefix: null,
          rest: []
        },
        maskId: null,
        extra: {
          classes: [],
          styles: {},
          attributes: {}
        }
      };
    }
    function parseMeta(node) {
      var parser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
        styleParser: true
      };

      var _classParser = classParser(node),
          iconName = _classParser.iconName,
          prefix = _classParser.prefix,
          extraClasses = _classParser.rest;

      var extraAttributes = attributesParser(node);
      var pluginMeta = chainHooks('parseNodeAttributes', {}, node);
      var extraStyles = parser.styleParser ? styleParser(node) : [];
      return _objectSpread2({
        iconName: iconName,
        title: node.getAttribute('title'),
        titleId: node.getAttribute('data-fa-title-id'),
        prefix: prefix,
        transform: meaninglessTransform,
        mask: {
          iconName: null,
          prefix: null,
          rest: []
        },
        maskId: null,
        symbol: false,
        extra: {
          classes: extraClasses,
          styles: extraStyles,
          attributes: extraAttributes
        }
      }, pluginMeta);
    }

    var styles$2 = namespace.styles;

    function generateMutation(node) {
      var nodeMeta = config.autoReplaceSvg === 'nest' ? parseMeta(node, {
        styleParser: false
      }) : parseMeta(node);

      if (~nodeMeta.extra.classes.indexOf(LAYERS_TEXT_CLASSNAME)) {
        return callProvided('generateLayersText', node, nodeMeta);
      } else {
        return callProvided('generateSvgReplacementMutation', node, nodeMeta);
      }
    }

    var knownPrefixes = new Set();
    FAMILIES.map(function (family) {
      knownPrefixes.add("fa-".concat(family));
    });
    Object.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC]).map(knownPrefixes.add.bind(knownPrefixes));
    Object.keys(PREFIX_TO_STYLE[FAMILY_SHARP]).map(knownPrefixes.add.bind(knownPrefixes));
    knownPrefixes = _toConsumableArray(knownPrefixes);

    function onTree(root) {
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (!IS_DOM) return Promise.resolve();
      var htmlClassList = DOCUMENT.documentElement.classList;

      var hclAdd = function hclAdd(suffix) {
        return htmlClassList.add("".concat(HTML_CLASS_I2SVG_BASE_CLASS, "-").concat(suffix));
      };

      var hclRemove = function hclRemove(suffix) {
        return htmlClassList.remove("".concat(HTML_CLASS_I2SVG_BASE_CLASS, "-").concat(suffix));
      };

      var prefixes = config.autoFetchSvg ? knownPrefixes : FAMILIES.map(function (f) {
        return "fa-".concat(f);
      }).concat(Object.keys(styles$2));

      if (!prefixes.includes('fa')) {
        prefixes.push('fa');
      }

      var prefixesDomQuery = [".".concat(LAYERS_TEXT_CLASSNAME, ":not([").concat(DATA_FA_I2SVG, "])")].concat(prefixes.map(function (p) {
        return ".".concat(p, ":not([").concat(DATA_FA_I2SVG, "])");
      })).join(', ');

      if (prefixesDomQuery.length === 0) {
        return Promise.resolve();
      }

      var candidates = [];

      try {
        candidates = toArray(root.querySelectorAll(prefixesDomQuery));
      } catch (e) {// noop
      }

      if (candidates.length > 0) {
        hclAdd('pending');
        hclRemove('complete');
      } else {
        return Promise.resolve();
      }

      var mark = perf.begin('onTree');
      var mutations = candidates.reduce(function (acc, node) {
        try {
          var mutation = generateMutation(node);

          if (mutation) {
            acc.push(mutation);
          }
        } catch (e) {
          if (!PRODUCTION$1) {
            if (e.name === 'MissingIcon') {
              console.error(e);
            }
          }
        }

        return acc;
      }, []);
      return new Promise(function (resolve, reject) {
        Promise.all(mutations).then(function (resolvedMutations) {
          perform(resolvedMutations, function () {
            hclAdd('active');
            hclAdd('complete');
            hclRemove('pending');
            if (typeof callback === 'function') callback();
            mark();
            resolve();
          });
        }).catch(function (e) {
          mark();
          reject(e);
        });
      });
    }

    function onNode(node) {
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      generateMutation(node).then(function (mutation) {
        if (mutation) {
          perform([mutation], callback);
        }
      });
    }

    function resolveIcons(next) {
      return function (maybeIconDefinition) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var iconDefinition = (maybeIconDefinition || {}).icon ? maybeIconDefinition : findIconDefinition(maybeIconDefinition || {});
        var mask = params.mask;

        if (mask) {
          mask = (mask || {}).icon ? mask : findIconDefinition(mask || {});
        }

        return next(iconDefinition, _objectSpread2(_objectSpread2({}, params), {}, {
          mask: mask
        }));
      };
    }

    var render = function render(iconDefinition) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _params$transform = params.transform,
          transform = _params$transform === void 0 ? meaninglessTransform : _params$transform,
          _params$symbol = params.symbol,
          symbol = _params$symbol === void 0 ? false : _params$symbol,
          _params$mask = params.mask,
          mask = _params$mask === void 0 ? null : _params$mask,
          _params$maskId = params.maskId,
          maskId = _params$maskId === void 0 ? null : _params$maskId,
          _params$title = params.title,
          title = _params$title === void 0 ? null : _params$title,
          _params$titleId = params.titleId,
          titleId = _params$titleId === void 0 ? null : _params$titleId,
          _params$classes = params.classes,
          classes = _params$classes === void 0 ? [] : _params$classes,
          _params$attributes = params.attributes,
          attributes = _params$attributes === void 0 ? {} : _params$attributes,
          _params$styles = params.styles,
          styles = _params$styles === void 0 ? {} : _params$styles;
      if (!iconDefinition) return;
      var prefix = iconDefinition.prefix,
          iconName = iconDefinition.iconName,
          icon = iconDefinition.icon;
      return domVariants(_objectSpread2({
        type: 'icon'
      }, iconDefinition), function () {
        callHooks('beforeDOMElementCreation', {
          iconDefinition: iconDefinition,
          params: params
        });

        if (config.autoA11y) {
          if (title) {
            attributes['aria-labelledby'] = "".concat(config.replacementClass, "-title-").concat(titleId || nextUniqueId());
          } else {
            attributes['aria-hidden'] = 'true';
            attributes['focusable'] = 'false';
          }
        }

        return makeInlineSvgAbstract({
          icons: {
            main: asFoundIcon(icon),
            mask: mask ? asFoundIcon(mask.icon) : {
              found: false,
              width: null,
              height: null,
              icon: {}
            }
          },
          prefix: prefix,
          iconName: iconName,
          transform: _objectSpread2(_objectSpread2({}, meaninglessTransform), transform),
          symbol: symbol,
          title: title,
          maskId: maskId,
          titleId: titleId,
          extra: {
            attributes: attributes,
            styles: styles,
            classes: classes
          }
        });
      });
    };
    var ReplaceElements = {
      mixout: function mixout() {
        return {
          icon: resolveIcons(render)
        };
      },
      hooks: function hooks() {
        return {
          mutationObserverCallbacks: function mutationObserverCallbacks(accumulator) {
            accumulator.treeCallback = onTree;
            accumulator.nodeCallback = onNode;
            return accumulator;
          }
        };
      },
      provides: function provides(providers$$1) {
        providers$$1.i2svg = function (params) {
          var _params$node = params.node,
              node = _params$node === void 0 ? DOCUMENT : _params$node,
              _params$callback = params.callback,
              callback = _params$callback === void 0 ? function () {} : _params$callback;
          return onTree(node, callback);
        };

        providers$$1.generateSvgReplacementMutation = function (node, nodeMeta) {
          var iconName = nodeMeta.iconName,
              title = nodeMeta.title,
              titleId = nodeMeta.titleId,
              prefix = nodeMeta.prefix,
              transform = nodeMeta.transform,
              symbol = nodeMeta.symbol,
              mask = nodeMeta.mask,
              maskId = nodeMeta.maskId,
              extra = nodeMeta.extra;
          return new Promise(function (resolve, reject) {
            Promise.all([findIcon(iconName, prefix), mask.iconName ? findIcon(mask.iconName, mask.prefix) : Promise.resolve({
              found: false,
              width: 512,
              height: 512,
              icon: {}
            })]).then(function (_ref) {
              var _ref2 = _slicedToArray(_ref, 2),
                  main = _ref2[0],
                  mask = _ref2[1];

              resolve([node, makeInlineSvgAbstract({
                icons: {
                  main: main,
                  mask: mask
                },
                prefix: prefix,
                iconName: iconName,
                transform: transform,
                symbol: symbol,
                maskId: maskId,
                title: title,
                titleId: titleId,
                extra: extra,
                watchable: true
              })]);
            }).catch(reject);
          });
        };

        providers$$1.generateAbstractIcon = function (_ref3) {
          var children = _ref3.children,
              attributes = _ref3.attributes,
              main = _ref3.main,
              transform = _ref3.transform,
              styles = _ref3.styles;
          var styleString = joinStyles(styles);

          if (styleString.length > 0) {
            attributes['style'] = styleString;
          }

          var nextChild;

          if (transformIsMeaningful(transform)) {
            nextChild = callProvided('generateAbstractTransformGrouping', {
              main: main,
              transform: transform,
              containerWidth: main.width,
              iconWidth: main.width
            });
          }

          children.push(nextChild || main.icon);
          return {
            children: children,
            attributes: attributes
          };
        };
      }
    };

    var Layers = {
      mixout: function mixout() {
        return {
          layer: function layer(assembler) {
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var _params$classes = params.classes,
                classes = _params$classes === void 0 ? [] : _params$classes;
            return domVariants({
              type: 'layer'
            }, function () {
              callHooks('beforeDOMElementCreation', {
                assembler: assembler,
                params: params
              });
              var children = [];
              assembler(function (args) {
                Array.isArray(args) ? args.map(function (a) {
                  children = children.concat(a.abstract);
                }) : children = children.concat(args.abstract);
              });
              return [{
                tag: 'span',
                attributes: {
                  class: ["".concat(config.cssPrefix, "-layers")].concat(_toConsumableArray(classes)).join(' ')
                },
                children: children
              }];
            });
          }
        };
      }
    };

    var LayersCounter = {
      mixout: function mixout() {
        return {
          counter: function counter(content) {
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var _params$title = params.title,
                title = _params$title === void 0 ? null : _params$title,
                _params$classes = params.classes,
                classes = _params$classes === void 0 ? [] : _params$classes,
                _params$attributes = params.attributes,
                attributes = _params$attributes === void 0 ? {} : _params$attributes,
                _params$styles = params.styles,
                styles = _params$styles === void 0 ? {} : _params$styles;
            return domVariants({
              type: 'counter',
              content: content
            }, function () {
              callHooks('beforeDOMElementCreation', {
                content: content,
                params: params
              });
              return makeLayersCounterAbstract({
                content: content.toString(),
                title: title,
                extra: {
                  attributes: attributes,
                  styles: styles,
                  classes: ["".concat(config.cssPrefix, "-layers-counter")].concat(_toConsumableArray(classes))
                }
              });
            });
          }
        };
      }
    };

    var LayersText = {
      mixout: function mixout() {
        return {
          text: function text(content) {
            var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var _params$transform = params.transform,
                transform = _params$transform === void 0 ? meaninglessTransform : _params$transform,
                _params$title = params.title,
                title = _params$title === void 0 ? null : _params$title,
                _params$classes = params.classes,
                classes = _params$classes === void 0 ? [] : _params$classes,
                _params$attributes = params.attributes,
                attributes = _params$attributes === void 0 ? {} : _params$attributes,
                _params$styles = params.styles,
                styles = _params$styles === void 0 ? {} : _params$styles;
            return domVariants({
              type: 'text',
              content: content
            }, function () {
              callHooks('beforeDOMElementCreation', {
                content: content,
                params: params
              });
              return makeLayersTextAbstract({
                content: content,
                transform: _objectSpread2(_objectSpread2({}, meaninglessTransform), transform),
                title: title,
                extra: {
                  attributes: attributes,
                  styles: styles,
                  classes: ["".concat(config.cssPrefix, "-layers-text")].concat(_toConsumableArray(classes))
                }
              });
            });
          }
        };
      },
      provides: function provides(providers$$1) {
        providers$$1.generateLayersText = function (node, nodeMeta) {
          var title = nodeMeta.title,
              transform = nodeMeta.transform,
              extra = nodeMeta.extra;
          var width = null;
          var height = null;

          if (IS_IE) {
            var computedFontSize = parseInt(getComputedStyle(node).fontSize, 10);
            var boundingClientRect = node.getBoundingClientRect();
            width = boundingClientRect.width / computedFontSize;
            height = boundingClientRect.height / computedFontSize;
          }

          if (config.autoA11y && !title) {
            extra.attributes['aria-hidden'] = 'true';
          }

          return Promise.resolve([node, makeLayersTextAbstract({
            content: node.innerHTML,
            width: width,
            height: height,
            transform: transform,
            title: title,
            extra: extra,
            watchable: true
          })]);
        };
      }
    };

    var CLEAN_CONTENT_PATTERN = new RegExp("\"", 'ug');
    var SECONDARY_UNICODE_RANGE = [1105920, 1112319];
    function hexValueFromContent(content) {
      var cleaned = content.replace(CLEAN_CONTENT_PATTERN, '');
      var codePoint = codePointAt(cleaned, 0);
      var isPrependTen = codePoint >= SECONDARY_UNICODE_RANGE[0] && codePoint <= SECONDARY_UNICODE_RANGE[1];
      var isDoubled = cleaned.length === 2 ? cleaned[0] === cleaned[1] : false;
      return {
        value: isDoubled ? toHex(cleaned[0]) : toHex(cleaned),
        isSecondary: isPrependTen || isDoubled
      };
    }

    function replaceForPosition(node, position) {
      var pendingAttribute = "".concat(DATA_FA_PSEUDO_ELEMENT_PENDING).concat(position.replace(':', '-'));
      return new Promise(function (resolve, reject) {
        if (node.getAttribute(pendingAttribute) !== null) {
          // This node is already being processed
          return resolve();
        }

        var children = toArray(node.children);
        var alreadyProcessedPseudoElement = children.filter(function (c) {
          return c.getAttribute(DATA_FA_PSEUDO_ELEMENT) === position;
        })[0];
        var styles = WINDOW.getComputedStyle(node, position);
        var fontFamily = styles.getPropertyValue('font-family').match(FONT_FAMILY_PATTERN);
        var fontWeight = styles.getPropertyValue('font-weight');
        var content = styles.getPropertyValue('content');

        if (alreadyProcessedPseudoElement && !fontFamily) {
          // If we've already processed it but the current computed style does not result in a font-family,
          // that probably means that a class name that was previously present to make the icon has been
          // removed. So we now should delete the icon.
          node.removeChild(alreadyProcessedPseudoElement);
          return resolve();
        } else if (fontFamily && content !== 'none' && content !== '') {
          var _content = styles.getPropertyValue('content');

          var family = ~['Sharp'].indexOf(fontFamily[2]) ? FAMILY_SHARP : FAMILY_CLASSIC;
          var prefix = ~['Solid', 'Regular', 'Light', 'Thin', 'Duotone', 'Brands', 'Kit'].indexOf(fontFamily[2]) ? STYLE_TO_PREFIX[family][fontFamily[2].toLowerCase()] : FONT_WEIGHT_TO_PREFIX[family][fontWeight];

          var _hexValueFromContent = hexValueFromContent(_content),
              hexValue = _hexValueFromContent.value,
              isSecondary = _hexValueFromContent.isSecondary;

          var isV4 = fontFamily[0].startsWith('FontAwesome');
          var iconName = byUnicode(prefix, hexValue);
          var iconIdentifier = iconName;

          if (isV4) {
            var iconName4 = byOldUnicode(hexValue);

            if (iconName4.iconName && iconName4.prefix) {
              iconName = iconName4.iconName;
              prefix = iconName4.prefix;
            }
          } // Only convert the pseudo element in this ::before/::after position into an icon if we haven't
          // already done so with the same prefix and iconName


          if (iconName && !isSecondary && (!alreadyProcessedPseudoElement || alreadyProcessedPseudoElement.getAttribute(DATA_PREFIX) !== prefix || alreadyProcessedPseudoElement.getAttribute(DATA_ICON) !== iconIdentifier)) {
            node.setAttribute(pendingAttribute, iconIdentifier);

            if (alreadyProcessedPseudoElement) {
              // Delete the old one, since we're replacing it with a new one
              node.removeChild(alreadyProcessedPseudoElement);
            }

            var meta = blankMeta();
            var extra = meta.extra;
            extra.attributes[DATA_FA_PSEUDO_ELEMENT] = position;
            findIcon(iconName, prefix).then(function (main) {
              var _abstract = makeInlineSvgAbstract(_objectSpread2(_objectSpread2({}, meta), {}, {
                icons: {
                  main: main,
                  mask: emptyCanonicalIcon()
                },
                prefix: prefix,
                iconName: iconIdentifier,
                extra: extra,
                watchable: true
              }));

              var element = DOCUMENT.createElementNS('http://www.w3.org/2000/svg', 'svg');

              if (position === '::before') {
                node.insertBefore(element, node.firstChild);
              } else {
                node.appendChild(element);
              }

              element.outerHTML = _abstract.map(function (a) {
                return toHtml(a);
              }).join('\n');
              node.removeAttribute(pendingAttribute);
              resolve();
            }).catch(reject);
          } else {
            resolve();
          }
        } else {
          resolve();
        }
      });
    }

    function replace(node) {
      return Promise.all([replaceForPosition(node, '::before'), replaceForPosition(node, '::after')]);
    }

    function processable(node) {
      return node.parentNode !== document.head && !~TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS.indexOf(node.tagName.toUpperCase()) && !node.getAttribute(DATA_FA_PSEUDO_ELEMENT) && (!node.parentNode || node.parentNode.tagName !== 'svg');
    }

    function searchPseudoElements(root) {
      if (!IS_DOM) return;
      return new Promise(function (resolve, reject) {
        var operations = toArray(root.querySelectorAll('*')).filter(processable).map(replace);
        var end = perf.begin('searchPseudoElements');
        disableObservation();
        Promise.all(operations).then(function () {
          end();
          enableObservation();
          resolve();
        }).catch(function () {
          end();
          enableObservation();
          reject();
        });
      });
    }

    var PseudoElements = {
      hooks: function hooks() {
        return {
          mutationObserverCallbacks: function mutationObserverCallbacks(accumulator) {
            accumulator.pseudoElementsCallback = searchPseudoElements;
            return accumulator;
          }
        };
      },
      provides: function provides(providers$$1) {
        providers$$1.pseudoElements2svg = function (params) {
          var _params$node = params.node,
              node = _params$node === void 0 ? DOCUMENT : _params$node;

          if (config.searchPseudoElements) {
            searchPseudoElements(node);
          }
        };
      }
    };

    var _unwatched = false;
    var MutationObserver$1 = {
      mixout: function mixout() {
        return {
          dom: {
            unwatch: function unwatch() {
              disableObservation();
              _unwatched = true;
            }
          }
        };
      },
      hooks: function hooks() {
        return {
          bootstrap: function bootstrap() {
            observe(chainHooks('mutationObserverCallbacks', {}));
          },
          noAuto: function noAuto() {
            disconnect();
          },
          watch: function watch(params) {
            var observeMutationsRoot = params.observeMutationsRoot;

            if (_unwatched) {
              enableObservation();
            } else {
              observe(chainHooks('mutationObserverCallbacks', {
                observeMutationsRoot: observeMutationsRoot
              }));
            }
          }
        };
      }
    };

    var parseTransformString = function parseTransformString(transformString) {
      var transform = {
        size: 16,
        x: 0,
        y: 0,
        flipX: false,
        flipY: false,
        rotate: 0
      };
      return transformString.toLowerCase().split(' ').reduce(function (acc, n) {
        var parts = n.toLowerCase().split('-');
        var first = parts[0];
        var rest = parts.slice(1).join('-');

        if (first && rest === 'h') {
          acc.flipX = true;
          return acc;
        }

        if (first && rest === 'v') {
          acc.flipY = true;
          return acc;
        }

        rest = parseFloat(rest);

        if (isNaN(rest)) {
          return acc;
        }

        switch (first) {
          case 'grow':
            acc.size = acc.size + rest;
            break;

          case 'shrink':
            acc.size = acc.size - rest;
            break;

          case 'left':
            acc.x = acc.x - rest;
            break;

          case 'right':
            acc.x = acc.x + rest;
            break;

          case 'up':
            acc.y = acc.y - rest;
            break;

          case 'down':
            acc.y = acc.y + rest;
            break;

          case 'rotate':
            acc.rotate = acc.rotate + rest;
            break;
        }

        return acc;
      }, transform);
    };
    var PowerTransforms = {
      mixout: function mixout() {
        return {
          parse: {
            transform: function transform(transformString) {
              return parseTransformString(transformString);
            }
          }
        };
      },
      hooks: function hooks() {
        return {
          parseNodeAttributes: function parseNodeAttributes(accumulator, node) {
            var transformString = node.getAttribute('data-fa-transform');

            if (transformString) {
              accumulator.transform = parseTransformString(transformString);
            }

            return accumulator;
          }
        };
      },
      provides: function provides(providers) {
        providers.generateAbstractTransformGrouping = function (_ref) {
          var main = _ref.main,
              transform = _ref.transform,
              containerWidth = _ref.containerWidth,
              iconWidth = _ref.iconWidth;
          var outer = {
            transform: "translate(".concat(containerWidth / 2, " 256)")
          };
          var innerTranslate = "translate(".concat(transform.x * 32, ", ").concat(transform.y * 32, ") ");
          var innerScale = "scale(".concat(transform.size / 16 * (transform.flipX ? -1 : 1), ", ").concat(transform.size / 16 * (transform.flipY ? -1 : 1), ") ");
          var innerRotate = "rotate(".concat(transform.rotate, " 0 0)");
          var inner = {
            transform: "".concat(innerTranslate, " ").concat(innerScale, " ").concat(innerRotate)
          };
          var path = {
            transform: "translate(".concat(iconWidth / 2 * -1, " -256)")
          };
          var operations = {
            outer: outer,
            inner: inner,
            path: path
          };
          return {
            tag: 'g',
            attributes: _objectSpread2({}, operations.outer),
            children: [{
              tag: 'g',
              attributes: _objectSpread2({}, operations.inner),
              children: [{
                tag: main.icon.tag,
                children: main.icon.children,
                attributes: _objectSpread2(_objectSpread2({}, main.icon.attributes), operations.path)
              }]
            }]
          };
        };
      }
    };

    var ALL_SPACE = {
      x: 0,
      y: 0,
      width: '100%',
      height: '100%'
    };

    function fillBlack(_abstract) {
      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (_abstract.attributes && (_abstract.attributes.fill || force)) {
        _abstract.attributes.fill = 'black';
      }

      return _abstract;
    }

    function deGroup(_abstract2) {
      if (_abstract2.tag === 'g') {
        return _abstract2.children;
      } else {
        return [_abstract2];
      }
    }

    var Masks = {
      hooks: function hooks() {
        return {
          parseNodeAttributes: function parseNodeAttributes(accumulator, node) {
            var maskData = node.getAttribute('data-fa-mask');
            var mask = !maskData ? emptyCanonicalIcon() : getCanonicalIcon(maskData.split(' ').map(function (i) {
              return i.trim();
            }));

            if (!mask.prefix) {
              mask.prefix = getDefaultUsablePrefix();
            }

            accumulator.mask = mask;
            accumulator.maskId = node.getAttribute('data-fa-mask-id');
            return accumulator;
          }
        };
      },
      provides: function provides(providers) {
        providers.generateAbstractMask = function (_ref) {
          var children = _ref.children,
              attributes = _ref.attributes,
              main = _ref.main,
              mask = _ref.mask,
              explicitMaskId = _ref.maskId,
              transform = _ref.transform;
          var mainWidth = main.width,
              mainPath = main.icon;
          var maskWidth = mask.width,
              maskPath = mask.icon;
          var trans = transformForSvg({
            transform: transform,
            containerWidth: maskWidth,
            iconWidth: mainWidth
          });
          var maskRect = {
            tag: 'rect',
            attributes: _objectSpread2(_objectSpread2({}, ALL_SPACE), {}, {
              fill: 'white'
            })
          };
          var maskInnerGroupChildrenMixin = mainPath.children ? {
            children: mainPath.children.map(fillBlack)
          } : {};
          var maskInnerGroup = {
            tag: 'g',
            attributes: _objectSpread2({}, trans.inner),
            children: [fillBlack(_objectSpread2({
              tag: mainPath.tag,
              attributes: _objectSpread2(_objectSpread2({}, mainPath.attributes), trans.path)
            }, maskInnerGroupChildrenMixin))]
          };
          var maskOuterGroup = {
            tag: 'g',
            attributes: _objectSpread2({}, trans.outer),
            children: [maskInnerGroup]
          };
          var maskId = "mask-".concat(explicitMaskId || nextUniqueId());
          var clipId = "clip-".concat(explicitMaskId || nextUniqueId());
          var maskTag = {
            tag: 'mask',
            attributes: _objectSpread2(_objectSpread2({}, ALL_SPACE), {}, {
              id: maskId,
              maskUnits: 'userSpaceOnUse',
              maskContentUnits: 'userSpaceOnUse'
            }),
            children: [maskRect, maskOuterGroup]
          };
          var defs = {
            tag: 'defs',
            children: [{
              tag: 'clipPath',
              attributes: {
                id: clipId
              },
              children: deGroup(maskPath)
            }, maskTag]
          };
          children.push(defs, {
            tag: 'rect',
            attributes: _objectSpread2({
              fill: 'currentColor',
              'clip-path': "url(#".concat(clipId, ")"),
              mask: "url(#".concat(maskId, ")")
            }, ALL_SPACE)
          });
          return {
            children: children,
            attributes: attributes
          };
        };
      }
    };

    var MissingIconIndicator = {
      provides: function provides(providers) {
        var reduceMotion = false;

        if (WINDOW.matchMedia) {
          reduceMotion = WINDOW.matchMedia('(prefers-reduced-motion: reduce)').matches;
        }

        providers.missingIconAbstract = function () {
          var gChildren = [];
          var FILL = {
            fill: 'currentColor'
          };
          var ANIMATION_BASE = {
            attributeType: 'XML',
            repeatCount: 'indefinite',
            dur: '2s'
          }; // Ring

          gChildren.push({
            tag: 'path',
            attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {
              d: 'M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z'
            })
          });

          var OPACITY_ANIMATE = _objectSpread2(_objectSpread2({}, ANIMATION_BASE), {}, {
            attributeName: 'opacity'
          });

          var dot = {
            tag: 'circle',
            attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {
              cx: '256',
              cy: '364',
              r: '28'
            }),
            children: []
          };

          if (!reduceMotion) {
            dot.children.push({
              tag: 'animate',
              attributes: _objectSpread2(_objectSpread2({}, ANIMATION_BASE), {}, {
                attributeName: 'r',
                values: '28;14;28;28;14;28;'
              })
            }, {
              tag: 'animate',
              attributes: _objectSpread2(_objectSpread2({}, OPACITY_ANIMATE), {}, {
                values: '1;0;1;1;0;1;'
              })
            });
          }

          gChildren.push(dot);
          gChildren.push({
            tag: 'path',
            attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {
              opacity: '1',
              d: 'M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z'
            }),
            children: reduceMotion ? [] : [{
              tag: 'animate',
              attributes: _objectSpread2(_objectSpread2({}, OPACITY_ANIMATE), {}, {
                values: '1;0;0;0;0;1;'
              })
            }]
          });

          if (!reduceMotion) {
            // Exclamation
            gChildren.push({
              tag: 'path',
              attributes: _objectSpread2(_objectSpread2({}, FILL), {}, {
                opacity: '0',
                d: 'M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z'
              }),
              children: [{
                tag: 'animate',
                attributes: _objectSpread2(_objectSpread2({}, OPACITY_ANIMATE), {}, {
                  values: '0;0;1;1;0;0;'
                })
              }]
            });
          }

          return {
            tag: 'g',
            attributes: {
              'class': 'missing'
            },
            children: gChildren
          };
        };
      }
    };

    var SvgSymbols = {
      hooks: function hooks() {
        return {
          parseNodeAttributes: function parseNodeAttributes(accumulator, node) {
            var symbolData = node.getAttribute('data-fa-symbol');
            var symbol = symbolData === null ? false : symbolData === '' ? true : symbolData;
            accumulator['symbol'] = symbol;
            return accumulator;
          }
        };
      }
    };

    var plugins = [InjectCSS, ReplaceElements, Layers, LayersCounter, LayersText, PseudoElements, MutationObserver$1, PowerTransforms, Masks, MissingIconIndicator, SvgSymbols];

    registerPlugins(plugins, {
      mixoutsTo: api
    });
    api.noAuto;
    api.config;
    api.library;
    api.dom;
    var parse$1 = api.parse;
    api.findIconDefinition;
    api.toHtml;
    var icon = api.icon;
    api.layer;
    api.text;
    api.counter;

    let PRODUCTION = false;

    try {
      PRODUCTION = process.env.NODE_ENV === 'production';
    } catch (e) {}

    function log(...args) {
      if (!PRODUCTION && console && typeof console.error === 'function') {
        console.error(...args);
      }
    }

    // Normalize icon arguments
    function normalizeIconArgs(icon) {
      // this has everything that it needs to be rendered which means it was probably imported
      // directly from an icon svg package
      if (icon && typeof icon === 'object' && icon.prefix && icon.iconName && icon.icon) {
        return icon
      }

      if (parse$1.icon) {
        return parse$1.icon(icon)
      }

      // if the icon is null, there's nothing to do
      if (icon === null) {
        return null
      }

      // if the icon is an object and has a prefix and an icon name, return it
      if (icon && typeof icon === 'object' && icon.prefix && icon.iconName) {
        return icon
      }

      // if it's an array with length of two
      if (Array.isArray(icon) && icon.length === 2) {
        // use the first item as prefix, second as icon name
        return { prefix: icon[0], iconName: icon[1] }
      }

      // if it's a string, use it as the icon name
      if (typeof icon === 'string') {
        return { prefix: 'fas', iconName: icon }
      }
    }

    // creates an object with a key of key
    // and a value of value
    // if certain conditions are met
    function objectWithKey(key, value) {
      // if the value is a non-empty array
      // or it's not an array but it is truthy
      // then create the object with the key and the value
      // if not, return an empty array
      return (Array.isArray(value) && value.length > 0) ||
        (!Array.isArray(value) && value)
        ? { [key]: value }
        : {}
    }

    /* node_modules\@fortawesome\svelte-fontawesome\src\components\SvgElement.svelte generated by Svelte v3.59.2 */

    const { Error: Error_1$1, Object: Object_1$4 } = globals;
    const file$d = "node_modules\\@fortawesome\\svelte-fontawesome\\src\\components\\SvgElement.svelte";

    function create_fragment$e(ctx) {
    	let svg;
    	let svg_levels = [/*elementProps*/ ctx[2]];
    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			set_svg_attributes(svg, svg_data);
    			add_location(svg, file$d, 32, 0, 860);
    		},
    		l: function claim(nodes) {
    			throw new Error_1$1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			svg.innerHTML = /*markup*/ ctx[1];
    			/*svg_binding*/ ctx[7](svg);
    		},
    		p: noop$3,
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			/*svg_binding*/ ctx[7](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SvgElement', slots, []);
    	let { tag } = $$props;
    	let { props } = $$props;
    	let { children } = $$props;
    	let { style = null } = $$props;
    	let { ref = null } = $$props;

    	if (tag !== 'svg') {
    		throw new Error('SvgElement requires a tag of "svg"');
    	}

    	function processChildren(children) {
    		return children?.reduce(
    			(acc, child) => {
    				return acc + (child.tag ? generateMarkup(child) : child);
    			},
    			''
    		) || '';
    	}

    	function generateMarkup({ tag, props, children }) {
    		// Generate a string setting key = value for each prop
    		const attributes = Object.keys(props).map(key => `${key}="${props[key]}"`).join(' ');

    		return `<${tag} ${attributes}>${processChildren(children)}</${tag}>`;
    	}

    	const markup = processChildren(children);
    	const elementStyle = (props?.style) ? `${props.style}${style || ''}` : style;
    	const elementProps = { ...props, style: elementStyle };

    	$$self.$$.on_mount.push(function () {
    		if (tag === undefined && !('tag' in $$props || $$self.$$.bound[$$self.$$.props['tag']])) {
    			console.warn("<SvgElement> was created without expected prop 'tag'");
    		}

    		if (props === undefined && !('props' in $$props || $$self.$$.bound[$$self.$$.props['props']])) {
    			console.warn("<SvgElement> was created without expected prop 'props'");
    		}

    		if (children === undefined && !('children' in $$props || $$self.$$.bound[$$self.$$.props['children']])) {
    			console.warn("<SvgElement> was created without expected prop 'children'");
    		}
    	});

    	const writable_props = ['tag', 'props', 'children', 'style', 'ref'];

    	Object_1$4.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SvgElement> was created with unknown prop '${key}'`);
    	});

    	function svg_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			ref = $$value;
    			$$invalidate(0, ref);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('tag' in $$props) $$invalidate(3, tag = $$props.tag);
    		if ('props' in $$props) $$invalidate(4, props = $$props.props);
    		if ('children' in $$props) $$invalidate(5, children = $$props.children);
    		if ('style' in $$props) $$invalidate(6, style = $$props.style);
    		if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
    	};

    	$$self.$capture_state = () => ({
    		tag,
    		props,
    		children,
    		style,
    		ref,
    		processChildren,
    		generateMarkup,
    		markup,
    		elementStyle,
    		elementProps
    	});

    	$$self.$inject_state = $$props => {
    		if ('tag' in $$props) $$invalidate(3, tag = $$props.tag);
    		if ('props' in $$props) $$invalidate(4, props = $$props.props);
    		if ('children' in $$props) $$invalidate(5, children = $$props.children);
    		if ('style' in $$props) $$invalidate(6, style = $$props.style);
    		if ('ref' in $$props) $$invalidate(0, ref = $$props.ref);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [ref, markup, elementProps, tag, props, children, style, svg_binding];
    }

    class SvgElement extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {
    			tag: 3,
    			props: 4,
    			children: 5,
    			style: 6,
    			ref: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SvgElement",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get tag() {
    		throw new Error_1$1("<SvgElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tag(value) {
    		throw new Error_1$1("<SvgElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get props() {
    		throw new Error_1$1("<SvgElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set props(value) {
    		throw new Error_1$1("<SvgElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get children() {
    		throw new Error_1$1("<SvgElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set children(value) {
    		throw new Error_1$1("<SvgElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error_1$1("<SvgElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error_1$1("<SvgElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ref() {
    		throw new Error_1$1("<SvgElement>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ref(value) {
    		throw new Error_1$1("<SvgElement>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\@fortawesome\svelte-fontawesome\src\components\FontAwesomeIcon.svelte generated by Svelte v3.59.2 */

    // (101:0) {#if result}
    function create_if_block$8(ctx) {
    	let svgelement;
    	let updating_ref;
    	let current;
    	const svgelement_spread_levels = [/*result*/ ctx[2], { style: /*style*/ ctx[1] }];

    	function svgelement_ref_binding(value) {
    		/*svgelement_ref_binding*/ ctx[28](value);
    	}

    	let svgelement_props = {};

    	for (let i = 0; i < svgelement_spread_levels.length; i += 1) {
    		svgelement_props = assign(svgelement_props, svgelement_spread_levels[i]);
    	}

    	if (/*ref*/ ctx[0] !== void 0) {
    		svgelement_props.ref = /*ref*/ ctx[0];
    	}

    	svgelement = new SvgElement({ props: svgelement_props, $$inline: true });
    	binding_callbacks.push(() => bind(svgelement, 'ref', svgelement_ref_binding));

    	const block = {
    		c: function create() {
    			create_component(svgelement.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(svgelement, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const svgelement_changes = (dirty[0] & /*result, style*/ 6)
    			? get_spread_update(svgelement_spread_levels, [
    					dirty[0] & /*result*/ 4 && get_spread_object(/*result*/ ctx[2]),
    					dirty[0] & /*style*/ 2 && { style: /*style*/ ctx[1] }
    				])
    			: {};

    			if (!updating_ref && dirty[0] & /*ref*/ 1) {
    				updating_ref = true;
    				svgelement_changes.ref = /*ref*/ ctx[0];
    				add_flush_callback(() => updating_ref = false);
    			}

    			svgelement.$set(svgelement_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(svgelement.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(svgelement.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(svgelement, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(101:0) {#if result}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*result*/ ctx[2] && create_if_block$8(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*result*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*result*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$8(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	const omit_props_names = [
    		"border","mask","maskId","fixedWidth","inverse","flip","icon","listItem","pull","pulse","rotation","size","spin","spinPulse","spinReverse","beat","fade","beatFade","bounce","shake","symbol","title","titleId","transform","swapOpacity","ref","style"
    	];

    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FontAwesomeIcon', slots, []);
    	let { border = false } = $$props;
    	let { mask = null } = $$props;
    	let { maskId = null } = $$props;
    	let { fixedWidth = false } = $$props;
    	let { inverse = false } = $$props;
    	let { flip = false } = $$props;
    	let { icon: icon$1 = null } = $$props;
    	let { listItem = false } = $$props;
    	let { pull = null } = $$props;
    	let { pulse = false } = $$props;
    	let { rotation = null } = $$props;
    	let { size = null } = $$props;
    	let { spin = false } = $$props;
    	let { spinPulse = false } = $$props;
    	let { spinReverse = false } = $$props;
    	let { beat = false } = $$props;
    	let { fade = false } = $$props;
    	let { beatFade = false } = $$props;
    	let { bounce = false } = $$props;
    	let { shake = false } = $$props;
    	let { symbol = false } = $$props;
    	let { title = '' } = $$props;
    	let { titleId = null } = $$props;
    	let { transform = null } = $$props;
    	let { swapOpacity = false } = $$props;
    	let { ref = null } = $$props;
    	let { style = null } = $$props;
    	const iconLookup = normalizeIconArgs(icon$1);
    	const classes = objectWithKey('classes', [...classList($$props), ...($$props.class || '').split(' ')]);

    	const transformObj = objectWithKey('transform', typeof transform === 'string'
    	? parse$1.transform(transform)
    	: transform);

    	const maskObj = objectWithKey('mask', normalizeIconArgs(mask));

    	const renderedIcon = icon(iconLookup, {
    		...classes,
    		...transformObj,
    		...maskObj,
    		symbol,
    		title,
    		titleId,
    		maskId
    	});

    	let result = null;

    	if (!renderedIcon) {
    		log('Could not find icon', iconLookup);
    	} else {
    		const { abstract } = renderedIcon;

    		result = convert(
    			(tag, props, children) => {
    				return { tag, props, children };
    			},
    			abstract[0],
    			$$restProps
    		);
    	}

    	function svgelement_ref_binding(value) {
    		ref = value;
    		$$invalidate(0, ref);
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(35, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		$$invalidate(34, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ('border' in $$new_props) $$invalidate(3, border = $$new_props.border);
    		if ('mask' in $$new_props) $$invalidate(4, mask = $$new_props.mask);
    		if ('maskId' in $$new_props) $$invalidate(5, maskId = $$new_props.maskId);
    		if ('fixedWidth' in $$new_props) $$invalidate(6, fixedWidth = $$new_props.fixedWidth);
    		if ('inverse' in $$new_props) $$invalidate(7, inverse = $$new_props.inverse);
    		if ('flip' in $$new_props) $$invalidate(8, flip = $$new_props.flip);
    		if ('icon' in $$new_props) $$invalidate(9, icon$1 = $$new_props.icon);
    		if ('listItem' in $$new_props) $$invalidate(10, listItem = $$new_props.listItem);
    		if ('pull' in $$new_props) $$invalidate(11, pull = $$new_props.pull);
    		if ('pulse' in $$new_props) $$invalidate(12, pulse = $$new_props.pulse);
    		if ('rotation' in $$new_props) $$invalidate(13, rotation = $$new_props.rotation);
    		if ('size' in $$new_props) $$invalidate(14, size = $$new_props.size);
    		if ('spin' in $$new_props) $$invalidate(15, spin = $$new_props.spin);
    		if ('spinPulse' in $$new_props) $$invalidate(16, spinPulse = $$new_props.spinPulse);
    		if ('spinReverse' in $$new_props) $$invalidate(17, spinReverse = $$new_props.spinReverse);
    		if ('beat' in $$new_props) $$invalidate(18, beat = $$new_props.beat);
    		if ('fade' in $$new_props) $$invalidate(19, fade = $$new_props.fade);
    		if ('beatFade' in $$new_props) $$invalidate(20, beatFade = $$new_props.beatFade);
    		if ('bounce' in $$new_props) $$invalidate(21, bounce = $$new_props.bounce);
    		if ('shake' in $$new_props) $$invalidate(22, shake = $$new_props.shake);
    		if ('symbol' in $$new_props) $$invalidate(23, symbol = $$new_props.symbol);
    		if ('title' in $$new_props) $$invalidate(24, title = $$new_props.title);
    		if ('titleId' in $$new_props) $$invalidate(25, titleId = $$new_props.titleId);
    		if ('transform' in $$new_props) $$invalidate(26, transform = $$new_props.transform);
    		if ('swapOpacity' in $$new_props) $$invalidate(27, swapOpacity = $$new_props.swapOpacity);
    		if ('ref' in $$new_props) $$invalidate(0, ref = $$new_props.ref);
    		if ('style' in $$new_props) $$invalidate(1, style = $$new_props.style);
    	};

    	$$self.$capture_state = () => ({
    		classList,
    		convert,
    		coreIcon: icon,
    		parse: parse$1,
    		log,
    		normalizeIconArgs,
    		objectWithKey,
    		SvgElement,
    		border,
    		mask,
    		maskId,
    		fixedWidth,
    		inverse,
    		flip,
    		icon: icon$1,
    		listItem,
    		pull,
    		pulse,
    		rotation,
    		size,
    		spin,
    		spinPulse,
    		spinReverse,
    		beat,
    		fade,
    		beatFade,
    		bounce,
    		shake,
    		symbol,
    		title,
    		titleId,
    		transform,
    		swapOpacity,
    		ref,
    		style,
    		iconLookup,
    		classes,
    		transformObj,
    		maskObj,
    		renderedIcon,
    		result
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(35, $$props = assign(assign({}, $$props), $$new_props));
    		if ('border' in $$props) $$invalidate(3, border = $$new_props.border);
    		if ('mask' in $$props) $$invalidate(4, mask = $$new_props.mask);
    		if ('maskId' in $$props) $$invalidate(5, maskId = $$new_props.maskId);
    		if ('fixedWidth' in $$props) $$invalidate(6, fixedWidth = $$new_props.fixedWidth);
    		if ('inverse' in $$props) $$invalidate(7, inverse = $$new_props.inverse);
    		if ('flip' in $$props) $$invalidate(8, flip = $$new_props.flip);
    		if ('icon' in $$props) $$invalidate(9, icon$1 = $$new_props.icon);
    		if ('listItem' in $$props) $$invalidate(10, listItem = $$new_props.listItem);
    		if ('pull' in $$props) $$invalidate(11, pull = $$new_props.pull);
    		if ('pulse' in $$props) $$invalidate(12, pulse = $$new_props.pulse);
    		if ('rotation' in $$props) $$invalidate(13, rotation = $$new_props.rotation);
    		if ('size' in $$props) $$invalidate(14, size = $$new_props.size);
    		if ('spin' in $$props) $$invalidate(15, spin = $$new_props.spin);
    		if ('spinPulse' in $$props) $$invalidate(16, spinPulse = $$new_props.spinPulse);
    		if ('spinReverse' in $$props) $$invalidate(17, spinReverse = $$new_props.spinReverse);
    		if ('beat' in $$props) $$invalidate(18, beat = $$new_props.beat);
    		if ('fade' in $$props) $$invalidate(19, fade = $$new_props.fade);
    		if ('beatFade' in $$props) $$invalidate(20, beatFade = $$new_props.beatFade);
    		if ('bounce' in $$props) $$invalidate(21, bounce = $$new_props.bounce);
    		if ('shake' in $$props) $$invalidate(22, shake = $$new_props.shake);
    		if ('symbol' in $$props) $$invalidate(23, symbol = $$new_props.symbol);
    		if ('title' in $$props) $$invalidate(24, title = $$new_props.title);
    		if ('titleId' in $$props) $$invalidate(25, titleId = $$new_props.titleId);
    		if ('transform' in $$props) $$invalidate(26, transform = $$new_props.transform);
    		if ('swapOpacity' in $$props) $$invalidate(27, swapOpacity = $$new_props.swapOpacity);
    		if ('ref' in $$props) $$invalidate(0, ref = $$new_props.ref);
    		if ('style' in $$props) $$invalidate(1, style = $$new_props.style);
    		if ('result' in $$props) $$invalidate(2, result = $$new_props.result);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);

    	return [
    		ref,
    		style,
    		result,
    		border,
    		mask,
    		maskId,
    		fixedWidth,
    		inverse,
    		flip,
    		icon$1,
    		listItem,
    		pull,
    		pulse,
    		rotation,
    		size,
    		spin,
    		spinPulse,
    		spinReverse,
    		beat,
    		fade,
    		beatFade,
    		bounce,
    		shake,
    		symbol,
    		title,
    		titleId,
    		transform,
    		swapOpacity,
    		svgelement_ref_binding
    	];
    }

    class FontAwesomeIcon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$d,
    			create_fragment$d,
    			safe_not_equal,
    			{
    				border: 3,
    				mask: 4,
    				maskId: 5,
    				fixedWidth: 6,
    				inverse: 7,
    				flip: 8,
    				icon: 9,
    				listItem: 10,
    				pull: 11,
    				pulse: 12,
    				rotation: 13,
    				size: 14,
    				spin: 15,
    				spinPulse: 16,
    				spinReverse: 17,
    				beat: 18,
    				fade: 19,
    				beatFade: 20,
    				bounce: 21,
    				shake: 22,
    				symbol: 23,
    				title: 24,
    				titleId: 25,
    				transform: 26,
    				swapOpacity: 27,
    				ref: 0,
    				style: 1
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FontAwesomeIcon",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get border() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set border(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mask() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mask(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get maskId() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set maskId(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fixedWidth() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fixedWidth(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inverse() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inverse(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flip() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flip(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icon() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listItem() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listItem(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pull() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pull(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pulse() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pulse(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get spin() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set spin(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get spinPulse() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set spinPulse(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get spinReverse() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set spinReverse(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get beat() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set beat(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fade() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fade(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get beatFade() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set beatFade(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get bounce() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bounce(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shake() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shake(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get symbol() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set symbol(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get titleId() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleId(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transform() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transform(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get swapOpacity() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set swapOpacity(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ref() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ref(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<FontAwesomeIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<FontAwesomeIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var faCircleQuestion = {
      prefix: 'far',
      iconName: 'circle-question',
      icon: [512, 512, [62108, "question-circle"], "f059", "M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm169.8-90.7c7.9-22.3 29.1-37.3 52.8-37.3h58.3c34.9 0 63.1 28.3 63.1 63.1c0 22.6-12.1 43.5-31.7 54.8L280 264.4c-.2 13-10.9 23.6-24 23.6c-13.3 0-24-10.7-24-24V250.5c0-8.6 4.6-16.5 12.1-20.8l44.3-25.4c4.7-2.7 7.6-7.7 7.6-13.1c0-8.4-6.8-15.1-15.1-15.1H222.6c-3.4 0-6.4 2.1-7.5 5.3l-.4 1.2c-4.4 12.5-18.2 19-30.6 14.6s-19-18.2-14.6-30.6l.4-1.2zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z"]
    };
    var faQuestionCircle = faCircleQuestion;

    const faChevronUp = {
      prefix: 'fas',
      iconName: 'chevron-up',
      icon: [512, 512, [], "f077", "M233.4 105.4c12.5-12.5 32.8-12.5 45.3 0l192 192c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L256 173.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l192-192z"]
    };
    const faYenSign = {
      prefix: 'fas',
      iconName: 'yen-sign',
      icon: [320, 512, [165, "cny", "jpy", "rmb", "yen"], "f157", "M58.6 46.3C48.8 31.5 29 27.6 14.2 37.4S-4.4 67 5.4 81.8L100.2 224 48 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l80 0 0 32-80 0c-17.7 0-32 14.3-32 32s14.3 32 32 32l80 0 0 64c0 17.7 14.3 32 32 32s32-14.3 32-32l0-64 80 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-80 0 0-32 80 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-52.2 0L314.6 81.8c9.8-14.7 5.8-34.6-8.9-44.4s-34.6-5.8-44.4 8.9L160 198.3 58.6 46.3z"]
    };
    const faChevronDown = {
      prefix: 'fas',
      iconName: 'chevron-down',
      icon: [512, 512, [], "f078", "M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"]
    };
    const faXmark = {
      prefix: 'fas',
      iconName: 'xmark',
      icon: [384, 512, [128473, 10005, 10006, 10060, 215, "close", "multiply", "remove", "times"], "f00d", "M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"]
    };
    const faTimes = faXmark;
    const faChevronLeft = {
      prefix: 'fas',
      iconName: 'chevron-left',
      icon: [320, 512, [9001], "f053", "M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256 246.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z"]
    };
    const faChevronRight = {
      prefix: 'fas',
      iconName: 'chevron-right',
      icon: [320, 512, [9002], "f054", "M310.6 233.4c12.5 12.5 12.5 32.8 0 45.3l-192 192c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L242.7 256 73.4 86.6c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l192 192z"]
    };

    var img$f = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%23f8f6da%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-2%7bfill:%2304070e%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3ccircle class='cls-1' cx='50' cy='50' r='50'/%3e%3cpath class='cls-2' d='M97.69%2c57.06c-6.56-3.7-10.77-5.55-12.62-5.55-1.34%2c0-2.39%2c1.03-3.15%2c3.09-.76%2c2.06-2.27%2c3.09-4.54%2c3.09-.93%2c0-2.82-.34-5.68-1.01-1.6%2c2.44-2.4%2c4-2.4%2c4.67%2c0%2c.93.69%2c2.02%2c2.06%2c3.28%2c1.37%2c1.26%2c2.54%2c1.89%2c3.48%2c1.89.6%2c0%2c1.42-.12%2c2.45-.38%2c1.03-.25%2c1.72-.38%2c2.06-.38%2c1.03%2c0%2c1.55%2c1.89%2c1.55%2c5.68s-.84%2c9.17-2.52%2c16.65c-2.19-8.58-4.5-12.87-6.94-12.87-.34%2c0-1.03.25-2.08.76-1.05.5-1.83.75-2.33.75-2.44%2c0-4.62-2.23-6.56-6.69-3.87.59-5.8%2c2.57-5.8%2c5.93%2c0%2c1.68.78%2c3.03%2c2.34%2c4.04%2c1.55%2c1.01%2c2.33%2c1.73%2c2.33%2c2.14%2c0%2c2.27-3.32%2c5.76-9.97%2c10.47-3.53%2c2.52-5.97%2c4.29-7.32%2c5.3%2c1.17-1.51%2c2.35-3.49%2c3.53-5.93%2c1.34-2.78%2c2.02-4.92%2c2.02-6.44%2c0-.84-.97-2.02-2.9-3.53-1.94-1.51-2.9-3.11-2.9-4.79%2c0-1.43.5-3.19%2c1.51-5.3-1.09-1.26-2.39-1.89-3.91-1.89-3.37%2c0-5.04%2c1.1-5.04%2c3.28%2c0-1.51%2c0-.38%2c0%2c3.41.08%2c2.78-2.02%2c4.16-6.31%2c4.16-3.28%2c0-8.79-.76-16.53-2.27%2c8.75-2.19%2c13.12-4.71%2c13.12-7.57%2c0%2c.34-.17-.67-.5-3.03-.34-2.61%2c1.51-4.96%2c5.55-7.06-.76-3.87-2.77-5.8-6.06-5.8-.5%2c0-1.43.88-2.78%2c2.65-1.35%2c1.77-2.61%2c2.65-3.78%2c2.65-2.02%2c0-4.63-2.19-7.82-6.56-1.52-2.18-3.83-5.42-6.94-9.71%2c1.93%2c1.01%2c3.87%2c2.02%2c5.8%2c3.03%2c2.52%2c1.18%2c4.54%2c1.77%2c6.06%2c1.77%2c1.18%2c0%2c2.33-1.03%2c3.47-3.09%2c1.13-2.06%2c2.63-3.09%2c4.48-3.09.25%2c0%2c1.94.5%2c5.05%2c1.52%2c1.6-2.44%2c2.4-4.25%2c2.4-5.43%2c0-1.01-.61-2.17-1.83-3.47-1.22-1.3-2.33-1.95-3.34-1.95-.42%2c0-1.07.12-1.96.38-.88.25-1.53.38-1.95.38-1.52%2c0-2.27-1.89-2.27-5.68%2c0-1.01.97-6.77%2c2.9-17.29-.09%2c1.26.46%2c3.62%2c1.64%2c7.06%2c1.43%2c4.21%2c3.11%2c6.31%2c5.05%2c6.31.33%2c0%2c1.01-.25%2c2.02-.76%2c1.01-.5%2c1.81-.75%2c2.4-.75%2c1.93%2c0%2c3.53%2c1.09%2c4.79%2c3.28l1.46%2c2.63c.28.5.84.79%2c1.41.7%2c1.34-.19%2c2.49-.8%2c3.44-1.82%2c1.18-1.26%2c1.77-2.78%2c1.77-4.54s-.78-3.26-2.33-4.23c-1.56-.97-2.34-1.7-2.34-2.21%2c0-1.77%2c2.78-4.75%2c8.33-8.96%2c4.46-3.36%2c7.36-5.34%2c8.71-5.93-3.62%2c4.88-5.43%2c8.45-5.43%2c10.72%2c0%2c1.18.71%2c2.44%2c2.14%2c3.79%2c1.77%2c1.6%2c2.78%2c2.73%2c3.03%2c3.41.84%2c1.94.76%2c4.59-.25%2c7.95%2c2.27%2c1.6%2c3.99%2c2.4%2c5.17%2c2.4%2c2.44%2c0%2c3.66-1.26%2c3.66-3.79%2c0-.25-.11-1.05-.31-2.4-.21-1.34-.27-2.1-.19-2.27.34-1.18%2c2.65-1.77%2c6.94-1.77%2c2.69%2c0%2c8.28.76%2c16.78%2c2.27-1.85.5-4.63%2c1.26-8.33%2c2.27-3.37%2c1.01-5.05%2c2.14-5.05%2c3.41%2c0%2c.59.21%2c1.6.63%2c3.03.42%2c1.43.63%2c2.48.63%2c3.16%2c0%2c1.18-.76%2c2.27-2.27%2c3.28l-4.29%2c3.03c1.01%2c1.85%2c1.68%2c2.95%2c2.02%2c3.28.84%2c1.01%2c1.97%2c1.51%2c3.41%2c1.51%2c1.01%2c0%2c1.93-.88%2c2.78-2.65.84-1.77%2c2.19-2.65%2c4.04-2.65%2c2.27%2c0%2c4.84%2c2.1%2c7.7%2c6.31%2c1.6%2c2.35%2c4.08%2c5.93%2c7.44%2c10.72ZM69.68%2c49.75c0-5.38-1.98-10.05-5.93-14.01-3.95-3.95-8.62-5.93-14-5.93s-10.18%2c1.96-14.13%2c5.87c-3.95%2c3.91-5.97%2c8.6-6.05%2c14.07-.09%2c5.38%2c1.91%2c10.03%2c5.99%2c13.94%2c4.08%2c3.91%2c8.81%2c5.87%2c14.19%2c5.87%2c5.72%2c0%2c10.49-1.87%2c14.32-5.62%2c3.83-3.74%2c5.7-8.47%2c5.62-14.19ZM67.79%2c49.75c0%2c5.13-1.72%2c9.38-5.17%2c12.74-3.45%2c3.37-7.74%2c5.05-12.87%2c5.05s-9.21-1.72-12.74-5.17c-3.53-3.45-5.3-7.65-5.3-12.62s1.79-9.06%2c5.36-12.55c3.58-3.49%2c7.8-5.24%2c12.68-5.24s9.1%2c1.77%2c12.68%2c5.3c3.57%2c3.53%2c5.36%2c7.7%2c5.36%2c12.49Z'/%3e%3c/g%3e%3c/svg%3e";

    var img$e = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%23c2b7ae%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-2%7bfill:%2304070e%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3cpath class='cls-1' d='M100%2c50c0%2c27.62-22.39%2c50-50%2c50S0%2c77.61%2c0%2c50%2c22.39%2c0%2c50%2c0s50%2c22.38%2c50%2c50Z'/%3e%3cpath class='cls-2' d='M90.7%2c48.62c0%2c5.52-2.01%2c9.28-6.02%2c11.29-1.17.59-4.85%2c1.38-11.04%2c2.38-4.01.67-6.02%2c2.22-6.02%2c4.64v10.16c0%2c.42.12%2c1.71.37%2c3.89l.38%2c4.01c0%2c1.25-.29%2c3.3-.88%2c6.14-1.59.33-3.43.71-5.52%2c1.13-.67-2.51-1-4.22-1-5.14%2c0-.42.11-1.04.31-1.88.21-.83.32-1.46.32-1.88%2c0-.58-.52-2.21-1.56-4.89h-1.95c-.26.42-.34.96-.26%2c1.63.33%2c1.42.46%2c2.63.38%2c3.64-1.42%2c1-3.39%2c2.34-5.89%2c4.01-.59-.17-.79-.25-.63-.25v-8.9c-.16-.42-.58-.58-1.25-.5h-1.5l-1.5%2c11.79c-1.17.08-2.59.08-4.26%2c0-.59-2.76-1.63-6.85-3.13-12.29h-1c-.92%2c2.93-1.42%2c4.52-1.51%2c4.77%2c0%2c.33.1.98.31%2c1.94.21.96.31%2c1.61.31%2c1.94%2c0%2c.25-.08.88-.25%2c1.88l-.38%2c3.01c-.17.17-.38.25-.63.25-2.51%2c0-4.18-.63-5.02-1.88-.84-1.26-1.17-3.01-1-5.27l1-15.05c0-.25.08-.59.25-1%2c.16-.42.25-.71.25-.88%2c0-.67-.71-2.01-2.13-4.01-.25-.08-1.55-.38-3.89-.88-1.42-.33-4.22-.92-8.4-1.76-5.77-1.08-8.65-5.72-8.65-13.92%2c0-12.21%2c5.02-22.37%2c15.05-30.47.41%2c2.26%2c1.13%2c5.27%2c2.13%2c9.03.75.17%2c2.38.54%2c4.89%2c1.13.5.17%2c3.05%2c1.09%2c7.65%2c2.76-2.34-1.42-5.39-3.72-9.16-6.9-1.42-1.67-2.13-4.47-2.13-8.4%2c0-.92%2c1.59-2.01%2c4.77-3.26%2c2.84-1.17%2c4.97-1.84%2c6.4-2.01%2c4.51-.58%2c7.98-.88%2c10.41-.88%2c10.45%2c0%2c18.89%2c2.68%2c25.33%2c8.03-2.09%2c2.43-5.68%2c5.01-10.78%2c7.77%2c2.01.08%2c4.93-.71%2c8.78-2.38%2c3.84-1.67%2c5.47-2.51%2c4.89-2.51.67%2c0%2c2.01%2c1.34%2c4.01%2c4.01%2c1.5%2c2.01%2c2.71%2c3.81%2c3.64%2c5.39%2c2.67%2c4.77%2c4.47%2c9.91%2c5.39%2c15.43%2c0%2c1.93.04%2c3.3.12%2c4.14v1ZM42.66%2c50.88c0-3.59-1.57-7-4.7-10.22-3.14-3.22-6.5-4.83-10.1-4.83-3.18%2c0-5.98%2c1.35-8.4%2c4.04-2.43%2c2.69-3.64%2c5.68-3.64%2c8.96%2c0%2c2.86%2c1.38%2c4.71%2c4.14%2c5.55%2c1.76.51%2c4.22.8%2c7.4.88h6.9c5.6.08%2c8.4-1.38%2c8.4-4.39ZM56.33%2c66.43v-3.89c-.58-1.09-1.17-2.21-1.75-3.39-.5-1.67-1.42-4.01-2.76-7.03l-1.38%2c14.67c0%2c1.17-.25%2c1.76-.75%2c1.76-.33%2c0-.58-.08-.75-.25-.59-8.86-.88-12.71-.88-11.54v-4.39c-.17-.25-.37-.38-.62-.38-2.84%2c2.93-4.26%2c7.65-4.26%2c14.17%2c0%2c3.6.33%2c5.81%2c1%2c6.65.67-.17%2c1.42-.46%2c2.26-.88.33-.17%2c1.29-.25%2c2.89-.25s3.51.5%2c5.77%2c1.5c.84%2c0%2c1.25-2.26%2c1.25-6.77ZM84.68%2c48.96c0-3.37-1.25-6.38-3.76-9.03-2.51-2.65-5.39-3.97-8.65-3.97-3.51%2c0-6.79%2c1.61-9.85%2c4.83-3.05%2c3.22-4.58%2c6.58-4.58%2c10.1%2c0%2c2.93%2c1.42%2c4.39%2c4.26%2c4.39h14.42c5.43-.08%2c8.15-2.19%2c8.15-6.31Z'/%3e%3c/g%3e%3c/svg%3e";

    var img$d = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%23bcd9e8%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-2%7bfill:%2304070e%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3ccircle class='cls-1' cx='50' cy='50' r='50'/%3e%3cpath class='cls-2' d='M67.49%2c83.72c-4.79%2c4.87-10.68%2c7.31-17.69%2c7.31-7.86%2c0-14.1-2.69-18.71-8.07-4.36-5.13-6.54-11.66-6.54-19.61%2c0-8.54%2c3.72-18.29%2c11.15-29.22%2c6.06-8.97%2c13.2-16.83%2c21.4-23.58-1.2%2c5.47-1.79%2c9.36-1.79%2c11.66%2c0%2c5.3%2c1.66%2c10.47%2c5%2c15.51%2c4.1%2c5.98%2c7.22%2c10.43%2c9.36%2c13.33%2c3.33%2c5.04%2c5%2c9.95%2c5%2c14.74%2c0%2c7.09-2.39%2c13.07-7.18%2c17.94ZM67.36%2c56.36c-1.28-2.86-2.78-4.76-4.49-5.7.26.51.38%2c1.24.38%2c2.18%2c0%2c1.79-.51%2c4.36-1.54%2c7.69l-1.66%2c5.13c0%2c2.99%2c1.49%2c4.49%2c4.48%2c4.49%2c3.16%2c0%2c4.74-2.09%2c4.74-6.28%2c0-2.13-.64-4.63-1.92-7.5Z'/%3e%3c/g%3e%3c/svg%3e";

    var img$c = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%23f8a076%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-2%7bfill:%2304070e%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3ccircle class='cls-1' cx='50' cy='50' r='50'/%3e%3cpath class='cls-2' d='M91.96%2c66.62c-3.74%2c8.91-11.16%2c13.37-22.28%2c13.37-2.04%2c0-4.25.25-6.62.76-3.56.76-5.35%2c1.83-5.35%2c3.19%2c0%2c.42.29.91.89%2c1.46.59.55%2c1.1.83%2c1.53.83-2.12%2c0-.68.06%2c4.33.19%2c5.01.13%2c8.15.19%2c9.42.19-7.38%2c4.33-19.73%2c6.32-37.04%2c5.98-5.69-.08-10.57-2.59-14.64-7.51-3.99-4.67-5.98-9.89-5.98-15.66%2c0-6.11%2c2.06-11.31%2c6.18-15.59%2c4.11-4.28%2c9.23-6.43%2c15.34-6.43%2c1.36%2c0%2c3.16.3%2c5.41.89%2c2.25.59%2c3.76.89%2c4.52.89%2c3.14%2c0%2c7.04-1.29%2c11.71-3.88%2c4.67-2.59%2c6.88-3.88%2c6.62-3.88-.85%2c8.91-3.82%2c14.89-8.91%2c17.95-3.65%2c2.12-5.47%2c4.2-5.47%2c6.24%2c0%2c1.27.76%2c2.29%2c2.29%2c3.06%2c1.19.59%2c2.5.89%2c3.95.89%2c2.21%2c0%2c4.37-1.36%2c6.49-4.07%2c2.12-2.72%2c3.05-5.18%2c2.8-7.38-.25-2.54-.08-5.6.51-9.16.17-1.02.78-2.27%2c1.84-3.75%2c1.06-1.49%2c2.02-2.4%2c2.87-2.74%2c0%2c.76-.28%2c2.04-.83%2c3.82-.55%2c1.78-.83%2c3.1-.83%2c3.95%2c0%2c1.87.51%2c3.31%2c1.53%2c4.33%2c1.53-.59%2c2.88-2.5%2c4.07-5.73%2c1.02-2.46%2c1.61-4.84%2c1.78-7.13-3.57-.17-6.98-1.78-10.25-4.84-3.27-3.06-4.9-6.37-4.9-9.93%2c0-.59.08-1.19.26-1.78.51.76%2c1.27%2c1.95%2c2.29%2c3.56%2c1.44%2c2.12%2c2.55%2c3.18%2c3.31%2c3.18%2c1.02%2c0%2c1.53-1.06%2c1.53-3.18%2c0-2.71-.72-5.18-2.16-7.38-1.61-2.63-3.69-3.95-6.24-3.95-1.19%2c0-2.97.64-5.34%2c1.91-2.38%2c1.27-4.54%2c1.91-6.49%2c1.91-.6%2c0-3.23-.77-7.89-2.29%2c8.23-1.36%2c12.35-2.59%2c12.35-3.69%2c0-2.88-5.64-4.84-16.93-5.86-1.11-.08-3.14-.25-6.11-.51.34-.42%2c2.76-.89%2c7.26-1.4%2c3.82-.42%2c6.49-.64%2c8.02-.64%2c20.2%2c0%2c33.01%2c9.8%2c38.44%2c29.41.93-.77%2c1.4-2.07%2c1.4-3.87%2c0-2.32-.68-5.25-2.04-8.78-.51-1.38-1.32-3.44-2.42-6.19%2c6.96%2c8.87%2c10.44%2c17.27%2c10.44%2c25.2%2c0%2c4.18-.98%2c7.97-2.93%2c11.38-1.27%2c2.3-3.65%2c5.24-7.13%2c8.83-3.48%2c3.58-5.86%2c6.35-7.13%2c8.31%2c4.67-1.27%2c7.72-2.25%2c9.17-2.93%2c3.22-1.44%2c6.15-3.61%2c8.78-6.49%2c0%2c1.1-.47%2c2.76-1.4%2c4.96ZM36.46%2c16.59c0%2c1.53-.85%2c2.5-2.54%2c2.93l-3.31.51c-1.19.59-2.93%2c2.93-5.22%2c7-.26-1.27-.64-3.05-1.15-5.35-.76.09-2.04.76-3.82%2c2.04-.76.59-2%2c1.48-3.69%2c2.67.51-3.05%2c2.21-6.15%2c5.09-9.29%2c3.05-3.48%2c6.03-5.22%2c8.91-5.22%2c3.82%2c0%2c5.73%2c1.57%2c5.73%2c4.71ZM58.61%2c28.3c0%2c1.44-.79%2c2.65-2.36%2c3.63-1.57.98-3.12%2c1.46-4.65%2c1.46-2.04%2c0-3.86-1.15-5.47-3.44-1.96-2.8-3.95-4.62-5.98-5.48.42-.42.93-.63%2c1.53-.63.76%2c0%2c2.05.59%2c3.88%2c1.78%2c1.82%2c1.19%2c2.99%2c1.78%2c3.5%2c1.78.42%2c0%2c1.12-.59%2c2.1-1.78.97-1.19%2c2.06-1.78%2c3.25-1.78%2c2.8%2c0%2c4.2%2c1.49%2c4.2%2c4.46Z'/%3e%3c/g%3e%3c/svg%3e";

    var img$b = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%2304070e%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-2%7bfill:%239cc497%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3cpath class='cls-2' d='M100%2c50c0%2c27.62-22.38%2c50-50%2c50S0%2c77.61%2c0%2c50%2c22.38%2c0%2c50%2c0s50%2c22.38%2c50%2c50Z'/%3e%3cpath class='cls-1' d='M93.76%2c56.22c0%2c1.67-.64%2c3.16-1.94%2c4.5-1.29%2c1.33-2.77%2c2-4.44%2c2-2.66%2c0-4.62-1.25-5.87-3.75l-5.87-.25c-1.25%2c0-3.71.54-7.37%2c1.62-3.91%2c1.08-6.16%2c1.96-6.75%2c2.62-.92%2c1-1.66%2c3.33-2.25%2c7-.5%2c3-.75%2c5.21-.75%2c6.62%2c0%2c2.25.35%2c3.89%2c1.06%2c4.93.71%2c1.04%2c2.17%2c1.92%2c4.37%2c2.62%2c2.2.71%2c3.56%2c1.1%2c4.06%2c1.19.33%2c0%2c.87-.04%2c1.62-.12h1.5c1.08%2c0%2c2.21.17%2c3.37.5%2c1.67.5%2c2.37%2c1.17%2c2.12%2c2-1.17-.17-3.21.08-6.12.75l3.5%2c1.75c0%2c1-1.42%2c1.5-4.25%2c1.5-.75%2c0-1.77-.17-3.06-.5-1.29-.34-2.14-.5-2.56-.5h-1.62c-.08.83-.33%2c2.08-.75%2c3.75-1.42-.08-3.08-.92-5-2.5-1.92-1.58-3.12-2.37-3.62-2.37s-1.21.79-2.12%2c2.37c-.92%2c1.58-1.38%2c2.66-1.38%2c3.25-1.08-.58-2-1.67-2.75-3.25-.33-1.08-.71-2.17-1.12-3.25-.83.08-2.37%2c1.83-4.62%2c5.25h-.63c-.17-.25-.79-2-1.87-5.25-2.58-.83-5-1.25-7.25-1.25-1.08%2c0-2.75.25-5%2c.75l-3.5-.25c.5-.5%2c1.96-1.46%2c4.37-2.87%2c2.83-1.67%2c5-2.5%2c6.5-2.5.25%2c0%2c.58.04%2c1%2c.12.41.09.75.12%2c1%2c.12.58%2c0%2c1.52-.31%2c2.81-.94%2c1.29-.62%2c2.04-1.19%2c2.25-1.68.21-.5.32-1.79.32-3.88%2c0-4.75-1.25-8.29-3.75-10.62-2.17-2.08-5.75-3.58-10.74-4.5-1.33%2c4.75-5.08%2c7.12-11.24%2c7.12-2%2c0-4-1.21-6-3.62-2-2.42-3-4.62-3-6.62%2c0-3.08%2c1.29-5.62%2c3.87-7.62-2.08-2.16-3.12-4.37-3.12-6.62%2c0-2.08.64-3.91%2c1.94-5.5%2c1.29-1.58%2c2.98-2.5%2c5.06-2.75-.17-2.66.71-4.5%2c2.62-5.5-.92-.91-1.37-2.54-1.37-4.87%2c0-2.75.92-5.04%2c2.75-6.87%2c1.83-1.83%2c4.12-2.75%2c6.87-2.75%2c3%2c0%2c5.46%2c1.04%2c7.37%2c3.12%2c2.42-8.24%2c7.62-12.37%2c15.61-12.37%2c4.16%2c0%2c7.83%2c1.67%2c10.99%2c5%2c1.17%2c1.25%2c1.75%2c1.92%2c1.75%2c2-1%2c0-.5-.19%2c1.5-.56%2c2-.38%2c3.45-.56%2c4.37-.56%2c3.25%2c0%2c6.12%2c1.21%2c8.62%2c3.62%2c2.16%2c2.17%2c3.66%2c4.91%2c4.5%2c8.24.58.08%2c1.5.33%2c2.75.75%2c1.83.92%2c2.75%2c2.5%2c2.75%2c4.75%2c0%2c.42-.34%2c1.21-1%2c2.37%2c5.33%2c3%2c7.99%2c7.16%2c7.99%2c12.49%2c0%2c1.5-.58%2c3.58-1.75%2c6.25%2c2.17%2c1.25%2c3.25%2c3.08%2c3.25%2c5.5ZM42.29%2c61.72v-1.62c0-1.91-.94-3.66-2.81-5.25-1.87-1.58-3.77-2.37-5.68-2.37-2.33%2c0-4.5.54-6.5%2c1.62%2c4.41-.25%2c9.41%2c2.29%2c14.99%2c7.62ZM40.05%2c46.23c-1.25-1.42-2.33-2.88-3.25-4.37-3.5.92-5.25%2c1.96-5.25%2c3.12%2c1-.08%2c2.46.11%2c4.37.56%2c1.91.46%2c3.29.69%2c4.12.69ZM47.67%2c42.36v-5.5c-2-.33-3.21-.5-3.62-.5v1.87l3.62%2c4.12ZM63.91%2c38.86c-1-.42-2.87-1.25-5.62-2.5v10.74c3.91-2.25%2c5.79-5%2c5.62-8.24ZM70.78%2c53.6l-2.75-3.37c-1.66%2c1.17-3.35%2c2.35-5.06%2c3.56-1.71%2c1.21-3.19%2c2.56-4.43%2c4.06%2c3.75-2%2c7.83-3.41%2c12.24-4.25Z'/%3e%3c/g%3e%3c/svg%3e";

    var img$a = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%23010101%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-2%7bfill:%23d0cac3%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3cg id='svg_253'%3e%3cpath id='svg_255' class='cls-2' d='M100%2c50c0%2c27.6-22.4%2c50-50%2c50S0%2c77.6%2c0%2c50%2c22.4%2c0%2c50%2c0s50%2c22.4%2c50%2c50Z'/%3e%3cpath id='svg_257' class='cls-1' d='M49.7%2c12c2.5%2c5%2c5.5%2c9.8%2c9.1%2c14.5%2c1.5%2c2%2c3.3%2c4%2c5.3%2c6.1%2c1.9%2c2.1%2c4.1%2c4.3%2c6.5%2c6.3%2c2.4%2c2.1%2c4.9%2c4.1%2c7.8%2c6s5.8%2c3.6%2c9.1%2c5.1c-4.8%2c2.6-9.5%2c5.7-14.2%2c9.3-2%2c1.5-4%2c3.3-6.1%2c5.3s-4.2%2c4.2-6.3%2c6.6c-2%2c2.4-4%2c5-5.9%2c7.8s-3.6%2c5.8-5.1%2c9c-2.4-4.7-5.4-9.3-9-14-3.1-3.9-7-8.1-11.7-12.4-4.7-4.4-10.4-8.2-17-11.7%2c4.8-2.5%2c9.5-5.6%2c14.2-9.2%2c4-3.2%2c8.1-7.1%2c12.4-11.8%2c4.1-4.6%2c7.8-10.3%2c10.9-16.9ZM44.2%2c64.9c2.2%2c2.8%2c4.1%2c5.7%2c5.5%2c8.6%2c1.9-4%2c4.1-7.5%2c6.8-10.4%2c2.6-2.9%2c5.2-5.3%2c7.7-7.3%2c2.8-2.2%2c5.8-4.1%2c8.8-5.8-4.1-1.9-7.6-4.1-10.4-6.8-2.9-2.6-5.3-5.2-7.2-7.7-2.2-2.8-4.1-5.8-5.6-9-1.9%2c4.1-4.1%2c7.6-6.7%2c10.5-2.6%2c2.9-5.1%2c5.3-7.6%2c7.3-2.8%2c2.2-5.8%2c4.1-8.8%2c5.6%2c4.1%2c2.1%2c7.6%2c4.5%2c10.5%2c7.2s5.1%2c5.4%2c7%2c7.8h0Z'/%3e%3c/g%3e%3c/g%3e%3c/svg%3e";

    var css_248z$c = "";
    styleInject(css_248z$c);

    /* src\ManaCard.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1$3 } = globals;
    const file$c = "src\\ManaCard.svelte";

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    // (206:4) {#each Object.keys(manaIcons) as mana}
    function create_each_block$9(ctx) {
    	let button;
    	let img;
    	let img_src_value;
    	let t;
    	let button_class_value;
    	let button_aria_pressed_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[4](/*mana*/ ctx[9]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			img = element("img");
    			t = space();
    			if (!src_url_equal(img.src, img_src_value = /*manaIcons*/ ctx[1][/*mana*/ ctx[9]].icon)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "" + (/*mana*/ ctx[9] + " mana icon"));
    			attr_dev(img, "class", "mana-icon");
    			add_location(img, file$c, 212, 10, 5075);
    			attr_dev(button, "class", button_class_value = "mana-symbol " + (/*card*/ ctx[0].mana[/*mana*/ ctx[9]] ? 'active' : '') + " svelte-1a4o2rc");
    			attr_dev(button, "tabindex", "0");
    			attr_dev(button, "aria-label", /*manaIcons*/ ctx[1][/*mana*/ ctx[9]].label + ' mana');
    			attr_dev(button, "aria-pressed", button_aria_pressed_value = /*card*/ ctx[0].mana[/*mana*/ ctx[9]] ? 'true' : 'false');
    			add_location(button, file$c, 206, 6, 4811);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, img);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*card*/ 1 && button_class_value !== (button_class_value = "mana-symbol " + (/*card*/ ctx[0].mana[/*mana*/ ctx[9]] ? 'active' : '') + " svelte-1a4o2rc")) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (dirty & /*card*/ 1 && button_aria_pressed_value !== (button_aria_pressed_value = /*card*/ ctx[0].mana[/*mana*/ ctx[9]] ? 'true' : 'false')) {
    				attr_dev(button, "aria-pressed", button_aria_pressed_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(206:4) {#each Object.keys(manaIcons) as mana}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let div3;
    	let div0;
    	let p;
    	let t1;
    	let button;
    	let fontawesomeicon;
    	let t2;
    	let div1;
    	let t3;
    	let div2;
    	let label;
    	let t5;
    	let input;
    	let current;
    	let mounted;
    	let dispose;
    	fontawesomeicon = new FontAwesomeIcon({ props: { icon: faTimes }, $$inline: true });
    	let each_value = Object.keys(/*manaIcons*/ ctx[1]);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			p = element("p");
    			p.textContent = "Land card(s)";
    			t1 = space();
    			button = element("button");
    			create_component(fontawesomeicon.$$.fragment);
    			t2 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t3 = space();
    			div2 = element("div");
    			label = element("label");
    			label.textContent = "Amount:";
    			t5 = space();
    			input = element("input");
    			set_style(p, "margin", "0.2rem 0 0.2rem 0");
    			add_location(p, file$c, 184, 6, 3816);
    			attr_dev(button, "aria-label", "Remove mana group");
    			attr_dev(button, "class", "remove-button svelte-1a4o2rc");
    			add_location(button, file$c, 199, 8, 4571);
    			attr_dev(div0, "class", "mana-card-header svelte-1a4o2rc");
    			add_location(div0, file$c, 183, 4, 3778);
    			attr_dev(div1, "class", "mana-symbols svelte-1a4o2rc");
    			add_location(div1, file$c, 204, 2, 4733);
    			attr_dev(label, "for", "manaAmount");
    			attr_dev(label, "class", "amount-label svelte-1a4o2rc");
    			add_location(label, file$c, 218, 8, 5238);
    			attr_dev(input, "id", "manaAmount");
    			attr_dev(input, "class", "amount-input svelte-1a4o2rc");
    			attr_dev(input, "type", "number");
    			attr_dev(input, "placeholder", "Amount");
    			attr_dev(input, "min", "0");
    			add_location(input, file$c, 219, 8, 5308);
    			attr_dev(div2, "class", "mana-card-header svelte-1a4o2rc");
    			add_location(div2, file$c, 217, 4, 5198);
    			attr_dev(div3, "class", "mana-card svelte-1a4o2rc");
    			add_location(div3, file$c, 182, 2, 3749);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div0, p);
    			append_dev(div0, t1);
    			append_dev(div0, button);
    			mount_component(fontawesomeicon, button, null);
    			append_dev(div3, t2);
    			append_dev(div3, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div1, null);
    				}
    			}

    			append_dev(div3, t3);
    			append_dev(div3, div2);
    			append_dev(div2, label);
    			append_dev(div2, t5);
    			append_dev(div2, input);
    			set_input_value(input, /*card*/ ctx[0].amount);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button, "click", /*remove*/ ctx[2], false, false, false, false),
    					listen_dev(input, "input", /*input_input_handler*/ ctx[5]),
    					listen_dev(input, "focus", selectInput$5, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*card, Object, manaIcons, toggleMana*/ 11) {
    				each_value = Object.keys(/*manaIcons*/ ctx[1]);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$9(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$9(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*card*/ 1 && to_number(input.value) !== /*card*/ ctx[0].amount) {
    				set_input_value(input, /*card*/ ctx[0].amount);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(fontawesomeicon);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function selectInput$5(event) {
    	event.target.select(); // Selects all text in the input upon focus
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ManaCard', slots, []);

    	const manaIcons = {
    		W: { icon: img$f, label: 'Plains' },
    		U: { icon: img$e, label: 'Swamp' },
    		B: { icon: img$d, label: 'Island' },
    		R: { icon: img$c, label: 'Mountain' },
    		G: { icon: img$b, label: 'Forest' },
    		C: { icon: img$a, label: 'Colorless' }
    	};

    	let dropdownOpen = false;
    	let buttonPosition = { top: 0, left: 0 };
    	const dispatch = createEventDispatcher();

    	let { card = {
    		mana: {
    			W: false,
    			U: false,
    			B: false,
    			R: false,
    			G: false,
    			C: false
    		},
    		amount: 0
    	} } = $$props;

    	// Dummy remove function (you'll need to implement the actual logic)
    	function remove() {
    		dispatch('remove');
    	}

    	function toggleMana(mana) {
    		$$invalidate(0, card.mana[mana] = !card.mana[mana], card);
    	}

    	const writable_props = ['card'];

    	Object_1$3.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ManaCard> was created with unknown prop '${key}'`);
    	});

    	const click_handler = mana => toggleMana(mana);

    	function input_input_handler() {
    		card.amount = to_number(this.value);
    		$$invalidate(0, card);
    	}

    	$$self.$$set = $$props => {
    		if ('card' in $$props) $$invalidate(0, card = $$props.card);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		onDestroy,
    		Popover,
    		createEventDispatcher,
    		faTimes,
    		FontAwesomeIcon,
    		WIcon: img$f,
    		UIcon: img$e,
    		BIcon: img$d,
    		RIcon: img$c,
    		GIcon: img$b,
    		CIcon: img$a,
    		manaIcons,
    		dropdownOpen,
    		buttonPosition,
    		dispatch,
    		card,
    		remove,
    		toggleMana,
    		selectInput: selectInput$5
    	});

    	$$self.$inject_state = $$props => {
    		if ('dropdownOpen' in $$props) dropdownOpen = $$props.dropdownOpen;
    		if ('buttonPosition' in $$props) buttonPosition = $$props.buttonPosition;
    		if ('card' in $$props) $$invalidate(0, card = $$props.card);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [card, manaIcons, remove, toggleMana, click_handler, input_input_handler];
    }

    class ManaCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { card: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ManaCard",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get card() {
    		throw new Error("<ManaCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set card(value) {
    		throw new Error("<ManaCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var img$9 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%23d0cac3%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-2%7bfill:%2304070e%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3ccircle class='cls-1' cx='50' cy='50' r='50'/%3e%3cpath class='cls-2' d='M23%2c52.43c0-9.79%2c2.06-18.81%2c6.19-27.07%2c5.12-10.24%2c12.12-15.36%2c21.01-15.36s15.67%2c4.36%2c20.61%2c13.06c4.13%2c7.19%2c6.19%2c15.54%2c6.19%2c25.05s-2.06%2c18.81-6.19%2c26.8c-5.03%2c10.06-12.04%2c15.08-21.01%2c15.08s-15.3-4.31-20.34-12.93c-4.31-7.36-6.46-15.58-6.46-24.65ZM34.31%2c47.98c0%2c12.93%2c1.93%2c22.98%2c5.79%2c30.17%2c2.69%2c5.03%2c6.15%2c7.54%2c10.37%2c7.54%2c10.15%2c0%2c15.22-10.51%2c15.22-31.52%2c0-9.24-.81-17.06-2.42-23.43-2.79-10.5-7.5-15.76-14.14-15.76-9.88%2c0-14.82%2c10.15-14.82%2c30.44v2.56Z'/%3e%3c/g%3e%3c/svg%3e";

    var img$8 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%23d0cac3%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-2%7bfill:%2304070e%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3cpath class='cls-1' d='M100%2c50c0%2c27.62-22.39%2c50-50%2c50S0%2c77.61%2c0%2c50%2c22.39%2c0%2c50%2c0s50%2c22.38%2c50%2c50Z'/%3e%3cpath class='cls-2' d='M55.68%2c10v64.11c0%2c7.67%2c3.23%2c11.5%2c9.69%2c11.5h1.68v4.39h-34.11v-4.39h2.14c6.25%2c0%2c9.37-3.83%2c9.37-11.5v-42.05c0-7.76-2.7-11.64-8.08-11.64h-3.43v-4.25h1.24c6.66%2c0%2c12.69-2.06%2c18.08-6.16h3.42Z'/%3e%3c/g%3e%3c/svg%3e";

    var img$7 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%23d0cac3%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-2%7bfill:%2304070e%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3cpath class='cls-1' d='M100%2c50c0%2c27.62-22.39%2c50-50%2c50S0%2c77.61%2c0%2c50%2c22.39%2c0%2c50%2c0s50%2c22.38%2c50%2c50Z'/%3e%3cpath class='cls-2' d='M77.44%2c70.1l-5.9%2c19.9H22.55v-4.25c2.38-2.65%2c7.59-8%2c15.65-16.05%2c4.85-4.85%2c9.65-9.97%2c14.41-15.37%2c2.38-2.65%2c4.21-4.94%2c5.49-6.86%2c2.84-4.11%2c4.25-8.32%2c4.25-12.62s-1.3-7.91-3.91-11.11c-2.61-3.2-5.97-4.81-10.09-4.81-8.87%2c0-15.82%2c6-20.85%2c17.98l-4.39-1.65c5.95-16.83%2c15.32-25.25%2c28.13-25.25%2c6.31%2c0%2c11.69%2c2.15%2c16.12%2c6.45%2c4.44%2c4.3%2c6.66%2c9.6%2c6.66%2c15.92%2c0%2c8.05-4.62%2c15.92-13.86%2c23.6l-9.6%2c7.96c-6.13%2c5.13-11.21%2c9.93-15.23%2c14.41-.28.27-.83.92-1.65%2c1.92h25.52c3.93%2c0%2c6.91-.78%2c8.92-2.34%2c1.74-1.37%2c3.43-3.98%2c5.08-7.82h4.25Z'/%3e%3c/g%3e%3c/svg%3e";

    var img$6 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%23d0cac3%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-2%7bfill:%2304070e%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3cpath class='cls-1' d='M100%2c50c0%2c27.62-22.39%2c50-50%2c50S0%2c77.61%2c0%2c50%2c22.39%2c0%2c50%2c0s50%2c22.38%2c50%2c50Z'/%3e%3cpath class='cls-2' d='M39.56%2c52.56l-2.02-3.77%2c1.34-.81c5.17-3.14%2c9.9-6.33%2c14.19-9.56%2c4.28-3.23%2c6.43-6.92%2c6.43-11.05%2c0-2.78-1.03-5.11-3.08-7-2.06-1.89-4.47-2.83-7.24-2.83-6.44%2c0-13.23%2c4-20.39%2c11.99l-3.35-2.56c7.45-11.32%2c16.57-16.97%2c27.34-16.97%2c4.76%2c0%2c8.79%2c1.17%2c12.12%2c3.5%2c3.77%2c2.61%2c5.66%2c6.15%2c5.66%2c10.64%2c0%2c3.23-1.35%2c6.37-4.04%2c9.43-1.53%2c1.8-4.23%2c4.13-8.08%2c7l-1.62%2c1.21c.72-.09%2c1.57-.13%2c2.56-.13%2c4.94%2c0%2c9%2c1.89%2c12.19%2c5.66%2c3.19%2c3.77%2c4.78%2c8.17%2c4.78%2c13.2%2c0%2c8.53-3.59%2c15.67-10.77%2c21.42-6.65%2c5.39-14.33%2c8.08-23.03%2c8.08-7.99%2c0-14.28-1.75-18.86-5.25l2.43-3.37c5.39%2c2.61%2c10.28%2c3.91%2c14.68%2c3.91%2c6.37%2c0%2c12.05-2.11%2c17.03-6.33%2c4.99-4.22%2c7.47-9.47%2c7.47-15.75%2c0-4.13-1.25-7.66-3.77-10.58-2.52-2.92-5.79-4.37-9.83-4.37-3.68%2c0-7.72%2c1.44-12.12%2c4.31Z'/%3e%3c/g%3e%3c/svg%3e";

    var img$5 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%23d0cac3%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-2%7bfill:%2304070e%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3cpath class='cls-1' d='M100%2c50c0%2c27.62-22.39%2c50-50%2c50S0%2c77.61%2c0%2c50%2c22.39%2c0%2c50%2c0s50%2c22.38%2c50%2c50Z'/%3e%3cpath class='cls-2' d='M64.27%2c67.36v6.72c0%2c7.68%2c2.7%2c11.53%2c8.09%2c11.53h2.33v4.39h-32.66v-4.39h2.61c5.3%2c0%2c7.96-3.8%2c7.96-11.39v-6.86H19.81v-6.86L54.39%2c10h9.88v51.59h.82c3.38%2c0%2c5.85-2.61%2c7.41-7.82h4.12l-1.92%2c13.58h-10.42ZM52.6%2c61.59V20.13l-27.89%2c41.46h27.89Z'/%3e%3c/g%3e%3c/svg%3e";

    var img$4 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%23d0cac3%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-2%7bfill:%2304070e%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3cpath class='cls-1' d='M100%2c50c0%2c27.62-22.39%2c50-50%2c50S0%2c77.61%2c0%2c50%2c22.39%2c0%2c50%2c0s50%2c22.38%2c50%2c50Z'/%3e%3cpath class='cls-2' d='M34.96%2c11.35h28.94c3.75%2c0%2c5.99-.45%2c6.7-1.35h4.16l-2.42%2c10.92h-35.31l-3.41%2c15.79c5.13-2.07%2c9.67-3.1%2c13.62-3.1%2c7.73%2c0%2c14.25%2c2.59%2c19.56%2c7.76%2c5.3%2c5.17%2c7.96%2c11.62%2c7.96%2c19.36%2c0%2c9-3.46%2c16.24-10.39%2c21.72-6.38%2c5.04-14.16%2c7.55-23.34%2c7.55-5.39%2c0-10.66-.81-15.79-2.43l1.62-4.05c4.32%2c1.17%2c8.14%2c1.75%2c11.47%2c1.75%2c6.65%2c0%2c12.48-2.18%2c17.47-6.54%2c4.99-4.36%2c7.49-9.83%2c7.49-16.39%2c0-5.67-1.84-10.32-5.53-13.96-3.69-3.65-8.37-5.47-14.03-5.47-5.21%2c0-10.07%2c1.8-14.57%2c5.4l-2.7-.54%2c8.5-36.42Z'/%3e%3c/g%3e%3c/svg%3e";

    var img$3 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%23d0cac3%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-2%7bfill:%2304070e%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3cpath class='cls-1' d='M100%2c50c0%2c27.62-22.39%2c50-50%2c50S0%2c77.61%2c0%2c50%2c22.39%2c0%2c50%2c0s50%2c22.38%2c50%2c50Z'/%3e%3cpath class='cls-2' d='M36.58%2c44.67c5.93-5.58%2c11.91-8.36%2c17.94-8.36%2c6.56%2c0%2c11.83%2c2.61%2c15.79%2c7.82%2c3.68%2c4.77%2c5.53%2c10.52%2c5.53%2c17.27%2c0%2c7.38-2.16%2c13.85-6.47%2c19.42-4.77%2c6.11-10.7%2c9.17-17.81%2c9.17-8.55%2c0-15.38-3.69-20.5-11.06-4.59-6.48-6.88-14.17-6.88-23.07%2c0-9.44%2c2.61-18.14%2c7.82-26.1%2c5.21-7.96%2c12.18-13.6%2c20.91-16.93%2c4.95-1.89%2c10.17-2.84%2c15.65-2.84v4.18c-11.69.63-20.41%2c5.31-26.17%2c14.03-2.96%2c4.5-4.9%2c9.98-5.79%2c16.46ZM35.77%2c52.77c-.09%2c1.62-.13%2c3.24-.13%2c4.86%2c0%2c6.2%2c1.08%2c11.96%2c3.24%2c17.27%2c2.79%2c6.92%2c6.88%2c10.38%2c12.28%2c10.38%2c4.67%2c0%2c8.18-2.38%2c10.52-7.15%2c1.8-3.68%2c2.7-8.13%2c2.7-13.36%2c0-5.57-.86-10.34-2.56-14.3-2.34-5.4-5.94-8.09-10.79-8.09-5.93%2c0-11.02%2c3.46-15.24%2c10.39Z'/%3e%3c/g%3e%3c/svg%3e";

    var img$2 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%23d0cac3%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-2%7bfill:%2304070e%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3cpath class='cls-1' d='M100%2c50c0%2c27.62-22.39%2c50-50%2c50S0%2c77.61%2c0%2c50%2c22.39%2c0%2c50%2c0s50%2c22.38%2c50%2c50Z'/%3e%3cpath class='cls-2' d='M53.49%2c90h-11.64v-1.24c0-7.4%2c2.33-16.66%2c6.98-27.81%2c7.04-16.8%2c13.52-29.67%2c19.45-38.62l.82-1.23h-27.26c-3.93%2c0-6.92.82-8.97%2c2.46-2.06%2c1.64-3.58%2c4.39-4.59%2c8.22h-4.52l4.93-21.78h2.88c1.73.91%2c4.74%2c1.37%2c9.04%2c1.37h35.61v6.16c-1.28%2c1.83-2.92%2c4.75-4.93%2c8.77-3.84%2c7.49-7.35%2c16.21-10.55%2c26.16-4.75%2c14.7-7.17%2c27.21-7.26%2c37.53Z'/%3e%3c/g%3e%3c/svg%3e";

    var img$1 = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%23d0cac3%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-2%7bfill:%2304070e%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3cpath class='cls-1' d='M100%2c50c0%2c27.62-22.39%2c50-50%2c50S0%2c77.61%2c0%2c50%2c22.39%2c0%2c50%2c0s50%2c22.38%2c50%2c50Z'/%3e%3cpath class='cls-2' d='M40.96%2c49.46l-1.75-1.21c-5.12-3.5-8.49-6.33-10.11-8.49-2.07-2.69-3.1-5.83-3.1-9.43%2c0-6.11%2c2.56-11.09%2c7.68-14.95%2c4.76-3.59%2c10.28-5.39%2c16.57-5.39%2c5.92%2c0%2c11.18%2c1.57%2c15.76%2c4.71%2c5.2%2c3.5%2c7.81%2c8.13%2c7.81%2c13.88%2c0%2c7-4.9%2c12.66-14.68%2c16.97%2c11.13%2c5.39%2c16.7%2c12.88%2c16.7%2c22.49%2c0%2c6.91-2.65%2c12.39-7.95%2c16.43-4.75%2c3.68-10.73%2c5.52-17.91%2c5.52-6.73%2c0-12.53-1.7-17.38-5.12-5.57-3.86-8.35-8.98-8.35-15.35s2.96-11.63%2c8.89-15.76c1.62-1.07%2c4.22-2.51%2c7.81-4.31ZM45.54%2c51.38c-8.08%2c3.68-12.11%2c9.47-12.11%2c17.36%2c0%2c5.11%2c1.63%2c9.22%2c4.92%2c12.31%2c3.28%2c3.1%2c7.47%2c4.64%2c12.59%2c4.64%2c4.57%2c0%2c8.46-1.23%2c11.65-3.7%2c3.19-2.46%2c4.78-5.89%2c4.78-10.28%2c0-6.63-4.37-12-13.1-16.12l-8.73-4.22ZM54.57%2c43.4c7.09-3.14%2c10.64-7.85%2c10.64-14.14%2c0-4.31-1.51-7.77-4.51-10.38-3.01-2.6-6.71-3.91-11.11-3.91-3.68%2c0-6.87.99-9.56%2c2.96-2.96%2c2.15-4.44%2c5.03-4.44%2c8.62%2c0%2c4.4%2c2.06%2c7.95%2c6.2%2c10.64.8.54%2c4.4%2c2.29%2c10.78%2c5.25l2.02.94Z'/%3e%3c/g%3e%3c/svg%3e";

    var img = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='UTF-8'%3f%3e%3csvg id='Layer_2' xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100'%3e%3cdefs%3e%3cstyle%3e.cls-1%7bfill:%23d0cac3%3b%7d.cls-1%2c.cls-2%7bstroke-width:0px%3b%7d.cls-3%7bfill:none%3bstroke:%2304070e%3bstroke-linecap:round%3bstroke-miterlimit:10%3bstroke-width:6px%3b%7d.cls-2%7bfill:%2304070e%3b%7d%3c/style%3e%3c/defs%3e%3cg id='Layer_1-2'%3e%3cpath class='cls-1' d='M100%2c50c0%2c27.62-22.39%2c50-50%2c50S0%2c77.61%2c0%2c50%2c22.39%2c0%2c50%2c0s50%2c22.38%2c50%2c50Z'/%3e%3cpath class='cls-2' d='M45.59%2c54.65c-4.92%2c4.63-9.89%2c6.94-14.89%2c6.94-5.45%2c0-9.82-2.16-13.1-6.5-3.06-3.96-4.59-8.73-4.59-14.33%2c0-6.05%2c1.79-11.45%2c5.37-16.23%2c3.88-5.15%2c8.77-7.73%2c14.67-7.73%2c7.17%2c0%2c12.88%2c3.1%2c17.13%2c9.29%2c3.81%2c5.45%2c5.71%2c11.9%2c5.71%2c19.37%2c0%2c10.6-3.51%2c19.53-10.52%2c26.81-7.02%2c7.28-15.79%2c10.95-26.31%2c11.02v-3.47c3.21-.15%2c5.78-.52%2c7.73-1.12%2c10.74-3.28%2c17.02-11.31%2c18.8-24.07ZM46.27%2c47.93c.07-1.42.11-2.76.11-4.03%2c0-5.22-.89-10-2.69-14.33-2.39-5.75-5.82-8.62-10.3-8.62-3.89%2c0-6.75%2c1.98-8.62%2c5.94-1.49%2c3.06-2.24%2c6.76-2.24%2c11.08%2c0%2c4.63.71%2c8.58%2c2.13%2c11.87%2c1.94%2c4.48%2c4.93%2c6.72%2c8.96%2c6.72%2c4.92%2c0%2c9.14-2.87%2c12.65-8.62Z'/%3e%3cline class='cls-3' x1='78.74' y1='35.87' x2='78.74' y2='64.24'/%3e%3cline class='cls-3' x1='64.56' y1='50.05' x2='92.93' y2='50.05'/%3e%3c/g%3e%3c/svg%3e";

    var css_248z$b = "";
    styleInject(css_248z$b);

    /* src\RampCard.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1$2 } = globals;
    const file$b = "src\\RampCard.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	child_ctx[21] = list;
    	child_ctx[22] = i;
    	return child_ctx;
    }

    // (254:24) {:else}
    function create_else_block$5(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = /*manaIcons*/ ctx[3][/*mana*/ ctx[18]].icon)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "" + (/*mana*/ ctx[18] + " mana icon"));
    			attr_dev(img, "class", "mana-icon svelte-ka1w7n");
    			add_location(img, file$b, 254, 28, 7248);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(254:24) {:else}",
    		ctx
    	});

    	return block;
    }

    // (252:24) {#if mana === 'ANY'}
    function create_if_block$7(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = /*getAnyIcon*/ ctx[6](/*card*/ ctx[0].TotalManaCost.ANY))) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "" + (/*mana*/ ctx[18] + " mana icon"));
    			attr_dev(img, "class", "mana-icon svelte-ka1w7n");
    			add_location(img, file$b, 252, 28, 7096);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*card*/ 1 && !src_url_equal(img.src, img_src_value = /*getAnyIcon*/ ctx[6](/*card*/ ctx[0].TotalManaCost.ANY))) {
    				attr_dev(img, "src", img_src_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(252:24) {#if mana === 'ANY'}",
    		ctx
    	});

    	return block;
    }

    // (249:12) {#each Object.keys(manaIcons) as mana}
    function create_each_block_1$4(ctx) {
    	let div;
    	let label;
    	let t0;
    	let t1;
    	let input;
    	let input_disabled_value;
    	let t2;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*mana*/ ctx[18] === 'ANY') return create_if_block$7;
    		return create_else_block$5;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	function input_input_handler() {
    		/*input_input_handler*/ ctx[8].call(input, /*mana*/ ctx[18]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			label = element("label");
    			if_block.c();
    			t0 = text("\r\n                         :");
    			t1 = space();
    			input = element("input");
    			t2 = space();
    			attr_dev(label, "for", "" + (/*uniqueId*/ ctx[2] + "-" + /*mana*/ ctx[18] + "-cost"));
    			attr_dev(label, "class", "svelte-ka1w7n");
    			add_location(label, file$b, 250, 20, 6984);
    			attr_dev(input, "id", "" + (/*uniqueId*/ ctx[2] + "-" + /*mana*/ ctx[18] + "-cost"));
    			attr_dev(input, "type", "number");
    			attr_dev(input, "min", "0");
    			input.disabled = input_disabled_value = /*card*/ ctx[0].isSignet && /*mana*/ ctx[18] !== 'ANY';
    			attr_dev(input, "class", "svelte-ka1w7n");
    			add_location(input, file$b, 258, 20, 7439);
    			attr_dev(div, "class", "mana-input svelte-ka1w7n");
    			add_location(div, file$b, 249, 16, 6938);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, label);
    			if_block.m(label, null);
    			append_dev(label, t0);
    			append_dev(div, t1);
    			append_dev(div, input);
    			set_input_value(input, /*card*/ ctx[0].TotalManaCost[/*mana*/ ctx[18]]);
    			append_dev(div, t2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", input_input_handler),
    					listen_dev(input, "focus", selectInput$4, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if_block.p(ctx, dirty);

    			if (dirty & /*card*/ 1 && input_disabled_value !== (input_disabled_value = /*card*/ ctx[0].isSignet && /*mana*/ ctx[18] !== 'ANY')) {
    				prop_dev(input, "disabled", input_disabled_value);
    			}

    			if (dirty & /*card, Object, manaIcons*/ 9 && to_number(input.value) !== /*card*/ ctx[0].TotalManaCost[/*mana*/ ctx[18]]) {
    				set_input_value(input, /*card*/ ctx[0].TotalManaCost[/*mana*/ ctx[18]]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$4.name,
    		type: "each",
    		source: "(249:12) {#each Object.keys(manaIcons) as mana}",
    		ctx
    	});

    	return block;
    }

    // (268:8) {#each Object.keys(manaIcons).filter(mana => mana !== 'ANY') as mana}
    function create_each_block$8(ctx) {
    	let button;
    	let img;
    	let img_src_value;
    	let t;
    	let button_class_value;
    	let button_aria_pressed_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[9](/*mana*/ ctx[18]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			img = element("img");
    			t = space();
    			if (!src_url_equal(img.src, img_src_value = /*manaIcons*/ ctx[3][/*mana*/ ctx[18]].icon)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "" + (/*mana*/ ctx[18] + " mana icon"));
    			attr_dev(img, "class", "mana-icon-large svelte-ka1w7n");
    			add_location(img, file$b, 274, 16, 8278);

    			attr_dev(button, "class", button_class_value = "mana-symbol " + (/*card*/ ctx[0].ColorsCanProduce[/*mana*/ ctx[18]] === 1
    			? 'active'
    			: '') + " svelte-ka1w7n");

    			attr_dev(button, "tabindex", "0");
    			attr_dev(button, "aria-label", /*manaIcons*/ ctx[3][/*mana*/ ctx[18]].label + ' mana');

    			attr_dev(button, "aria-pressed", button_aria_pressed_value = /*card*/ ctx[0].ColorsCanProduce[/*mana*/ ctx[18]] === 1
    			? 'true'
    			: 'false');

    			add_location(button, file$b, 268, 12, 7925);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, img);
    			append_dev(button, t);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*card*/ 1 && button_class_value !== (button_class_value = "mana-symbol " + (/*card*/ ctx[0].ColorsCanProduce[/*mana*/ ctx[18]] === 1
    			? 'active'
    			: '') + " svelte-ka1w7n")) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (dirty & /*card*/ 1 && button_aria_pressed_value !== (button_aria_pressed_value = /*card*/ ctx[0].ColorsCanProduce[/*mana*/ ctx[18]] === 1
    			? 'true'
    			: 'false')) {
    				attr_dev(button, "aria-pressed", button_aria_pressed_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(268:8) {#each Object.keys(manaIcons).filter(mana => mana !== 'ANY') as mana}",
    		ctx
    	});

    	return block;
    }

    // (302:12) 
    function create_trigger_slot$5(ctx) {
    	let button;
    	let fontawesomeicon;
    	let current;
    	let mounted;
    	let dispose;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: {
    				style: "height: 1.2em; vertical-align: -0.155em; color:#0066e9;",
    				icon: faQuestionCircle
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(fontawesomeicon.$$.fragment);
    			attr_dev(button, "id", "moreInfo");
    			attr_dev(button, "class", "moreInfo");
    			attr_dev(button, "slot", "trigger");
    			attr_dev(button, "tabindex", "-1");
    			add_location(button, file$b, 301, 12, 9816);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(fontawesomeicon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_1*/ ctx[14], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(fontawesomeicon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_trigger_slot$5.name,
    		type: "slot",
    		source: "(302:12) ",
    		ctx
    	});

    	return block;
    }

    // (305:12) 
    function create_content_slot$5(ctx) {
    	let div;
    	let p;
    	let t1;
    	let ol;
    	let li0;
    	let t3;
    	let li1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			p.textContent = "Signet's are a complex, as we have to simulate what mana is used to pay the 1 colorless.";
    			t1 = space();
    			ol = element("ol");
    			li0 = element("li");
    			li0.textContent = "If there is mana that can only produce colorless available, that will be used to pay the 1.";
    			t3 = space();
    			li1 = element("li");
    			li1.textContent = "If there is no colorless mana mana available, then the color you can produce the most of is used to pay the 1.";
    			attr_dev(p, "class", "popover-content svelte-ka1w7n");
    			add_location(p, file$b, 305, 16, 10127);
    			add_location(li0, file$b, 307, 18, 10288);
    			add_location(li1, file$b, 308, 18, 10408);
    			add_location(ol, file$b, 306, 16, 10264);
    			attr_dev(div, "slot", "content");
    			add_location(div, file$b, 304, 12, 10089);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			append_dev(div, t1);
    			append_dev(div, ol);
    			append_dev(ol, li0);
    			append_dev(ol, t3);
    			append_dev(ol, li1);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot$5.name,
    		type: "slot",
    		source: "(305:12) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let div10;
    	let div1;
    	let div0;
    	let label0;
    	let t1;
    	let input0;
    	let t2;
    	let button;
    	let fontawesomeicon;
    	let t3;
    	let div3;
    	let p0;
    	let t5;
    	let div2;
    	let t6;
    	let div5;
    	let p1;
    	let t8;
    	let div4;
    	let t9;
    	let div6;
    	let label1;
    	let t10;
    	let t11;
    	let input1;
    	let input1_disabled_value;
    	let t12;
    	let div7;
    	let label2;
    	let t13;
    	let t14;
    	let input2;
    	let input2_disabled_value;
    	let t15;
    	let div8;
    	let label3;
    	let t16;
    	let t17;
    	let input3;
    	let t18;
    	let popover;
    	let updating_show;
    	let t19;
    	let hr;
    	let t20;
    	let div9;
    	let label4;
    	let t21;
    	let t22;
    	let input4;
    	let current;
    	let mounted;
    	let dispose;
    	fontawesomeicon = new FontAwesomeIcon({ props: { icon: faTimes }, $$inline: true });
    	let each_value_1 = Object.keys(/*manaIcons*/ ctx[3]);
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$4(get_each_context_1$4(ctx, each_value_1, i));
    	}

    	let each_value = Object.keys(/*manaIcons*/ ctx[3]).filter(func$2);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	function popover_show_binding(value) {
    		/*popover_show_binding*/ ctx[15](value);
    	}

    	let popover_props = {
    		placement: "top",
    		$$slots: {
    			content: [create_content_slot$5],
    			trigger: [create_trigger_slot$5]
    		},
    		$$scope: { ctx }
    	};

    	if (/*showPopover*/ ctx[1] !== void 0) {
    		popover_props.show = /*showPopover*/ ctx[1];
    	}

    	popover = new Popover({ props: popover_props, $$inline: true });
    	binding_callbacks.push(() => bind(popover, 'show', popover_show_binding));

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			label0 = element("label");
    			label0.textContent = "Ramp card(s)";
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			button = element("button");
    			create_component(fontawesomeicon.$$.fragment);
    			t3 = space();
    			div3 = element("div");
    			p0 = element("p");
    			p0.textContent = "Ramp mana cost (cmc):";
    			t5 = space();
    			div2 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t6 = space();
    			div5 = element("div");
    			p1 = element("p");
    			p1.textContent = "Colors ramp can produce:";
    			t8 = space();
    			div4 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t9 = space();
    			div6 = element("div");
    			label1 = element("label");
    			t10 = text("Total mana ramp can produce:");
    			t11 = space();
    			input1 = element("input");
    			t12 = space();
    			div7 = element("div");
    			label2 = element("label");
    			t13 = text("Mana is available turn played:");
    			t14 = space();
    			input2 = element("input");
    			t15 = space();
    			div8 = element("div");
    			label3 = element("label");
    			t16 = text("Is signet:");
    			t17 = space();
    			input3 = element("input");
    			t18 = space();
    			create_component(popover.$$.fragment);
    			t19 = space();
    			hr = element("hr");
    			t20 = space();
    			div9 = element("div");
    			label4 = element("label");
    			t21 = text("Amount of ramp cards with these same attributes:");
    			t22 = space();
    			input4 = element("input");
    			attr_dev(label0, "for", "title-input");
    			add_location(label0, file$b, 236, 8, 6363);
    			attr_dev(input0, "aria-label", "ramp card title");
    			attr_dev(input0, "class", "title-input svelte-ka1w7n");
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "placeholder", "Optional name...");
    			add_location(input0, file$b, 237, 8, 6418);
    			attr_dev(div0, "class", "one-line svelte-ka1w7n");
    			add_location(div0, file$b, 235, 4, 6331);
    			attr_dev(button, "aria-label", "Remove ramp card");
    			attr_dev(button, "class", "remove-button");
    			add_location(button, file$b, 240, 6, 6593);
    			attr_dev(div1, "class", "ramp-card-header svelte-ka1w7n");
    			add_location(div1, file$b, 234, 4, 6295);
    			attr_dev(p0, "class", "mana-label svelte-ka1w7n");
    			add_location(p0, file$b, 246, 8, 6786);
    			attr_dev(div2, "class", "mana-inputs svelte-ka1w7n");
    			add_location(div2, file$b, 247, 8, 6843);
    			attr_dev(div3, "class", "mana-section");
    			add_location(div3, file$b, 245, 4, 6750);
    			attr_dev(p1, "class", "mana-label svelte-ka1w7n");
    			add_location(p1, file$b, 265, 8, 7748);
    			attr_dev(div4, "class", "mana-input svelte-ka1w7n");
    			add_location(div4, file$b, 266, 8, 7808);
    			attr_dev(div5, "class", "mana-section");
    			add_location(div5, file$b, 264, 4, 7712);
    			attr_dev(label1, "for", "" + (/*uniqueId*/ ctx[2] + "-can-produce"));
    			attr_dev(label1, "class", "can-produce-label");
    			add_location(label1, file$b, 282, 8, 8465);
    			attr_dev(input1, "id", "" + (/*uniqueId*/ ctx[2] + "-can-produce"));
    			attr_dev(input1, "class", "can-produce-input svelte-ka1w7n");
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "min", "0");
    			input1.disabled = input1_disabled_value = /*card*/ ctx[0].isSignet;
    			add_location(input1, file$b, 283, 8, 8600);
    			attr_dev(div6, "class", "one-line svelte-ka1w7n");
    			add_location(div6, file$b, 281, 4, 8433);
    			attr_dev(label2, "for", "" + (/*uniqueId*/ ctx[2] + "-available-turn-played"));
    			attr_dev(label2, "class", "available-turn-played-label");
    			add_location(label2, file$b, 292, 8, 9131);
    			attr_dev(input2, "id", "" + (/*uniqueId*/ ctx[2] + "-available-turn-played"));
    			attr_dev(input2, "type", "checkbox");
    			input2.disabled = input2_disabled_value = /*card*/ ctx[0].isSignet;
    			attr_dev(input2, "class", "svelte-ka1w7n");
    			add_location(input2, file$b, 293, 8, 9288);
    			attr_dev(div7, "class", "one-line svelte-ka1w7n");
    			add_location(div7, file$b, 291, 4, 9099);
    			attr_dev(label3, "for", "" + (/*uniqueId*/ ctx[2] + "-is-signet"));
    			attr_dev(label3, "class", "is-signet-label");
    			add_location(label3, file$b, 297, 8, 9573);
    			attr_dev(input3, "id", "" + (/*uniqueId*/ ctx[2] + "-is-signet"));
    			attr_dev(input3, "type", "checkbox");
    			attr_dev(input3, "class", "svelte-ka1w7n");
    			add_location(input3, file$b, 298, 8, 9660);
    			attr_dev(div8, "class", "one-line svelte-ka1w7n");
    			add_location(div8, file$b, 296, 4, 9541);
    			attr_dev(hr, "class", "secondary-divider");
    			set_style(hr, "margin", "0px");
    			set_style(hr, "background-color", "#cecece");
    			add_location(hr, file$b, 314, 0, 10608);
    			attr_dev(label4, "for", "" + (/*uniqueId*/ ctx[2] + "-amount"));
    			attr_dev(label4, "class", "amount-label");
    			set_style(label4, "max-width", "200px");
    			add_location(label4, file$b, 316, 8, 10728);
    			attr_dev(input4, "id", "" + (/*uniqueId*/ ctx[2] + "-amount"));
    			attr_dev(input4, "class", "amount-input svelte-ka1w7n");
    			attr_dev(input4, "type", "number");
    			attr_dev(input4, "min", "0");
    			add_location(input4, file$b, 317, 8, 10899);
    			attr_dev(div9, "class", "amount-section svelte-ka1w7n");
    			add_location(div9, file$b, 315, 4, 10690);
    			attr_dev(div10, "class", "ramp-card svelte-ka1w7n");
    			add_location(div10, file$b, 233, 0, 6266);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, div1);
    			append_dev(div1, div0);
    			append_dev(div0, label0);
    			append_dev(div0, t1);
    			append_dev(div0, input0);
    			set_input_value(input0, /*card*/ ctx[0].title);
    			append_dev(div1, t2);
    			append_dev(div1, button);
    			mount_component(fontawesomeicon, button, null);
    			append_dev(div10, t3);
    			append_dev(div10, div3);
    			append_dev(div3, p0);
    			append_dev(div3, t5);
    			append_dev(div3, div2);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				if (each_blocks_1[i]) {
    					each_blocks_1[i].m(div2, null);
    				}
    			}

    			append_dev(div10, t6);
    			append_dev(div10, div5);
    			append_dev(div5, p1);
    			append_dev(div5, t8);
    			append_dev(div5, div4);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div4, null);
    				}
    			}

    			append_dev(div10, t9);
    			append_dev(div10, div6);
    			append_dev(div6, label1);
    			append_dev(label1, t10);
    			append_dev(div6, t11);
    			append_dev(div6, input1);
    			set_input_value(input1, /*card*/ ctx[0].CanProduce);
    			append_dev(div10, t12);
    			append_dev(div10, div7);
    			append_dev(div7, label2);
    			append_dev(label2, t13);
    			append_dev(div7, t14);
    			append_dev(div7, input2);
    			input2.checked = /*card*/ ctx[0].AvailableTurnPlayed;
    			append_dev(div10, t15);
    			append_dev(div10, div8);
    			append_dev(div8, label3);
    			append_dev(label3, t16);
    			append_dev(div8, t17);
    			append_dev(div8, input3);
    			input3.checked = /*card*/ ctx[0].isSignet;
    			append_dev(div8, t18);
    			mount_component(popover, div8, null);
    			append_dev(div10, t19);
    			append_dev(div10, hr);
    			append_dev(div10, t20);
    			append_dev(div10, div9);
    			append_dev(div9, label4);
    			append_dev(label4, t21);
    			append_dev(div9, t22);
    			append_dev(div9, input4);
    			set_input_value(input4, /*card*/ ctx[0].amount);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[7]),
    					listen_dev(input0, "focus", selectInput$4, false, false, false, false),
    					listen_dev(button, "click", /*remove*/ ctx[4], false, false, false, false),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[10]),
    					listen_dev(input1, "focus", selectInput$4, false, false, false, false),
    					listen_dev(input2, "change", /*input2_change_handler*/ ctx[11]),
    					listen_dev(input2, "change", /*change_handler*/ ctx[12], false, false, false, false),
    					listen_dev(input3, "change", /*input3_change_handler*/ ctx[13]),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[16]),
    					listen_dev(input4, "focus", selectInput$4, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*card*/ 1 && input0.value !== /*card*/ ctx[0].title) {
    				set_input_value(input0, /*card*/ ctx[0].title);
    			}

    			if (dirty & /*uniqueId, Object, manaIcons, card, selectInput, getAnyIcon*/ 77) {
    				each_value_1 = Object.keys(/*manaIcons*/ ctx[3]);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$4(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$4(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div2, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*card, Object, manaIcons, toggleManaProduce*/ 41) {
    				each_value = Object.keys(/*manaIcons*/ ctx[3]).filter(func$2);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div4, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (!current || dirty & /*card*/ 1 && input1_disabled_value !== (input1_disabled_value = /*card*/ ctx[0].isSignet)) {
    				prop_dev(input1, "disabled", input1_disabled_value);
    			}

    			if (dirty & /*card*/ 1 && to_number(input1.value) !== /*card*/ ctx[0].CanProduce) {
    				set_input_value(input1, /*card*/ ctx[0].CanProduce);
    			}

    			if (!current || dirty & /*card*/ 1 && input2_disabled_value !== (input2_disabled_value = /*card*/ ctx[0].isSignet)) {
    				prop_dev(input2, "disabled", input2_disabled_value);
    			}

    			if (dirty & /*card*/ 1) {
    				input2.checked = /*card*/ ctx[0].AvailableTurnPlayed;
    			}

    			if (dirty & /*card*/ 1) {
    				input3.checked = /*card*/ ctx[0].isSignet;
    			}

    			const popover_changes = {};

    			if (dirty & /*$$scope, showPopover*/ 8388610) {
    				popover_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_show && dirty & /*showPopover*/ 2) {
    				updating_show = true;
    				popover_changes.show = /*showPopover*/ ctx[1];
    				add_flush_callback(() => updating_show = false);
    			}

    			popover.$set(popover_changes);

    			if (dirty & /*card*/ 1 && to_number(input4.value) !== /*card*/ ctx[0].amount) {
    				set_input_value(input4, /*card*/ ctx[0].amount);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			transition_in(popover.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			transition_out(popover.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			destroy_component(fontawesomeicon);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			destroy_component(popover);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function selectInput$4(event) {
    	event.target.select(); // Selects all text in the input upon focus
    }

    const func$2 = mana => mana !== 'ANY';

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('RampCard', slots, []);
    	let showPopover = false;
    	const uniqueId = `ramp-card-${Date.now()}`; // Generate a unique ID using current date/time

    	const manaIcons = {
    		W: { icon: img$f, label: 'Plains' },
    		U: { icon: img$e, label: 'Swamp' },
    		B: { icon: img$d, label: 'Island' },
    		R: { icon: img$c, label: 'Mountain' },
    		G: { icon: img$b, label: 'Forest' },
    		C: { icon: img$a, label: 'Colorless' },
    		ANY: [
    			img$9,
    			img$8,
    			img$7,
    			img$6,
    			img$5,
    			img$4,
    			img$3,
    			img$2,
    			img$1,
    			img
    		]
    	};

    	const dispatch = createEventDispatcher();

    	let { card = {
    		title: '',
    		TotalManaCost: {
    			W: 0,
    			U: 0,
    			B: 0,
    			R: 0,
    			G: 0,
    			C: 0,
    			ANY: 0
    		},
    		ColorsCanProduce: {
    			W: 0,
    			U: 0,
    			B: 0,
    			R: 0,
    			G: 0,
    			C: 0,
    			ANY: 0
    		},
    		CanProduce: 0,
    		AbilityCost: 0,
    		AvailableTurnPlayed: 0,
    		amount: 0,
    		isSignet: false, // New property to indicate if the card is a signet
    		
    	} } = $$props;

    	function remove() {
    		dispatch('remove');
    	}

    	function toggleManaProduce(mana) {
    		$$invalidate(0, card.ColorsCanProduce[mana] = card.ColorsCanProduce[mana] === 1 ? 0 : 1, card);

    		$$invalidate(
    			0,
    			card.ColorsCanProduce.ANY = Object.values(card.ColorsCanProduce).some(value => value === 1)
    			? 1
    			: 0,
    			card
    		);
    	}

    	function getAnyIcon(value) {
    		if (value <= 0) return manaIcons.ANY[0];
    		if (value === 1) return manaIcons.ANY[1];
    		if (value === 2) return manaIcons.ANY[2];
    		if (value === 3) return manaIcons.ANY[3];
    		if (value === 4) return manaIcons.ANY[4];
    		if (value === 5) return manaIcons.ANY[5];
    		if (value === 6) return manaIcons.ANY[6];
    		if (value === 7) return manaIcons.ANY[7];
    		if (value === 8) return manaIcons.ANY[8];
    		if (value >= 9) return manaIcons.ANY[9];
    		return manaIcons.ANY[0]; // Default to AnyIcon0 if none of the conditions match
    	}

    	const writable_props = ['card'];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<RampCard> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		card.title = this.value;
    		$$invalidate(0, card);
    	}

    	function input_input_handler(mana) {
    		card.TotalManaCost[mana] = to_number(this.value);
    		$$invalidate(0, card);
    	}

    	const click_handler = mana => toggleManaProduce(mana);

    	function input1_input_handler() {
    		card.CanProduce = to_number(this.value);
    		$$invalidate(0, card);
    	}

    	function input2_change_handler() {
    		card.AvailableTurnPlayed = this.checked;
    		$$invalidate(0, card);
    	}

    	const change_handler = () => $$invalidate(0, card.AvailableTurnPlayed = card.AvailableTurnPlayed ? 1 : 0, card);

    	function input3_change_handler() {
    		card.isSignet = this.checked;
    		$$invalidate(0, card);
    	}

    	const click_handler_1 = () => $$invalidate(1, showPopover = !showPopover);

    	function popover_show_binding(value) {
    		showPopover = value;
    		$$invalidate(1, showPopover);
    	}

    	function input4_input_handler() {
    		card.amount = to_number(this.value);
    		$$invalidate(0, card);
    	}

    	$$self.$$set = $$props => {
    		if ('card' in $$props) $$invalidate(0, card = $$props.card);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		faTimes,
    		FontAwesomeIcon,
    		Popover,
    		faQuestionCircle,
    		WIcon: img$f,
    		UIcon: img$e,
    		BIcon: img$d,
    		RIcon: img$c,
    		GIcon: img$b,
    		CIcon: img$a,
    		AnyIcon0: img$9,
    		AnyIcon1: img$8,
    		AnyIcon2: img$7,
    		AnyIcon3: img$6,
    		AnyIcon4: img$5,
    		AnyIcon5: img$4,
    		AnyIcon6: img$3,
    		AnyIcon7: img$2,
    		AnyIcon8: img$1,
    		AnyIcon9: img,
    		showPopover,
    		uniqueId,
    		manaIcons,
    		dispatch,
    		card,
    		remove,
    		toggleManaProduce,
    		selectInput: selectInput$4,
    		getAnyIcon
    	});

    	$$self.$inject_state = $$props => {
    		if ('showPopover' in $$props) $$invalidate(1, showPopover = $$props.showPopover);
    		if ('card' in $$props) $$invalidate(0, card = $$props.card);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*card*/ 1) {
    			// Update the card object to include CustomRamp: 'signet' if isSignet is true
    			if (card.isSignet) {
    				$$invalidate(0, card.CustomRamp = 'signet', card);

    				Object.keys(card.TotalManaCost).forEach(key => {
    					$$invalidate(0, card.TotalManaCost[key] = 0, card);
    				});

    				$$invalidate(0, card.TotalManaCost.ANY = 2, card);
    				$$invalidate(0, card.CanProduce = 2, card);
    				$$invalidate(0, card.AvailableTurnPlayed = 1, card);
    			} else {
    				delete card.CustomRamp;
    			}
    		}
    	};

    	return [
    		card,
    		showPopover,
    		uniqueId,
    		manaIcons,
    		remove,
    		toggleManaProduce,
    		getAnyIcon,
    		input0_input_handler,
    		input_input_handler,
    		click_handler,
    		input1_input_handler,
    		input2_change_handler,
    		change_handler,
    		input3_change_handler,
    		click_handler_1,
    		popover_show_binding,
    		input4_input_handler
    	];
    }

    class RampCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, { card: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "RampCard",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get card() {
    		throw new Error("<RampCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set card(value) {
    		throw new Error("<RampCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var css_248z$a = "";
    styleInject(css_248z$a);

    /* src\CustomCard.svelte generated by Svelte v3.59.2 */
    const file$a = "src\\CustomCard.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	child_ctx[15] = list;
    	child_ctx[16] = i;
    	return child_ctx;
    }

    // (145:8) {#each card.attributes as attribute, index}
    function create_each_block$7(ctx) {
    	let div;
    	let input;
    	let t;
    	let button;
    	let fontawesomeicon;
    	let current;
    	let mounted;
    	let dispose;

    	function input_input_handler() {
    		/*input_input_handler*/ ctx[7].call(input, /*each_value*/ ctx[15], /*index*/ ctx[16]);
    	}

    	function input_handler(...args) {
    		return /*input_handler*/ ctx[8](/*index*/ ctx[16], ...args);
    	}

    	fontawesomeicon = new FontAwesomeIcon({ props: { icon: faTimes }, $$inline: true });

    	function click_handler() {
    		return /*click_handler*/ ctx[9](/*index*/ ctx[16]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			input = element("input");
    			t = space();
    			button = element("button");
    			create_component(fontawesomeicon.$$.fragment);
    			attr_dev(input, "aria-label", "custom attribute name");
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "Attribute");
    			attr_dev(input, "class", "svelte-1sq3oh6");
    			add_location(input, file$a, 146, 16, 3465);
    			attr_dev(button, "aria-label", "Remove custom attribute");
    			attr_dev(button, "class", "remove-attribute-button svelte-1sq3oh6");
    			add_location(button, file$a, 149, 20, 3705);
    			attr_dev(div, "class", "attribute-row svelte-1sq3oh6");
    			add_location(div, file$a, 145, 12, 3420);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, input);
    			set_input_value(input, /*attribute*/ ctx[14]);
    			append_dev(div, t);
    			append_dev(div, button);
    			mount_component(fontawesomeicon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", input_input_handler),
    					listen_dev(input, "input", input_handler, false, false, false, false),
    					listen_dev(input, "focus", selectInput$3, false, false, false, false),
    					listen_dev(button, "click", click_handler, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*card*/ 1 && input.value !== /*attribute*/ ctx[14]) {
    				set_input_value(input, /*attribute*/ ctx[14]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(fontawesomeicon);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(145:8) {#each card.attributes as attribute, index}",
    		ctx
    	});

    	return block;
    }

    // (157:12) 
    function create_trigger_slot$4(ctx) {
    	let button;
    	let fontawesomeicon;
    	let current;
    	let mounted;
    	let dispose;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: {
    				style: "height: 1.2em; vertical-align: -0.155em; color:#0066e9;",
    				icon: faQuestionCircle
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(fontawesomeicon.$$.fragment);
    			attr_dev(button, "id", "moreInfo");
    			attr_dev(button, "class", "moreInfo svelte-1sq3oh6");
    			attr_dev(button, "slot", "trigger");
    			attr_dev(button, "tabindex", "-1");
    			add_location(button, file$a, 156, 12, 4120);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(fontawesomeicon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_1*/ ctx[10], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(fontawesomeicon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_trigger_slot$4.name,
    		type: "slot",
    		source: "(157:12) ",
    		ctx
    	});

    	return block;
    }

    // (160:12) 
    function create_content_slot$4(ctx) {
    	let div;
    	let p0;
    	let t1;
    	let p1;
    	let b;
    	let t3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p0 = element("p");
    			p0.textContent = "Attributes allow you to create more custom setups. Think of an attribute like an ability. In land terms, I think of an attribute as a single color that a land can produce. For example, a land that makes islands and plains has two attributes.";
    			t1 = space();
    			p1 = element("p");
    			b = element("b");
    			b.textContent = "Limitation";
    			t3 = text(" - Right now, this simulation can only match one card to one desired attribute/card/mana. Let's say you had a card with two attributes (A and B). If you mark below that you desire attribute A and B, the simulation assumes you want two cards to meet those requirements. There is no way to specify that one card can fulfill multiple requirements (a great feature to add, someday).");
    			attr_dev(p0, "class", "popover-content svelte-1sq3oh6");
    			add_location(p0, file$a, 160, 14, 4429);
    			add_location(b, file$a, 161, 41, 4744);
    			attr_dev(p1, "class", "popover-content svelte-1sq3oh6");
    			add_location(p1, file$a, 161, 14, 4717);
    			attr_dev(div, "slot", "content");
    			add_location(div, file$a, 159, 12, 4393);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p0);
    			append_dev(div, t1);
    			append_dev(div, p1);
    			append_dev(p1, b);
    			append_dev(p1, t3);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot$4.name,
    		type: "slot",
    		source: "(160:12) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let div3;
    	let div0;
    	let input0;
    	let t0;
    	let button0;
    	let fontawesomeicon;
    	let t1;
    	let div1;
    	let t2;
    	let button1;
    	let t4;
    	let popover;
    	let updating_show;
    	let t5;
    	let div2;
    	let label;
    	let t7;
    	let input1;
    	let current;
    	let mounted;
    	let dispose;
    	fontawesomeicon = new FontAwesomeIcon({ props: { icon: faTimes }, $$inline: true });
    	let each_value = /*card*/ ctx[0].attributes;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	function popover_show_binding(value) {
    		/*popover_show_binding*/ ctx[11](value);
    	}

    	let popover_props = {
    		placement: "top",
    		$$slots: {
    			content: [create_content_slot$4],
    			trigger: [create_trigger_slot$4]
    		},
    		$$scope: { ctx }
    	};

    	if (/*showPopover*/ ctx[1] !== void 0) {
    		popover_props.show = /*showPopover*/ ctx[1];
    	}

    	popover = new Popover({ props: popover_props, $$inline: true });
    	binding_callbacks.push(() => bind(popover, 'show', popover_show_binding));

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			input0 = element("input");
    			t0 = space();
    			button0 = element("button");
    			create_component(fontawesomeicon.$$.fragment);
    			t1 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			button1 = element("button");
    			button1.textContent = "Add Attribute";
    			t4 = space();
    			create_component(popover.$$.fragment);
    			t5 = space();
    			div2 = element("div");
    			label = element("label");
    			label.textContent = "Amount:";
    			t7 = space();
    			input1 = element("input");
    			attr_dev(input0, "aria-label", "custom group title");
    			attr_dev(input0, "class", "title-input svelte-1sq3oh6");
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "placeholder", "Title");
    			add_location(input0, file$a, 136, 8, 2984);
    			attr_dev(button0, "aria-label", "Remove custom group");
    			attr_dev(button0, "class", "remove-button svelte-1sq3oh6");
    			add_location(button0, file$a, 139, 8, 3155);
    			attr_dev(div0, "class", "card-header svelte-1sq3oh6");
    			add_location(div0, file$a, 135, 4, 2949);
    			attr_dev(button1, "class", "add-attribute-button svelte-1sq3oh6");
    			add_location(button1, file$a, 154, 8, 3964);
    			attr_dev(div1, "class", "attributes-section svelte-1sq3oh6");
    			add_location(div1, file$a, 143, 4, 3321);
    			attr_dev(label, "for", "amount");
    			attr_dev(label, "class", "amount-label svelte-1sq3oh6");
    			add_location(label, file$a, 166, 8, 5238);
    			attr_dev(input1, "id", "amount");
    			attr_dev(input1, "class", "amount-input svelte-1sq3oh6");
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "placeholder", "Amount");
    			attr_dev(input1, "min", "0");
    			add_location(input1, file$a, 167, 8, 5304);
    			attr_dev(div2, "class", "card-footer svelte-1sq3oh6");
    			add_location(div2, file$a, 165, 4, 5203);
    			attr_dev(div3, "class", "custom-card svelte-1sq3oh6");
    			add_location(div3, file$a, 134, 0, 2918);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div0, input0);
    			set_input_value(input0, /*card*/ ctx[0].title);
    			append_dev(div0, t0);
    			append_dev(div0, button0);
    			mount_component(fontawesomeicon, button0, null);
    			append_dev(div3, t1);
    			append_dev(div3, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div1, null);
    				}
    			}

    			append_dev(div1, t2);
    			append_dev(div1, button1);
    			append_dev(div1, t4);
    			mount_component(popover, div1, null);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			append_dev(div2, label);
    			append_dev(div2, t7);
    			append_dev(div2, input1);
    			set_input_value(input1, /*card*/ ctx[0].amount);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[6]),
    					listen_dev(input0, "focus", selectInput$3, false, false, false, false),
    					listen_dev(button0, "click", /*remove*/ ctx[2], false, false, false, false),
    					listen_dev(button1, "click", /*addAttribute*/ ctx[3], false, false, false, false),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[12]),
    					listen_dev(input1, "focus", selectInput$3, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*card*/ 1 && input0.value !== /*card*/ ctx[0].title) {
    				set_input_value(input0, /*card*/ ctx[0].title);
    			}

    			if (dirty & /*removeAttribute, faTimes, card, updateAttribute, selectInput*/ 49) {
    				each_value = /*card*/ ctx[0].attributes;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div1, t2);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			const popover_changes = {};

    			if (dirty & /*$$scope, showPopover*/ 131074) {
    				popover_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_show && dirty & /*showPopover*/ 2) {
    				updating_show = true;
    				popover_changes.show = /*showPopover*/ ctx[1];
    				add_flush_callback(() => updating_show = false);
    			}

    			popover.$set(popover_changes);

    			if (dirty & /*card*/ 1 && to_number(input1.value) !== /*card*/ ctx[0].amount) {
    				set_input_value(input1, /*card*/ ctx[0].amount);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(popover.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(popover.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(fontawesomeicon);
    			destroy_each(each_blocks, detaching);
    			destroy_component(popover);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function selectInput$3(event) {
    	event.target.select(); // Selects all text in the input upon focus
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CustomCard', slots, []);
    	const dispatch = createEventDispatcher();
    	let showPopover = false;
    	let { card = { title: '', attributes: [], amount: 0 } } = $$props;

    	function remove() {
    		dispatch('remove');
    	}

    	function addAttribute() {
    		const newAttribute = `Attribute ${card.attributes.length + 1}`; // Give a default name to the new attribute
    		$$invalidate(0, card.attributes = [...card.attributes, newAttribute], card);
    		dispatch('addattribute', { attribute: newAttribute });
    	}

    	function removeAttribute(index) {
    		const removedAttribute = card.attributes[index];
    		$$invalidate(0, card.attributes = card.attributes.filter((_, i) => i !== index), card);
    		dispatch('removeattribute', { attribute: removedAttribute });
    	}

    	function updateAttribute(index, value) {
    		const oldValue = card.attributes[index];
    		$$invalidate(0, card.attributes[index] = value, card);
    		dispatch('updateattribute', { newAttr: value, oldAttr: oldValue });
    	}

    	const writable_props = ['card'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CustomCard> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		card.title = this.value;
    		$$invalidate(0, card);
    	}

    	function input_input_handler(each_value, index) {
    		each_value[index] = this.value;
    		$$invalidate(0, card);
    	}

    	const input_handler = (index, e) => updateAttribute(index, e.target.value);
    	const click_handler = index => removeAttribute(index);
    	const click_handler_1 = () => $$invalidate(1, showPopover = !showPopover);

    	function popover_show_binding(value) {
    		showPopover = value;
    		$$invalidate(1, showPopover);
    	}

    	function input1_input_handler() {
    		card.amount = to_number(this.value);
    		$$invalidate(0, card);
    	}

    	$$self.$$set = $$props => {
    		if ('card' in $$props) $$invalidate(0, card = $$props.card);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		faTimes,
    		FontAwesomeIcon,
    		Popover,
    		faQuestionCircle,
    		dispatch,
    		showPopover,
    		card,
    		remove,
    		addAttribute,
    		removeAttribute,
    		updateAttribute,
    		selectInput: selectInput$3
    	});

    	$$self.$inject_state = $$props => {
    		if ('showPopover' in $$props) $$invalidate(1, showPopover = $$props.showPopover);
    		if ('card' in $$props) $$invalidate(0, card = $$props.card);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		card,
    		showPopover,
    		remove,
    		addAttribute,
    		removeAttribute,
    		updateAttribute,
    		input0_input_handler,
    		input_input_handler,
    		input_handler,
    		click_handler,
    		click_handler_1,
    		popover_show_binding,
    		input1_input_handler
    	];
    }

    class CustomCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { card: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CustomCard",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get card() {
    		throw new Error("<CustomCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set card(value) {
    		throw new Error("<CustomCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function slide(node, { delay = 0, duration = 400, easing = cubicOut, axis = 'y' } = {}) {
        const style = getComputedStyle(node);
        const opacity = +style.opacity;
        const primary_property = axis === 'y' ? 'height' : 'width';
        const primary_property_value = parseFloat(style[primary_property]);
        const secondary_properties = axis === 'y' ? ['top', 'bottom'] : ['left', 'right'];
        const capitalized_secondary_properties = secondary_properties.map((e) => `${e[0].toUpperCase()}${e.slice(1)}`);
        const padding_start_value = parseFloat(style[`padding${capitalized_secondary_properties[0]}`]);
        const padding_end_value = parseFloat(style[`padding${capitalized_secondary_properties[1]}`]);
        const margin_start_value = parseFloat(style[`margin${capitalized_secondary_properties[0]}`]);
        const margin_end_value = parseFloat(style[`margin${capitalized_secondary_properties[1]}`]);
        const border_width_start_value = parseFloat(style[`border${capitalized_secondary_properties[0]}Width`]);
        const border_width_end_value = parseFloat(style[`border${capitalized_secondary_properties[1]}Width`]);
        return {
            delay,
            duration,
            easing,
            css: t => 'overflow: hidden;' +
                `opacity: ${Math.min(t * 20, 1) * opacity};` +
                `${primary_property}: ${t * primary_property_value}px;` +
                `padding-${secondary_properties[0]}: ${t * padding_start_value}px;` +
                `padding-${secondary_properties[1]}: ${t * padding_end_value}px;` +
                `margin-${secondary_properties[0]}: ${t * margin_start_value}px;` +
                `margin-${secondary_properties[1]}: ${t * margin_end_value}px;` +
                `border-${secondary_properties[0]}-width: ${t * border_width_start_value}px;` +
                `border-${secondary_properties[1]}-width: ${t * border_width_end_value}px;`
        };
    }

    // analytics.js
    const initGA = () => {
        // Add your Google Analytics 4 "G-XXXXXXX" ID
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
      
        gtag('config', 'G-927EKMRK7V'); // Replace 'G-XXXXXXX' with your GA Measurement ID
      };
      
      const trackEvent = (eventName, eventParams) => {
        gtag('event', eventName, eventParams);
      };

    var css_248z$9 = "";
    styleInject(css_248z$9);

    /* src\SimulationMulligansAccordion.svelte generated by Svelte v3.59.2 */
    const file$9 = "src\\SimulationMulligansAccordion.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	return child_ctx;
    }

    // (118:10) {:else}
    function create_else_block$4(ctx) {
    	let fontawesomeicon;
    	let current;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: {
    				icon: faChevronDown,
    				class: "chevron-icon"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(fontawesomeicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(fontawesomeicon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(fontawesomeicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(118:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (116:12) {#if openItem}
    function create_if_block$6(ctx) {
    	let fontawesomeicon;
    	let current;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: { icon: faChevronUp, class: "chevron-icon" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(fontawesomeicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(fontawesomeicon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(fontawesomeicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(116:12) {#if openItem}",
    		ctx
    	});

    	return block;
    }

    // (129:24) {#each Array(8).fill(0).map((_, i) => i) as num}
    function create_each_block_2$2(ctx) {
    	let option;
    	let t_value = /*num*/ ctx[15] + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*num*/ ctx[15];
    			option.value = option.__value;
    			add_location(option, file$9, 129, 28, 3713);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$2.name,
    		type: "each",
    		source: "(129:24) {#each Array(8).fill(0).map((_, i) => i) as num}",
    		ctx
    	});

    	return block;
    }

    // (143:24) {#each Array(8).fill(0).map((_, i) => i) as num}
    function create_each_block_1$3(ctx) {
    	let option;
    	let t_value = /*num*/ ctx[15] + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*num*/ ctx[15];
    			option.value = option.__value;
    			add_location(option, file$9, 143, 28, 4433);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(143:24) {#each Array(8).fill(0).map((_, i) => i) as num}",
    		ctx
    	});

    	return block;
    }

    // (152:24) {#each Array(8).fill(0).map((_, i) => i) as num}
    function create_each_block$6(ctx) {
    	let option;
    	let t_value = /*num*/ ctx[15] + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*num*/ ctx[15];
    			option.value = option.__value;
    			add_location(option, file$9, 152, 28, 4880);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(152:24) {#each Array(8).fill(0).map((_, i) => i) as num}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let div11;
    	let div10;
    	let div0;
    	let h3;
    	let t1;
    	let current_block_type_index;
    	let if_block;
    	let t2;
    	let div9;
    	let div8;
    	let div1;
    	let label0;
    	let b;
    	let t4;
    	let t5;
    	let select0;
    	let t6;
    	let div2;
    	let label1;
    	let t8;
    	let input0;
    	let t9;
    	let div3;
    	let label2;
    	let t11;
    	let select1;
    	let t12;
    	let div4;
    	let label3;
    	let t14;
    	let select2;
    	let t15;
    	let div5;
    	let label4;
    	let t17;
    	let input1;
    	let t18;
    	let div6;
    	let label5;
    	let t20;
    	let input2;
    	let t21;
    	let div7;
    	let label6;
    	let t23;
    	let select3;
    	let option0;
    	let option1;
    	let option2;
    	let option3;
    	let option4;
    	let option5;
    	let div9_transition;
    	let div11_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$6, create_else_block$4];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*openItem*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let each_value_2 = Array(8).fill(0).map(func$1);
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2$2(get_each_context_2$2(ctx, each_value_2, i));
    	}

    	let each_value_1 = Array(8).fill(0).map(func_1);
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	let each_value = Array(8).fill(0).map(func_2);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div11 = element("div");
    			div10 = element("div");
    			div0 = element("div");
    			h3 = element("h3");
    			h3.textContent = "Add mulligan logic to simulations";
    			t1 = space();
    			if_block.c();
    			t2 = space();
    			div9 = element("div");
    			div8 = element("div");
    			div1 = element("div");
    			label0 = element("label");
    			b = element("b");
    			b.textContent = "Max mulligans:";
    			t4 = text(" (not including free mulligan)");
    			t5 = space();
    			select0 = element("select");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t6 = space();
    			div2 = element("div");
    			label1 = element("label");
    			label1.textContent = "First Mulligan Free:";
    			t8 = space();
    			input0 = element("input");
    			t9 = space();
    			div3 = element("div");
    			label2 = element("label");
    			label2.textContent = "Min Lands to keep:";
    			t11 = space();
    			select1 = element("select");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t12 = space();
    			div4 = element("div");
    			label3 = element("label");
    			label3.textContent = "Max Lands to keep:";
    			t14 = space();
    			select2 = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t15 = space();
    			div5 = element("div");
    			label4 = element("label");
    			label4.textContent = "Must have playable ramp:";
    			t17 = space();
    			input1 = element("input");
    			t18 = space();
    			div6 = element("div");
    			label5 = element("label");
    			label5.textContent = "Free mulligans until max/min lands are satisfied";
    			t20 = space();
    			input2 = element("input");
    			t21 = space();
    			div7 = element("div");
    			label6 = element("label");
    			label6.textContent = "Mulligan unless ramp + lands can make at least:";
    			t23 = space();
    			select3 = element("select");
    			option0 = element("option");
    			option1 = element("option");
    			option1.textContent = "1 color";
    			option2 = element("option");
    			option2.textContent = "2 colors";
    			option3 = element("option");
    			option3.textContent = "3 colors";
    			option4 = element("option");
    			option4.textContent = "4 colors";
    			option5 = element("option");
    			option5.textContent = "5 colors";
    			set_style(h3, "font-weight", "400");
    			attr_dev(h3, "class", "svelte-1dxt8qw");
    			add_location(h3, file$9, 114, 12, 2742);
    			attr_dev(div0, "class", "accordion-title svelte-1dxt8qw");
    			attr_dev(div0, "tabindex", "0");
    			add_location(div0, file$9, 108, 8, 2429);
    			add_location(b, file$9, 126, 47, 3459);
    			attr_dev(label0, "for", "max-mulligans");
    			attr_dev(label0, "class", "svelte-1dxt8qw");
    			add_location(label0, file$9, 126, 20, 3432);
    			attr_dev(select0, "id", "max-mulligans");
    			attr_dev(select0, "class", "svelte-1dxt8qw");
    			if (/*$mulliganConfig*/ ctx[2].maxMulligans === void 0) add_render_callback(() => /*select0_change_handler*/ ctx[7].call(select0));
    			add_location(select0, file$9, 127, 20, 3540);
    			attr_dev(div1, "class", "draw-amount svelte-1dxt8qw");
    			add_location(div1, file$9, 125, 16, 3385);
    			attr_dev(label1, "for", "first-mulligan-free");
    			attr_dev(label1, "class", "svelte-1dxt8qw");
    			add_location(label1, file$9, 135, 20, 3918);
    			attr_dev(input0, "id", "first-mulligan-free");
    			attr_dev(input0, "type", "checkbox");
    			attr_dev(input0, "class", "svelte-1dxt8qw");
    			add_location(input0, file$9, 136, 20, 4001);
    			attr_dev(div2, "class", "draw-amount svelte-1dxt8qw");
    			add_location(div2, file$9, 134, 16, 3871);
    			attr_dev(label2, "for", "min-lands");
    			attr_dev(label2, "class", "svelte-1dxt8qw");
    			add_location(label2, file$9, 140, 20, 4191);
    			attr_dev(select1, "id", "min-lands");
    			attr_dev(select1, "class", "svelte-1dxt8qw");
    			if (/*$mulliganConfig*/ ctx[2].minLandsInHand === void 0) add_render_callback(() => /*select1_change_handler*/ ctx[9].call(select1));
    			add_location(select1, file$9, 141, 20, 4262);
    			attr_dev(div3, "class", "draw-amount svelte-1dxt8qw");
    			add_location(div3, file$9, 139, 16, 4144);
    			attr_dev(label3, "for", "max-lands");
    			attr_dev(label3, "class", "svelte-1dxt8qw");
    			add_location(label3, file$9, 149, 20, 4638);
    			attr_dev(select2, "id", "max-lands");
    			attr_dev(select2, "class", "svelte-1dxt8qw");
    			if (/*$mulliganConfig*/ ctx[2].maxLandsInHand === void 0) add_render_callback(() => /*select2_change_handler*/ ctx[10].call(select2));
    			add_location(select2, file$9, 150, 20, 4709);
    			attr_dev(div4, "class", "draw-amount svelte-1dxt8qw");
    			add_location(div4, file$9, 148, 16, 4591);
    			attr_dev(label4, "for", "playable-ramp");
    			attr_dev(label4, "class", "svelte-1dxt8qw");
    			add_location(label4, file$9, 158, 20, 5077);
    			attr_dev(input1, "id", "playable-ramp");
    			attr_dev(input1, "type", "checkbox");
    			attr_dev(input1, "class", "svelte-1dxt8qw");
    			add_location(input1, file$9, 159, 20, 5158);
    			attr_dev(div5, "class", "draw-amount svelte-1dxt8qw");
    			add_location(div5, file$9, 157, 16, 5030);
    			attr_dev(label5, "for", "free-mulligan-lands");
    			attr_dev(label5, "class", "svelte-1dxt8qw");
    			add_location(label5, file$9, 163, 20, 5345);
    			attr_dev(input2, "id", "free-mulligan-lands");
    			attr_dev(input2, "type", "checkbox");
    			attr_dev(input2, "class", "svelte-1dxt8qw");
    			add_location(input2, file$9, 164, 20, 5456);
    			attr_dev(div6, "class", "draw-amount svelte-1dxt8qw");
    			add_location(div6, file$9, 162, 16, 5298);
    			attr_dev(label6, "for", "mulligan-colors");
    			attr_dev(label6, "class", "svelte-1dxt8qw");
    			add_location(label6, file$9, 168, 20, 5666);
    			option0.__value = "";
    			option0.value = option0.__value;
    			add_location(option0, file$9, 170, 24, 5887);
    			option1.__value = "1";
    			option1.value = option1.__value;
    			add_location(option1, file$9, 171, 24, 5939);
    			option2.__value = "2";
    			option2.value = option2.__value;
    			add_location(option2, file$9, 172, 24, 5999);
    			option3.__value = "3";
    			option3.value = option3.__value;
    			add_location(option3, file$9, 173, 24, 6060);
    			option4.__value = "4";
    			option4.value = option4.__value;
    			add_location(option4, file$9, 174, 24, 6121);
    			option5.__value = "5";
    			option5.value = option5.__value;
    			add_location(option5, file$9, 175, 24, 6182);
    			attr_dev(select3, "id", "mulligan-colors");
    			attr_dev(select3, "class", "svelte-1dxt8qw");
    			if (/*$mulliganConfig*/ ctx[2].mulliganIfLandsRampCanOnlyMake === void 0) add_render_callback(() => /*select3_change_handler*/ ctx[13].call(select3));
    			add_location(select3, file$9, 169, 20, 5772);
    			attr_dev(div7, "class", "draw-amount svelte-1dxt8qw");
    			add_location(div7, file$9, 167, 16, 5619);
    			attr_dev(div8, "class", "draw-amounts-container svelte-1dxt8qw");
    			add_location(div8, file$9, 123, 12, 3329);
    			attr_dev(div9, "class", "answer svelte-1dxt8qw");
    			set_style(div9, "height", /*openItem*/ ctx[0] ? 'auto' : '0');
    			add_location(div9, file$9, 121, 8, 3054);
    			attr_dev(div10, "class", "accordion-item svelte-1dxt8qw");
    			add_location(div10, file$9, 107, 4, 2391);
    			attr_dev(div11, "class", div11_class_value = "accordion " + (/*isHovering*/ ctx[1] ? 'hovering' : '') + " svelte-1dxt8qw");
    			add_location(div11, file$9, 104, 0, 2209);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div11, anchor);
    			append_dev(div11, div10);
    			append_dev(div10, div0);
    			append_dev(div0, h3);
    			append_dev(div0, t1);
    			if_blocks[current_block_type_index].m(div0, null);
    			append_dev(div10, t2);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div1);
    			append_dev(div1, label0);
    			append_dev(label0, b);
    			append_dev(label0, t4);
    			append_dev(div1, t5);
    			append_dev(div1, select0);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				if (each_blocks_2[i]) {
    					each_blocks_2[i].m(select0, null);
    				}
    			}

    			select_option(select0, /*$mulliganConfig*/ ctx[2].maxMulligans, true);
    			append_dev(div8, t6);
    			append_dev(div8, div2);
    			append_dev(div2, label1);
    			append_dev(div2, t8);
    			append_dev(div2, input0);
    			input0.checked = /*$mulliganConfig*/ ctx[2].firstMulliganFree;
    			append_dev(div8, t9);
    			append_dev(div8, div3);
    			append_dev(div3, label2);
    			append_dev(div3, t11);
    			append_dev(div3, select1);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				if (each_blocks_1[i]) {
    					each_blocks_1[i].m(select1, null);
    				}
    			}

    			select_option(select1, /*$mulliganConfig*/ ctx[2].minLandsInHand, true);
    			append_dev(div8, t12);
    			append_dev(div8, div4);
    			append_dev(div4, label3);
    			append_dev(div4, t14);
    			append_dev(div4, select2);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(select2, null);
    				}
    			}

    			select_option(select2, /*$mulliganConfig*/ ctx[2].maxLandsInHand, true);
    			append_dev(div8, t15);
    			append_dev(div8, div5);
    			append_dev(div5, label4);
    			append_dev(div5, t17);
    			append_dev(div5, input1);
    			input1.checked = /*$mulliganConfig*/ ctx[2].mustHavePlayableRamp;
    			append_dev(div8, t18);
    			append_dev(div8, div6);
    			append_dev(div6, label5);
    			append_dev(div6, t20);
    			append_dev(div6, input2);
    			input2.checked = /*$mulliganConfig*/ ctx[2].freeMulliganTillLands;
    			append_dev(div8, t21);
    			append_dev(div8, div7);
    			append_dev(div7, label6);
    			append_dev(div7, t23);
    			append_dev(div7, select3);
    			append_dev(select3, option0);
    			append_dev(select3, option1);
    			append_dev(select3, option2);
    			append_dev(select3, option3);
    			append_dev(select3, option4);
    			append_dev(select3, option5);
    			select_option(select3, /*$mulliganConfig*/ ctx[2].mulliganIfLandsRampCanOnlyMake, true);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler*/ ctx[3], false, false, false, false),
    					listen_dev(div0, "keydown", /*keydown_handler*/ ctx[4], false, false, false, false),
    					listen_dev(div0, "mouseenter", /*mouseenter_handler*/ ctx[5], false, false, false, false),
    					listen_dev(div0, "mouseleave", /*mouseleave_handler*/ ctx[6], false, false, false, false),
    					listen_dev(select0, "change", /*select0_change_handler*/ ctx[7]),
    					listen_dev(input0, "change", /*input0_change_handler*/ ctx[8]),
    					listen_dev(select1, "change", /*select1_change_handler*/ ctx[9]),
    					listen_dev(select2, "change", /*select2_change_handler*/ ctx[10]),
    					listen_dev(input1, "change", /*input1_change_handler*/ ctx[11]),
    					listen_dev(input2, "change", /*input2_change_handler*/ ctx[12]),
    					listen_dev(select3, "change", /*select3_change_handler*/ ctx[13])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div0, null);
    			}

    			if (dirty & /*Array*/ 0) {
    				each_value_2 = Array(8).fill(0).map(func$1);
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$2(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_2$2(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_2.length;
    			}

    			if (dirty & /*$mulliganConfig, Array*/ 4) {
    				select_option(select0, /*$mulliganConfig*/ ctx[2].maxMulligans);
    			}

    			if (dirty & /*$mulliganConfig, Array*/ 4) {
    				input0.checked = /*$mulliganConfig*/ ctx[2].firstMulliganFree;
    			}

    			if (dirty & /*Array*/ 0) {
    				each_value_1 = Array(8).fill(0).map(func_1);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$3(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select1, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*$mulliganConfig, Array*/ 4) {
    				select_option(select1, /*$mulliganConfig*/ ctx[2].minLandsInHand);
    			}

    			if (dirty & /*Array*/ 0) {
    				each_value = Array(8).fill(0).map(func_2);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select2, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*$mulliganConfig, Array*/ 4) {
    				select_option(select2, /*$mulliganConfig*/ ctx[2].maxLandsInHand);
    			}

    			if (dirty & /*$mulliganConfig, Array*/ 4) {
    				input1.checked = /*$mulliganConfig*/ ctx[2].mustHavePlayableRamp;
    			}

    			if (dirty & /*$mulliganConfig, Array*/ 4) {
    				input2.checked = /*$mulliganConfig*/ ctx[2].freeMulliganTillLands;
    			}

    			if (dirty & /*$mulliganConfig, Array*/ 4) {
    				select_option(select3, /*$mulliganConfig*/ ctx[2].mulliganIfLandsRampCanOnlyMake);
    			}

    			if (dirty & /*openItem*/ 1) {
    				set_style(div9, "height", /*openItem*/ ctx[0] ? 'auto' : '0');
    			}

    			if (!current || dirty & /*isHovering*/ 2 && div11_class_value !== (div11_class_value = "accordion " + (/*isHovering*/ ctx[1] ? 'hovering' : '') + " svelte-1dxt8qw")) {
    				attr_dev(div11, "class", div11_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			if (local) {
    				add_render_callback(() => {
    					if (!current) return;
    					if (!div9_transition) div9_transition = create_bidirectional_transition(div9, slide, { duration: 250 }, true);
    					div9_transition.run(1);
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);

    			if (local) {
    				if (!div9_transition) div9_transition = create_bidirectional_transition(div9, slide, { duration: 250 }, false);
    				div9_transition.run(0);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div11);
    			if_blocks[current_block_type_index].d();
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			if (detaching && div9_transition) div9_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func$1 = (_, i) => i;
    const func_1 = (_, i) => i;
    const func_2 = (_, i) => i;

    function instance$9($$self, $$props, $$invalidate) {
    	let $mulliganConfig;
    	validate_store(mulliganConfig, 'mulliganConfig');
    	component_subscribe($$self, mulliganConfig, $$value => $$invalidate(2, $mulliganConfig = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SimulationMulligansAccordion', slots, []);
    	const dispatch = createEventDispatcher();
    	let openItem = false;
    	let isHovering = false;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SimulationMulligansAccordion> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate(0, openItem = !openItem);
    	const keydown_handler = event => event.key === 'Enter' && $$invalidate(0, openItem = !openItem);
    	const mouseenter_handler = () => $$invalidate(1, isHovering = true);
    	const mouseleave_handler = () => $$invalidate(1, isHovering = false);

    	function select0_change_handler() {
    		$mulliganConfig.maxMulligans = select_value(this);
    		mulliganConfig.set($mulliganConfig);
    	}

    	function input0_change_handler() {
    		$mulliganConfig.firstMulliganFree = this.checked;
    		mulliganConfig.set($mulliganConfig);
    	}

    	function select1_change_handler() {
    		$mulliganConfig.minLandsInHand = select_value(this);
    		mulliganConfig.set($mulliganConfig);
    	}

    	function select2_change_handler() {
    		$mulliganConfig.maxLandsInHand = select_value(this);
    		mulliganConfig.set($mulliganConfig);
    	}

    	function input1_change_handler() {
    		$mulliganConfig.mustHavePlayableRamp = this.checked;
    		mulliganConfig.set($mulliganConfig);
    	}

    	function input2_change_handler() {
    		$mulliganConfig.freeMulliganTillLands = this.checked;
    		mulliganConfig.set($mulliganConfig);
    	}

    	function select3_change_handler() {
    		$mulliganConfig.mulliganIfLandsRampCanOnlyMake = select_value(this);
    		mulliganConfig.set($mulliganConfig);
    	}

    	$$self.$capture_state = () => ({
    		writable,
    		slide,
    		createEventDispatcher,
    		mulliganConfig,
    		faChevronDown,
    		faChevronUp,
    		FontAwesomeIcon,
    		dispatch,
    		openItem,
    		isHovering,
    		$mulliganConfig
    	});

    	$$self.$inject_state = $$props => {
    		if ('openItem' in $$props) $$invalidate(0, openItem = $$props.openItem);
    		if ('isHovering' in $$props) $$invalidate(1, isHovering = $$props.isHovering);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		openItem,
    		isHovering,
    		$mulliganConfig,
    		click_handler,
    		keydown_handler,
    		mouseenter_handler,
    		mouseleave_handler,
    		select0_change_handler,
    		input0_change_handler,
    		select1_change_handler,
    		select2_change_handler,
    		input1_change_handler,
    		input2_change_handler,
    		select3_change_handler
    	];
    }

    class SimulationMulligansAccordion extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SimulationMulligansAccordion",
    			options,
    			id: create_fragment$9.name
    		});
    	}
    }

    var css_248z$8 = "";
    styleInject(css_248z$8);

    /* src\MonteAccordion.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1$1, console: console_1$4 } = globals;
    const file$8 = "src\\MonteAccordion.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[67] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[70] = list[i][0];
    	child_ctx[71] = list[i][1];
    	return child_ctx;
    }

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[74] = list[i];
    	child_ctx[75] = list;
    	child_ctx[76] = i;
    	return child_ctx;
    }

    function get_each_context_3$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[74] = list[i];
    	child_ctx[77] = list;
    	child_ctx[78] = i;
    	return child_ctx;
    }

    function get_each_context_4$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[74] = list[i];
    	child_ctx[79] = list;
    	child_ctx[80] = i;
    	return child_ctx;
    }

    // (904:0) {:else}
    function create_else_block_1$1(ctx) {
    	let fontawesomeicon;
    	let current;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: {
    				icon: faChevronDown,
    				class: "chevron-icon"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(fontawesomeicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(fontawesomeicon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(fontawesomeicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(904:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (902:2) {#if isOpen}
    function create_if_block_2$1(ctx) {
    	let fontawesomeicon;
    	let current;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: { icon: faChevronUp, class: "chevron-icon" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(fontawesomeicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(fontawesomeicon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(fontawesomeicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(902:2) {#if isOpen}",
    		ctx
    	});

    	return block;
    }

    // (916:8) 
    function create_trigger_slot_2$1(ctx) {
    	let button;
    	let fontawesomeicon;
    	let current;
    	let mounted;
    	let dispose;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: {
    				style: "height: 1.2em; vertical-align: -0.155em; color:#0066e9;",
    				icon: faQuestionCircle
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(fontawesomeicon.$$.fragment);
    			attr_dev(button, "class", "moreInfo");
    			attr_dev(button, "slot", "trigger");
    			attr_dev(button, "tabindex", "-1");
    			add_location(button, file$8, 915, 8, 26711);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(fontawesomeicon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[36], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(fontawesomeicon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_trigger_slot_2$1.name,
    		type: "slot",
    		source: "(916:8) ",
    		ctx
    	});

    	return block;
    }

    // (919:8) 
    function create_content_slot_2$1(ctx) {
    	let div;
    	let p0;
    	let t0;
    	let a0;
    	let t2;
    	let a1;
    	let t4;
    	let p1;
    	let t6;
    	let p2;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p0 = element("p");
    			t0 = text("This section uses a ");
    			a0 = element("a");
    			a0.textContent = "Monte Carlo simulation";
    			t2 = text(" method, which basically means we draw a theoretical deck thousands of times to estimate the probability of getting certain cards. This method is better suited for mana probabilities (compared to the top ");
    			a1 = element("a");
    			a1.textContent = "hypergeometric";
    			t4 = text(" part of this tool) because it can take into account cards with multiple attributes (such as a land producing an island or a plains). This is done with a two-step process. \r\n            ");
    			p1 = element("p");
    			p1.textContent = "First, we calculate all of the possible combinations of cards that can achieve your desired results. Then, the simulation draws the deck thousands of times, checking if any combination is achieved across each turn.";
    			t6 = space();
    			p2 = element("p");
    			p2.textContent = "My research has only come up with one other method to find this kind of probability - the inclusion exclusion principle. And that seemed hella hard to implement, so I went with this.";
    			attr_dev(a0, "href", "https://en.wikipedia.org/wiki/Monte_Carlo_method");
    			attr_dev(a0, "target", "_blank");
    			add_location(a0, file$8, 919, 76, 27055);
    			attr_dev(a1, "href", "https://en.wikipedia.org/wiki/Hypergeometric_distribution");
    			attr_dev(a1, "target", "_blank");
    			add_location(a1, file$8, 919, 381, 27360);
    			attr_dev(p0, "class", "popover-content popover-text-fixer svelte-mks43d");
    			add_location(p0, file$8, 919, 10, 26989);
    			attr_dev(p1, "class", "popover-content popover-text-fixer svelte-mks43d");
    			add_location(p1, file$8, 920, 12, 27648);
    			attr_dev(p2, "class", "popover-content popover-text-fixer svelte-mks43d");
    			add_location(p2, file$8, 921, 10, 27924);
    			attr_dev(div, "slot", "content");
    			add_location(div, file$8, 918, 8, 26957);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p0);
    			append_dev(p0, t0);
    			append_dev(p0, a0);
    			append_dev(p0, t2);
    			append_dev(p0, a1);
    			append_dev(p0, t4);
    			append_dev(div, p1);
    			append_dev(div, t6);
    			append_dev(div, p2);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot_2$1.name,
    		type: "slot",
    		source: "(919:8) ",
    		ctx
    	});

    	return block;
    }

    // (932:8) {#each manaCards as card (card.id)}
    function create_each_block_4$1(key_1, ctx) {
    	let first;
    	let manacard;
    	let updating_card;
    	let current;

    	function manacard_card_binding(value) {
    		/*manacard_card_binding*/ ctx[38](value, /*card*/ ctx[74], /*each_value_4*/ ctx[79], /*card_index_2*/ ctx[80]);
    	}

    	function remove_handler() {
    		return /*remove_handler*/ ctx[39](/*card*/ ctx[74]);
    	}

    	let manacard_props = {};

    	if (/*card*/ ctx[74] !== void 0) {
    		manacard_props.card = /*card*/ ctx[74];
    	}

    	manacard = new ManaCard({ props: manacard_props, $$inline: true });
    	binding_callbacks.push(() => bind(manacard, 'card', manacard_card_binding));
    	manacard.$on("remove", remove_handler);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			create_component(manacard.$$.fragment);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			mount_component(manacard, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const manacard_changes = {};

    			if (!updating_card && dirty[0] & /*manaCards*/ 1) {
    				updating_card = true;
    				manacard_changes.card = /*card*/ ctx[74];
    				add_flush_callback(() => updating_card = false);
    			}

    			manacard.$set(manacard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(manacard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(manacard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			destroy_component(manacard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4$1.name,
    		type: "each",
    		source: "(932:8) {#each manaCards as card (card.id)}",
    		ctx
    	});

    	return block;
    }

    // (950:8) {#each rampCards as card (card.id)}
    function create_each_block_3$1(key_1, ctx) {
    	let first;
    	let rampcard;
    	let updating_card;
    	let current;

    	function rampcard_card_binding(value) {
    		/*rampcard_card_binding*/ ctx[40](value, /*card*/ ctx[74], /*each_value_3*/ ctx[77], /*card_index_1*/ ctx[78]);
    	}

    	function remove_handler_1() {
    		return /*remove_handler_1*/ ctx[41](/*card*/ ctx[74]);
    	}

    	let rampcard_props = {};

    	if (/*card*/ ctx[74] !== void 0) {
    		rampcard_props.card = /*card*/ ctx[74];
    	}

    	rampcard = new RampCard({ props: rampcard_props, $$inline: true });
    	binding_callbacks.push(() => bind(rampcard, 'card', rampcard_card_binding));
    	rampcard.$on("remove", remove_handler_1);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			create_component(rampcard.$$.fragment);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			mount_component(rampcard, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const rampcard_changes = {};

    			if (!updating_card && dirty[0] & /*rampCards*/ 4) {
    				updating_card = true;
    				rampcard_changes.card = /*card*/ ctx[74];
    				add_flush_callback(() => updating_card = false);
    			}

    			rampcard.$set(rampcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(rampcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(rampcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			destroy_component(rampcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$1.name,
    		type: "each",
    		source: "(950:8) {#each rampCards as card (card.id)}",
    		ctx
    	});

    	return block;
    }

    // (969:3) {#each customCards as card (card.id)}
    function create_each_block_2$1(key_1, ctx) {
    	let first;
    	let customcard;
    	let updating_card;
    	let current;

    	function customcard_card_binding(value) {
    		/*customcard_card_binding*/ ctx[42](value, /*card*/ ctx[74], /*each_value_2*/ ctx[75], /*card_index*/ ctx[76]);
    	}

    	function remove_handler_2() {
    		return /*remove_handler_2*/ ctx[43](/*card*/ ctx[74]);
    	}

    	function updateattribute_handler(...args) {
    		return /*updateattribute_handler*/ ctx[45](/*card*/ ctx[74], ...args);
    	}

    	let customcard_props = {};

    	if (/*card*/ ctx[74] !== void 0) {
    		customcard_props.card = /*card*/ ctx[74];
    	}

    	customcard = new CustomCard({ props: customcard_props, $$inline: true });
    	binding_callbacks.push(() => bind(customcard, 'card', customcard_card_binding));
    	customcard.$on("remove", remove_handler_2);
    	customcard.$on("removeattribute", /*removeattribute_handler*/ ctx[44]);
    	customcard.$on("updateattribute", updateattribute_handler);
    	customcard.$on("addattribute", /*addattribute_handler*/ ctx[46]);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			create_component(customcard.$$.fragment);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			mount_component(customcard, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const customcard_changes = {};

    			if (!updating_card && dirty[0] & /*customCards*/ 2) {
    				updating_card = true;
    				customcard_changes.card = /*card*/ ctx[74];
    				add_flush_callback(() => updating_card = false);
    			}

    			customcard.$set(customcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(customcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(customcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			destroy_component(customcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$1.name,
    		type: "each",
    		source: "(969:3) {#each customCards as card (card.id)}",
    		ctx
    	});

    	return block;
    }

    // (983:10) 
    function create_trigger_slot_1$1(ctx) {
    	let button;
    	let fontawesomeicon;
    	let current;
    	let mounted;
    	let dispose;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: {
    				style: "height: 1.2em; vertical-align: -0.155em; color:#0066e9;",
    				icon: faQuestionCircle
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(fontawesomeicon.$$.fragment);
    			attr_dev(button, "class", "moreInfo");
    			attr_dev(button, "slot", "trigger");
    			attr_dev(button, "tabindex", "-1");
    			add_location(button, file$8, 982, 10, 30131);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(fontawesomeicon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_1*/ ctx[47], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(fontawesomeicon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_trigger_slot_1$1.name,
    		type: "slot",
    		source: "(983:10) ",
    		ctx
    	});

    	return block;
    }

    // (986:10) 
    function create_content_slot_1$2(ctx) {
    	let div;
    	let p0;
    	let t1;
    	let p1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p0 = element("p");
    			p0.textContent = "A custom group allows you to mix in other cards with your mana-producing cards above, or just use this simulation in a sandbox way. For example, maybe you want to find the probability of getting certain colors and a ramp spell (the ramp spells would be a custom group). You can also add attributes to custom cards for more complex calculations that consider custom groups with specific or common abilities.";
    			t1 = space();
    			p1 = element("p");
    			p1.textContent = "In Step 2, you can select that you want a certain number of cards from a custom group, as well as a certain number of cards that include some attribute.";
    			attr_dev(p0, "class", "popover-content popover-text-fixer svelte-mks43d");
    			add_location(p0, file$8, 986, 12, 30417);
    			attr_dev(p1, "class", "popover-content popover-text-fixer svelte-mks43d");
    			add_location(p1, file$8, 987, 12, 30887);
    			attr_dev(div, "slot", "content");
    			add_location(div, file$8, 985, 10, 30383);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p0);
    			append_dev(div, t1);
    			append_dev(div, p1);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot_1$2.name,
    		type: "slot",
    		source: "(986:10) ",
    		ctx
    	});

    	return block;
    }

    // (1004:8) {#if activeManaTypes[key] || (customCards.length > 0 && customCards.some(card => card.title === key))}
    function create_if_block$5(ctx) {
    	let div;
    	let label;
    	let label_for_value;
    	let t;
    	let input;
    	let input_id_value;
    	let input_value_value;
    	let mounted;
    	let dispose;

    	function select_block_type_1(ctx, dirty) {
    		if (/*manaIcons*/ ctx[16][/*key*/ ctx[70]]) return create_if_block_1$2;
    		return create_else_block$3;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	function input_handler(...args) {
    		return /*input_handler*/ ctx[49](/*key*/ ctx[70], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			label = element("label");
    			if_block.c();
    			t = space();
    			input = element("input");
    			attr_dev(label, "for", label_for_value = "" + (/*key*/ ctx[70].replace(/\s+/g, '_') + "-requirement"));
    			attr_dev(label, "class", "svelte-mks43d");
    			add_location(label, file$8, 1005, 12, 31907);
    			attr_dev(input, "id", input_id_value = "" + (/*key*/ ctx[70].replace(/\s+/g, '_') + "-requirement"));
    			attr_dev(input, "type", "number");
    			attr_dev(input, "min", "0");
    			input.value = input_value_value = /*manaRequirements*/ ctx[3][/*key*/ ctx[70]];
    			attr_dev(input, "class", "svelte-mks43d");
    			add_location(input, file$8, 1012, 12, 32283);
    			attr_dev(div, "class", "mana-requirement svelte-mks43d");
    			add_location(div, file$8, 1004, 10, 31863);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, label);
    			if_block.m(label, null);
    			append_dev(div, t);
    			append_dev(div, input);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", input_handler, false, false, false, false),
    					listen_dev(input, "focus", selectInput$2, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(label, null);
    				}
    			}

    			if (dirty[0] & /*manaRequirements*/ 8 && label_for_value !== (label_for_value = "" + (/*key*/ ctx[70].replace(/\s+/g, '_') + "-requirement"))) {
    				attr_dev(label, "for", label_for_value);
    			}

    			if (dirty[0] & /*manaRequirements*/ 8 && input_id_value !== (input_id_value = "" + (/*key*/ ctx[70].replace(/\s+/g, '_') + "-requirement"))) {
    				attr_dev(input, "id", input_id_value);
    			}

    			if (dirty[0] & /*manaRequirements*/ 8 && input_value_value !== (input_value_value = /*manaRequirements*/ ctx[3][/*key*/ ctx[70]]) && input.value !== input_value_value) {
    				prop_dev(input, "value", input_value_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(1004:8) {#if activeManaTypes[key] || (customCards.length > 0 && customCards.some(card => card.title === key))}",
    		ctx
    	});

    	return block;
    }

    // (1009:14) {:else}
    function create_else_block$3(ctx) {
    	let t0_value = /*key*/ ctx[70] + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = text(":");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*manaRequirements*/ 8 && t0_value !== (t0_value = /*key*/ ctx[70] + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(1009:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (1007:14) {#if manaIcons[key]}
    function create_if_block_1$2(ctx) {
    	let img;
    	let img_src_value;
    	let img_alt_value;
    	let t;

    	const block = {
    		c: function create() {
    			img = element("img");
    			t = text(" :");

    			if (!src_url_equal(img.src, img_src_value = /*key*/ ctx[70] === 'ANY'
    			? /*getAnyIcon*/ ctx[17](/*amount*/ ctx[71])
    			: /*manaIcons*/ ctx[16][/*key*/ ctx[70]])) attr_dev(img, "src", img_src_value);

    			attr_dev(img, "alt", img_alt_value = "" + (/*key*/ ctx[70] + " mana icon"));
    			attr_dev(img, "class", "mana-icon svelte-mks43d");
    			add_location(img, file$8, 1007, 16, 32013);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*manaRequirements*/ 8 && !src_url_equal(img.src, img_src_value = /*key*/ ctx[70] === 'ANY'
    			? /*getAnyIcon*/ ctx[17](/*amount*/ ctx[71])
    			: /*manaIcons*/ ctx[16][/*key*/ ctx[70]])) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*manaRequirements*/ 8 && img_alt_value !== (img_alt_value = "" + (/*key*/ ctx[70] + " mana icon"))) {
    				attr_dev(img, "alt", img_alt_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(1007:14) {#if manaIcons[key]}",
    		ctx
    	});

    	return block;
    }

    // (1003:6) {#each Object.entries(manaRequirements) as [key, amount]}
    function create_each_block_1$2(ctx) {
    	let show_if = /*activeManaTypes*/ ctx[6][/*key*/ ctx[70]] || /*customCards*/ ctx[1].length > 0 && /*customCards*/ ctx[1].some(func);
    	let if_block_anchor;

    	function func(...args) {
    		return /*func*/ ctx[32](/*key*/ ctx[70], ...args);
    	}

    	let if_block = show_if && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*activeManaTypes, manaRequirements, customCards*/ 74) show_if = /*activeManaTypes*/ ctx[6][/*key*/ ctx[70]] || /*customCards*/ ctx[1].length > 0 && /*customCards*/ ctx[1].some(func);

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(1003:6) {#each Object.entries(manaRequirements) as [key, amount]}",
    		ctx
    	});

    	return block;
    }

    // (1029:8) {#each Array.from(uniqueAttributes) as attr}
    function create_each_block$5(ctx) {
    	let div;
    	let label;
    	let t0_value = /*attr*/ ctx[67] + "";
    	let t0;
    	let t1;
    	let label_for_value;
    	let t2;
    	let input;
    	let input_id_value;
    	let input_value_value;
    	let t3;
    	let mounted;
    	let dispose;

    	function input_handler_1(...args) {
    		return /*input_handler_1*/ ctx[50](/*attr*/ ctx[67], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			label = element("label");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			input = element("input");
    			t3 = space();
    			attr_dev(label, "for", label_for_value = "custom-" + /*attr*/ ctx[67].replace(/\s+/g, '_'));
    			attr_dev(label, "class", "svelte-mks43d");
    			add_location(label, file$8, 1030, 10, 32727);
    			attr_dev(input, "id", input_id_value = "custom-" + /*attr*/ ctx[67].replace(/\s+/g, '_'));
    			attr_dev(input, "type", "number");
    			attr_dev(input, "min", "0");
    			input.value = input_value_value = /*customAttributeRequirements*/ ctx[4][/*attr*/ ctx[67]];
    			attr_dev(input, "class", "svelte-mks43d");
    			add_location(input, file$8, 1031, 10, 32803);
    			attr_dev(div, "class", "mana-requirement svelte-mks43d");
    			add_location(div, file$8, 1029, 8, 32685);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, label);
    			append_dev(label, t0);
    			append_dev(label, t1);
    			append_dev(div, t2);
    			append_dev(div, input);
    			append_dev(div, t3);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", input_handler_1, false, false, false, false),
    					listen_dev(input, "focus", selectInput$2, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*uniqueAttributes*/ 32 && t0_value !== (t0_value = /*attr*/ ctx[67] + "")) set_data_dev(t0, t0_value);

    			if (dirty[0] & /*uniqueAttributes*/ 32 && label_for_value !== (label_for_value = "custom-" + /*attr*/ ctx[67].replace(/\s+/g, '_'))) {
    				attr_dev(label, "for", label_for_value);
    			}

    			if (dirty[0] & /*uniqueAttributes*/ 32 && input_id_value !== (input_id_value = "custom-" + /*attr*/ ctx[67].replace(/\s+/g, '_'))) {
    				attr_dev(input, "id", input_id_value);
    			}

    			if (dirty[0] & /*customAttributeRequirements, uniqueAttributes*/ 48 && input_value_value !== (input_value_value = /*customAttributeRequirements*/ ctx[4][/*attr*/ ctx[67]]) && input.value !== input_value_value) {
    				prop_dev(input, "value", input_value_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(1029:8) {#each Array.from(uniqueAttributes) as attr}",
    		ctx
    	});

    	return block;
    }

    // (1073:10) 
    function create_trigger_slot$3(ctx) {
    	let button;
    	let fontawesomeicon;
    	let current;
    	let mounted;
    	let dispose;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: {
    				style: "height: 1.2em; vertical-align: -0.155em; color:#0066e9;",
    				icon: faQuestionCircle
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(fontawesomeicon.$$.fragment);
    			set_style(button, "margin-left", "4px");
    			attr_dev(button, "class", "moreInfo");
    			attr_dev(button, "slot", "trigger");
    			attr_dev(button, "tabindex", "-1");
    			add_location(button, file$8, 1072, 10, 34395);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(fontawesomeicon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_2*/ ctx[52], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(fontawesomeicon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_trigger_slot$3.name,
    		type: "slot",
    		source: "(1073:10) ",
    		ctx
    	});

    	return block;
    }

    // (1076:10) 
    function create_content_slot$3(ctx) {
    	let div;
    	let p0;
    	let b;
    	let t1;
    	let p1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p0 = element("p");
    			b = element("b");
    			b.textContent = "Caution - increasing this may crash your browser!";
    			t1 = space();
    			p1 = element("p");
    			p1.textContent = "This parameter changes the number of samples taken for this advanced probabilities section. More iterations will result in more accurate probabilities, but increases the calculation time. Consider increasing this in 1000-2000 increments to test how it impacts simulation time.";
    			add_location(b, file$8, 1076, 58, 34753);
    			attr_dev(p0, "class", "popover-content popover-text-fixer svelte-mks43d");
    			add_location(p0, file$8, 1076, 12, 34707);
    			attr_dev(p1, "class", "popover-content popover-text-fixer svelte-mks43d");
    			add_location(p1, file$8, 1077, 12, 34823);
    			attr_dev(div, "slot", "content");
    			add_location(div, file$8, 1075, 10, 34673);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p0);
    			append_dev(p0, b);
    			append_dev(div, t1);
    			append_dev(div, p1);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot$3.name,
    		type: "slot",
    		source: "(1076:10) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let div15;
    	let div14;
    	let div0;
    	let h3;
    	let t0;
    	let img0;
    	let img0_src_value;
    	let t1;
    	let img1;
    	let img1_src_value;
    	let t2;
    	let img2;
    	let img2_src_value;
    	let t3;
    	let img3;
    	let img3_src_value;
    	let t4;
    	let img4;
    	let img4_src_value;
    	let t5;
    	let current_block_type_index;
    	let if_block;
    	let t6;
    	let div13;
    	let p0;
    	let t7;
    	let span;
    	let t9;
    	let popover0;
    	let updating_show;
    	let t10;
    	let p1;
    	let strong0;
    	let t12;
    	let t13;
    	let div1;
    	let each_blocks_4 = [];
    	let each0_lookup = new Map();
    	let t14;
    	let div3;
    	let button0;
    	let t16;
    	let div2;
    	let t17;
    	let b0;
    	let t18;
    	let t19;
    	let hr0;
    	let t20;
    	let div4;
    	let each_blocks_3 = [];
    	let each1_lookup = new Map();
    	let t21;
    	let div6;
    	let button1;
    	let t23;
    	let div5;
    	let t24;
    	let b1;
    	let t25;
    	let t26;
    	let hr1;
    	let t27;
    	let div7;
    	let each_blocks_2 = [];
    	let each2_lookup = new Map();
    	let t28;
    	let div9;
    	let button2;
    	let t30;
    	let popover1;
    	let updating_show_1;
    	let t31;
    	let div8;
    	let t32;
    	let b2;
    	let t33;
    	let t34;
    	let p2;
    	let i;
    	let t36;
    	let hr2;
    	let t37;
    	let p3;
    	let strong1;
    	let t39;
    	let t40;
    	let div10;
    	let t41;
    	let t42;
    	let hr3;
    	let t43;
    	let p4;
    	let strong2;
    	let t45;
    	let t46;
    	let div12;
    	let button3;
    	let t47;
    	let button3_disabled_value;
    	let t48;
    	let button4;
    	let t49;
    	let button4_disabled_value;
    	let t50;
    	let div11;
    	let label;
    	let t52;
    	let input;
    	let t53;
    	let popover2;
    	let updating_show_2;
    	let t54;
    	let simulationmulligansaccordion;
    	let div13_transition;
    	let div15_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_2$1, create_else_block_1$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*isOpen*/ ctx[8]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	function popover0_show_binding(value) {
    		/*popover0_show_binding*/ ctx[37](value);
    	}

    	let popover0_props = {
    		placement: "top",
    		$$slots: {
    			content: [create_content_slot_2$1],
    			trigger: [create_trigger_slot_2$1]
    		},
    		$$scope: { ctx }
    	};

    	if (/*showPopover*/ ctx[9] !== void 0) {
    		popover0_props.show = /*showPopover*/ ctx[9];
    	}

    	popover0 = new Popover({ props: popover0_props, $$inline: true });
    	binding_callbacks.push(() => bind(popover0, 'show', popover0_show_binding));
    	let each_value_4 = /*manaCards*/ ctx[0];
    	validate_each_argument(each_value_4);
    	const get_key = ctx => /*card*/ ctx[74].id;
    	validate_each_keys(ctx, each_value_4, get_each_context_4$1, get_key);

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		let child_ctx = get_each_context_4$1(ctx, each_value_4, i);
    		let key = get_key(child_ctx);
    		each0_lookup.set(key, each_blocks_4[i] = create_each_block_4$1(key, child_ctx));
    	}

    	let each_value_3 = /*rampCards*/ ctx[2];
    	validate_each_argument(each_value_3);
    	const get_key_1 = ctx => /*card*/ ctx[74].id;
    	validate_each_keys(ctx, each_value_3, get_each_context_3$1, get_key_1);

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		let child_ctx = get_each_context_3$1(ctx, each_value_3, i);
    		let key = get_key_1(child_ctx);
    		each1_lookup.set(key, each_blocks_3[i] = create_each_block_3$1(key, child_ctx));
    	}

    	let each_value_2 = /*customCards*/ ctx[1];
    	validate_each_argument(each_value_2);
    	const get_key_2 = ctx => /*card*/ ctx[74].id;
    	validate_each_keys(ctx, each_value_2, get_each_context_2$1, get_key_2);

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		let child_ctx = get_each_context_2$1(ctx, each_value_2, i);
    		let key = get_key_2(child_ctx);
    		each2_lookup.set(key, each_blocks_2[i] = create_each_block_2$1(key, child_ctx));
    	}

    	function popover1_show_binding(value) {
    		/*popover1_show_binding*/ ctx[48](value);
    	}

    	let popover1_props = {
    		placement: "top",
    		$$slots: {
    			content: [create_content_slot_1$2],
    			trigger: [create_trigger_slot_1$1]
    		},
    		$$scope: { ctx }
    	};

    	if (/*showPopover*/ ctx[9] !== void 0) {
    		popover1_props.show = /*showPopover*/ ctx[9];
    	}

    	popover1 = new Popover({ props: popover1_props, $$inline: true });
    	binding_callbacks.push(() => bind(popover1, 'show', popover1_show_binding));
    	let each_value_1 = Object.entries(/*manaRequirements*/ ctx[3]);
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	let each_value = Array.from(/*uniqueAttributes*/ ctx[5]);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	function popover2_show_binding(value) {
    		/*popover2_show_binding*/ ctx[53](value);
    	}

    	let popover2_props = {
    		placement: "top",
    		$$slots: {
    			content: [create_content_slot$3],
    			trigger: [create_trigger_slot$3]
    		},
    		$$scope: { ctx }
    	};

    	if (/*showPopover*/ ctx[9] !== void 0) {
    		popover2_props.show = /*showPopover*/ ctx[9];
    	}

    	popover2 = new Popover({ props: popover2_props, $$inline: true });
    	binding_callbacks.push(() => bind(popover2, 'show', popover2_show_binding));
    	simulationmulligansaccordion = new SimulationMulligansAccordion({ $$inline: true });

    	const block = {
    		c: function create() {
    			div15 = element("div");
    			div14 = element("div");
    			div0 = element("div");
    			h3 = element("h3");
    			t0 = text("Monte Carlo Simulation\r\n     \r\n    ");
    			img0 = element("img");
    			t1 = space();
    			img1 = element("img");
    			t2 = space();
    			img2 = element("img");
    			t3 = space();
    			img3 = element("img");
    			t4 = space();
    			img4 = element("img");
    			t5 = space();
    			if_block.c();
    			t6 = space();
    			div13 = element("div");
    			p0 = element("p");
    			t7 = text("Simulate the chance you'll get the colors you need in your hand or on the field. ");
    			span = element("span");
    			span.textContent = "Probabilities from this section do not take into account cards from the above Hypergeometric Calculator.";
    			t9 = text(" To learn more, click the info button ->       \r\n        ");
    			create_component(popover0.$$.fragment);
    			t10 = space();
    			p1 = element("p");
    			strong0 = element("strong");
    			strong0.textContent = "Step 1";
    			t12 = text(" - Add all of the mana producing cards in your deck. Custom groups only work in hand simulations (see the custom groups (?) button for more details).");
    			t13 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				each_blocks_4[i].c();
    			}

    			t14 = space();
    			div3 = element("div");
    			button0 = element("button");
    			button0.textContent = "Add Land Group";
    			t16 = space();
    			div2 = element("div");
    			t17 = text("Total land cards: ");
    			b0 = element("b");
    			t18 = text(/*totalAmount*/ ctx[14]);
    			t19 = space();
    			hr0 = element("hr");
    			t20 = space();
    			div4 = element("div");

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			t21 = space();
    			div6 = element("div");
    			button1 = element("button");
    			button1.textContent = "Add Ramp Group";
    			t23 = space();
    			div5 = element("div");
    			t24 = text("Total ramp cards: ");
    			b1 = element("b");
    			t25 = text(/*totalRampAmount*/ ctx[13]);
    			t26 = space();
    			hr1 = element("hr");
    			t27 = space();
    			div7 = element("div");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t28 = space();
    			div9 = element("div");
    			button2 = element("button");
    			button2.textContent = "Add Custom Group";
    			t30 = space();
    			create_component(popover1.$$.fragment);
    			t31 = space();
    			div8 = element("div");
    			t32 = text("Total custom cards: ");
    			b2 = element("b");
    			t33 = text(/*totalCustomAmount*/ ctx[12]);
    			t34 = space();
    			p2 = element("p");
    			i = element("i");
    			i.textContent = "Custom cards can only be used for hand simulations.";
    			t36 = space();
    			hr2 = element("hr");
    			t37 = space();
    			p3 = element("p");
    			strong1 = element("strong");
    			strong1.textContent = "Step 2";
    			t39 = text(" - Specify the amount of each mana, card, or attribute you would like. Note that this assumes a separate card for each mana/card/attribute.");
    			t40 = space();
    			div10 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t41 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t42 = space();
    			hr3 = element("hr");
    			t43 = space();
    			p4 = element("p");
    			strong2 = element("strong");
    			strong2.textContent = "Step 3";
    			t45 = text(" - Run the simulation. You can add advanced mulligan logic too.");
    			t46 = space();
    			div12 = element("div");
    			button3 = element("button");
    			t47 = text("Run Field Simulation");
    			t48 = space();
    			button4 = element("button");
    			t49 = text("Run Hand Simulation");
    			t50 = space();
    			div11 = element("div");
    			label = element("label");
    			label.textContent = "Simulation iterations (caution):";
    			t52 = space();
    			input = element("input");
    			t53 = space();
    			create_component(popover2.$$.fragment);
    			t54 = space();
    			create_component(simulationmulligansaccordion.$$.fragment);
    			if (!src_url_equal(img0.src, img0_src_value = img$f)) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Plains");
    			attr_dev(img0, "class", "mana-icon svelte-mks43d");
    			add_location(img0, file$8, 895, 4, 25694);
    			if (!src_url_equal(img1.src, img1_src_value = img$e)) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Swamp");
    			attr_dev(img1, "class", "mana-icon svelte-mks43d");
    			add_location(img1, file$8, 896, 4, 25750);
    			if (!src_url_equal(img2.src, img2_src_value = img$d)) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "Island");
    			attr_dev(img2, "class", "mana-icon svelte-mks43d");
    			add_location(img2, file$8, 897, 4, 25805);
    			if (!src_url_equal(img3.src, img3_src_value = img$c)) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", "Mountain");
    			attr_dev(img3, "class", "mana-icon svelte-mks43d");
    			add_location(img3, file$8, 898, 4, 25861);
    			if (!src_url_equal(img4.src, img4_src_value = img$b)) attr_dev(img4, "src", img4_src_value);
    			attr_dev(img4, "alt", "Forest");
    			attr_dev(img4, "class", "mana-icon svelte-mks43d");
    			add_location(img4, file$8, 899, 4, 25919);
    			set_style(h3, "font-size", "18px");
    			set_style(h3, "display", "flex");
    			set_style(h3, "align-items", "center");
    			set_style(h3, "gap", "4px");
    			attr_dev(h3, "class", "svelte-mks43d");
    			add_location(h3, file$8, 892, 0, 25576);
    			attr_dev(div0, "class", "accordion-title svelte-mks43d");
    			attr_dev(div0, "tabindex", "0");
    			add_location(div0, file$8, 885, 4, 25321);
    			attr_dev(span, "class", "semi-bold svelte-mks43d");
    			add_location(span, file$8, 913, 118, 26460);
    			set_style(p0, "margin-top", "0.5rem");
    			attr_dev(p0, "class", "svelte-mks43d");
    			add_location(p0, file$8, 913, 6, 26348);
    			add_location(strong0, file$8, 929, 37, 28247);
    			set_style(p1, "margin-top", "0.5rem");
    			attr_dev(p1, "class", "svelte-mks43d");
    			add_location(p1, file$8, 929, 6, 28216);
    			attr_dev(div1, "class", "mana-cards-container svelte-mks43d");
    			add_location(div1, file$8, 930, 6, 28431);
    			add_location(button0, file$8, 939, 8, 28701);
    			add_location(b0, file$8, 940, 31, 28800);
    			add_location(div2, file$8, 940, 8, 28777);
    			attr_dev(div3, "class", "land-group-parameters svelte-mks43d");
    			add_location(div3, file$8, 938, 6, 28656);
    			attr_dev(hr0, "class", "secondary-divider");
    			add_location(hr0, file$8, 945, 6, 28897);
    			attr_dev(div4, "class", "mana-cards-container svelte-mks43d");
    			add_location(div4, file$8, 948, 6, 28939);
    			add_location(button1, file$8, 959, 8, 29226);
    			add_location(b1, file$8, 960, 31, 29325);
    			add_location(div5, file$8, 960, 8, 29302);
    			attr_dev(div6, "class", "land-group-parameters svelte-mks43d");
    			add_location(div6, file$8, 958, 6, 29181);
    			attr_dev(hr1, "class", "secondary-divider");
    			add_location(hr1, file$8, 964, 6, 29432);
    			attr_dev(div7, "class", "mana-cards-container svelte-mks43d");
    			add_location(div7, file$8, 967, 6, 29474);
    			add_location(button2, file$8, 980, 6, 29991);
    			add_location(b2, file$8, 990, 33, 31162);
    			add_location(div8, file$8, 990, 8, 31137);
    			attr_dev(div9, "class", "land-group-parameters svelte-mks43d");
    			add_location(div9, file$8, 979, 4, 29948);
    			add_location(i, file$8, 992, 41, 31250);
    			set_style(p2, "margin", "8px 8px 16px 0px");
    			attr_dev(p2, "class", "svelte-mks43d");
    			add_location(p2, file$8, 992, 4, 31213);
    			attr_dev(hr2, "class", "primary-divider");
    			add_location(hr2, file$8, 995, 9, 31375);
    			add_location(strong1, file$8, 1000, 9, 31461);
    			attr_dev(p3, "class", "svelte-mks43d");
    			add_location(p3, file$8, 1000, 6, 31458);
    			attr_dev(div10, "class", "mana-requirements-container svelte-mks43d");
    			add_location(div10, file$8, 1001, 4, 31633);
    			attr_dev(hr3, "class", "primary-divider");
    			add_location(hr3, file$8, 1044, 13, 33230);
    			add_location(strong2, file$8, 1049, 16, 33330);
    			attr_dev(p4, "class", "svelte-mks43d");
    			add_location(p4, file$8, 1049, 13, 33327);
    			attr_dev(button3, "class", "primary-btn");
    			button3.disabled = button3_disabled_value = !/*enableSimulationButton*/ ctx[15];
    			add_location(button3, file$8, 1054, 8, 33486);
    			attr_dev(button4, "class", "secondary-btn");
    			button4.disabled = button4_disabled_value = !/*enableSimulationButton*/ ctx[15];
    			add_location(button4, file$8, 1058, 8, 33651);
    			attr_dev(label, "for", "iterations");
    			attr_dev(label, "class", "svelte-mks43d");
    			add_location(label, file$8, 1067, 8, 34114);
    			set_style(input, "width", "90px");
    			attr_dev(input, "id", "iterations");
    			attr_dev(input, "type", "number");
    			attr_dev(input, "min", "1");
    			attr_dev(input, "class", "svelte-mks43d");
    			add_location(input, file$8, 1068, 8, 34188);
    			attr_dev(div11, "class", "mana-requirement svelte-mks43d");
    			add_location(div11, file$8, 1066, 8, 34074);
    			attr_dev(div12, "class", "land-group-parameters svelte-mks43d");
    			add_location(div12, file$8, 1052, 6, 33433);
    			attr_dev(div13, "class", "answer svelte-mks43d");
    			set_style(div13, "height", /*openItem*/ ctx[7] === 0 ? 'auto' : '0');
    			add_location(div13, file$8, 907, 6, 26158);
    			attr_dev(div14, "class", "accordion-item svelte-mks43d");
    			add_location(div14, file$8, 884, 2, 25287);
    			attr_dev(div15, "class", div15_class_value = "accordion " + (/*isHovering*/ ctx[11] ? 'hovering' : '') + " svelte-mks43d");
    			add_location(div15, file$8, 881, 0, 25110);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div15, anchor);
    			append_dev(div15, div14);
    			append_dev(div14, div0);
    			append_dev(div0, h3);
    			append_dev(h3, t0);
    			append_dev(h3, img0);
    			append_dev(h3, t1);
    			append_dev(h3, img1);
    			append_dev(h3, t2);
    			append_dev(h3, img2);
    			append_dev(h3, t3);
    			append_dev(h3, img3);
    			append_dev(h3, t4);
    			append_dev(h3, img4);
    			append_dev(div0, t5);
    			if_blocks[current_block_type_index].m(div0, null);
    			append_dev(div14, t6);
    			append_dev(div14, div13);
    			append_dev(div13, p0);
    			append_dev(p0, t7);
    			append_dev(p0, span);
    			append_dev(p0, t9);
    			mount_component(popover0, p0, null);
    			append_dev(div13, t10);
    			append_dev(div13, p1);
    			append_dev(p1, strong0);
    			append_dev(p1, t12);
    			append_dev(div13, t13);
    			append_dev(div13, div1);

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				if (each_blocks_4[i]) {
    					each_blocks_4[i].m(div1, null);
    				}
    			}

    			append_dev(div13, t14);
    			append_dev(div13, div3);
    			append_dev(div3, button0);
    			append_dev(div3, t16);
    			append_dev(div3, div2);
    			append_dev(div2, t17);
    			append_dev(div2, b0);
    			append_dev(b0, t18);
    			append_dev(div13, t19);
    			append_dev(div13, hr0);
    			append_dev(div13, t20);
    			append_dev(div13, div4);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				if (each_blocks_3[i]) {
    					each_blocks_3[i].m(div4, null);
    				}
    			}

    			append_dev(div13, t21);
    			append_dev(div13, div6);
    			append_dev(div6, button1);
    			append_dev(div6, t23);
    			append_dev(div6, div5);
    			append_dev(div5, t24);
    			append_dev(div5, b1);
    			append_dev(b1, t25);
    			append_dev(div13, t26);
    			append_dev(div13, hr1);
    			append_dev(div13, t27);
    			append_dev(div13, div7);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				if (each_blocks_2[i]) {
    					each_blocks_2[i].m(div7, null);
    				}
    			}

    			append_dev(div13, t28);
    			append_dev(div13, div9);
    			append_dev(div9, button2);
    			append_dev(div9, t30);
    			mount_component(popover1, div9, null);
    			append_dev(div9, t31);
    			append_dev(div9, div8);
    			append_dev(div8, t32);
    			append_dev(div8, b2);
    			append_dev(b2, t33);
    			append_dev(div13, t34);
    			append_dev(div13, p2);
    			append_dev(p2, i);
    			append_dev(div13, t36);
    			append_dev(div13, hr2);
    			append_dev(div13, t37);
    			append_dev(div13, p3);
    			append_dev(p3, strong1);
    			append_dev(p3, t39);
    			append_dev(div13, t40);
    			append_dev(div13, div10);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				if (each_blocks_1[i]) {
    					each_blocks_1[i].m(div10, null);
    				}
    			}

    			append_dev(div10, t41);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div10, null);
    				}
    			}

    			append_dev(div13, t42);
    			append_dev(div13, hr3);
    			append_dev(div13, t43);
    			append_dev(div13, p4);
    			append_dev(p4, strong2);
    			append_dev(p4, t45);
    			append_dev(div13, t46);
    			append_dev(div13, div12);
    			append_dev(div12, button3);
    			append_dev(button3, t47);
    			append_dev(div12, t48);
    			append_dev(div12, button4);
    			append_dev(button4, t49);
    			append_dev(div12, t50);
    			append_dev(div12, div11);
    			append_dev(div11, label);
    			append_dev(div11, t52);
    			append_dev(div11, input);
    			set_input_value(input, /*iterations*/ ctx[10]);
    			append_dev(div11, t53);
    			mount_component(popover2, div11, null);
    			append_dev(div13, t54);
    			mount_component(simulationmulligansaccordion, div13, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*handleToggleAccordionClick*/ ctx[20], false, false, false, false),
    					listen_dev(div0, "keydown", /*keydown_handler*/ ctx[33], false, false, false, false),
    					listen_dev(div0, "mouseenter", /*mouseenter_handler*/ ctx[34], false, false, false, false),
    					listen_dev(div0, "mouseleave", /*mouseleave_handler*/ ctx[35], false, false, false, false),
    					listen_dev(button0, "click", /*handleAddManaGroupClick*/ ctx[21], false, false, false, false),
    					listen_dev(button1, "click", /*handleAddRampGroupClick*/ ctx[22], false, false, false, false),
    					listen_dev(button2, "click", /*handleAddCustomGroupClick*/ ctx[23], false, false, false, false),
    					listen_dev(button3, "click", /*handleRunSimulationClick*/ ctx[18], false, false, false, false),
    					listen_dev(button4, "click", /*handleRunHandSimulationClick*/ ctx[19], false, false, false, false),
    					listen_dev(input, "input", /*input_input_handler*/ ctx[51]),
    					listen_dev(input, "focus", selectInput$2, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div0, null);
    			}

    			const popover0_changes = {};

    			if (dirty[0] & /*showPopover*/ 512 | dirty[2] & /*$$scope*/ 524288) {
    				popover0_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_show && dirty[0] & /*showPopover*/ 512) {
    				updating_show = true;
    				popover0_changes.show = /*showPopover*/ ctx[9];
    				add_flush_callback(() => updating_show = false);
    			}

    			popover0.$set(popover0_changes);

    			if (dirty[0] & /*manaCards, removeCard*/ 33554433) {
    				each_value_4 = /*manaCards*/ ctx[0];
    				validate_each_argument(each_value_4);
    				group_outros();
    				validate_each_keys(ctx, each_value_4, get_each_context_4$1, get_key);
    				each_blocks_4 = update_keyed_each(each_blocks_4, dirty, get_key, 1, ctx, each_value_4, each0_lookup, div1, outro_and_destroy_block, create_each_block_4$1, null, get_each_context_4$1);
    				check_outros();
    			}

    			if (!current || dirty[0] & /*totalAmount*/ 16384) set_data_dev(t18, /*totalAmount*/ ctx[14]);

    			if (dirty[0] & /*rampCards, removeRampCard*/ 67108868) {
    				each_value_3 = /*rampCards*/ ctx[2];
    				validate_each_argument(each_value_3);
    				group_outros();
    				validate_each_keys(ctx, each_value_3, get_each_context_3$1, get_key_1);
    				each_blocks_3 = update_keyed_each(each_blocks_3, dirty, get_key_1, 1, ctx, each_value_3, each1_lookup, div4, outro_and_destroy_block, create_each_block_3$1, null, get_each_context_3$1);
    				check_outros();
    			}

    			if (!current || dirty[0] & /*totalRampAmount*/ 8192) set_data_dev(t25, /*totalRampAmount*/ ctx[13]);

    			if (dirty[0] & /*customCards, removeCustomCard, updateCustomAttributeRequirements, handleAttributeUpdate*/ 1744830466) {
    				each_value_2 = /*customCards*/ ctx[1];
    				validate_each_argument(each_value_2);
    				group_outros();
    				validate_each_keys(ctx, each_value_2, get_each_context_2$1, get_key_2);
    				each_blocks_2 = update_keyed_each(each_blocks_2, dirty, get_key_2, 1, ctx, each_value_2, each2_lookup, div7, outro_and_destroy_block, create_each_block_2$1, null, get_each_context_2$1);
    				check_outros();
    			}

    			const popover1_changes = {};

    			if (dirty[0] & /*showPopover*/ 512 | dirty[2] & /*$$scope*/ 524288) {
    				popover1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_show_1 && dirty[0] & /*showPopover*/ 512) {
    				updating_show_1 = true;
    				popover1_changes.show = /*showPopover*/ ctx[9];
    				add_flush_callback(() => updating_show_1 = false);
    			}

    			popover1.$set(popover1_changes);
    			if (!current || dirty[0] & /*totalCustomAmount*/ 4096) set_data_dev(t33, /*totalCustomAmount*/ ctx[12]);

    			if (dirty[0] & /*manaRequirements, getAnyIcon, manaIcons, activeManaTypes, customCards*/ 196682 | dirty[1] & /*handleInput*/ 1) {
    				each_value_1 = Object.entries(/*manaRequirements*/ ctx[3]);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$2(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div10, t41);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty[0] & /*uniqueAttributes, customAttributeRequirements, updateCustomAttribute*/ 268435504) {
    				each_value = Array.from(/*uniqueAttributes*/ ctx[5]);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div10, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (!current || dirty[0] & /*enableSimulationButton*/ 32768 && button3_disabled_value !== (button3_disabled_value = !/*enableSimulationButton*/ ctx[15])) {
    				prop_dev(button3, "disabled", button3_disabled_value);
    			}

    			if (!current || dirty[0] & /*enableSimulationButton*/ 32768 && button4_disabled_value !== (button4_disabled_value = !/*enableSimulationButton*/ ctx[15])) {
    				prop_dev(button4, "disabled", button4_disabled_value);
    			}

    			if (dirty[0] & /*iterations*/ 1024 && to_number(input.value) !== /*iterations*/ ctx[10]) {
    				set_input_value(input, /*iterations*/ ctx[10]);
    			}

    			const popover2_changes = {};

    			if (dirty[0] & /*showPopover*/ 512 | dirty[2] & /*$$scope*/ 524288) {
    				popover2_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_show_2 && dirty[0] & /*showPopover*/ 512) {
    				updating_show_2 = true;
    				popover2_changes.show = /*showPopover*/ ctx[9];
    				add_flush_callback(() => updating_show_2 = false);
    			}

    			popover2.$set(popover2_changes);

    			if (dirty[0] & /*openItem*/ 128) {
    				set_style(div13, "height", /*openItem*/ ctx[7] === 0 ? 'auto' : '0');
    			}

    			if (!current || dirty[0] & /*isHovering*/ 2048 && div15_class_value !== (div15_class_value = "accordion " + (/*isHovering*/ ctx[11] ? 'hovering' : '') + " svelte-mks43d")) {
    				attr_dev(div15, "class", div15_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(popover0.$$.fragment, local);

    			for (let i = 0; i < each_value_4.length; i += 1) {
    				transition_in(each_blocks_4[i]);
    			}

    			for (let i = 0; i < each_value_3.length; i += 1) {
    				transition_in(each_blocks_3[i]);
    			}

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks_2[i]);
    			}

    			transition_in(popover1.$$.fragment, local);
    			transition_in(popover2.$$.fragment, local);
    			transition_in(simulationmulligansaccordion.$$.fragment, local);

    			if (local) {
    				add_render_callback(() => {
    					if (!current) return;
    					if (!div13_transition) div13_transition = create_bidirectional_transition(div13, slide, { duration: 250 }, true);
    					div13_transition.run(1);
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(popover0.$$.fragment, local);

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				transition_out(each_blocks_4[i]);
    			}

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				transition_out(each_blocks_3[i]);
    			}

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				transition_out(each_blocks_2[i]);
    			}

    			transition_out(popover1.$$.fragment, local);
    			transition_out(popover2.$$.fragment, local);
    			transition_out(simulationmulligansaccordion.$$.fragment, local);

    			if (local) {
    				if (!div13_transition) div13_transition = create_bidirectional_transition(div13, slide, { duration: 250 }, false);
    				div13_transition.run(0);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div15);
    			if_blocks[current_block_type_index].d();
    			destroy_component(popover0);

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				each_blocks_4[i].d();
    			}

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].d();
    			}

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].d();
    			}

    			destroy_component(popover1);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			destroy_component(popover2);
    			destroy_component(simulationmulligansaccordion);
    			if (detaching && div13_transition) div13_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function simplifyColorsCanProduce(colorsCanProduce) {
    	return Object.fromEntries(Object.entries(colorsCanProduce).filter(([color, count]) => count > 0).map(([color, count]) => [color, 1]));
    }

    function selectInput$2(event) {
    	event.target.select(); // Selects all text in the input upon focus
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let enableSimulationButton;
    	let totalAmount;
    	let totalRampAmount;
    	let filteredManaRequirements;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MonteAccordion', slots, []);

    	const manaIcons = {
    		W: img$f,
    		U: img$e,
    		B: img$d,
    		R: img$c,
    		G: img$b,
    		C: img$a,
    		ANY: [
    			img$9,
    			img$8,
    			img$7,
    			img$6,
    			img$5,
    			img$4,
    			img$3,
    			img$2,
    			img$1,
    			img
    		]
    	};

    	let openItem = 0; // this sets the accordion to open on page load. can set to "null" to be closed on page load. 
    	let isOpen = true; // Track the open/close state
    	let showPopover = false;
    	const dispatch = createEventDispatcher();
    	let manaCards = [];
    	let customCards = [];
    	let rampCards = [];

    	let manaRequirements = {
    		W: 0,
    		U: 0,
    		B: 0,
    		R: 0,
    		G: 0,
    		C: 0,
    		ANY: 0
    	}; // Initialize mana requirements

    	let iterations = 5000; // Default number of iterations
    	let customAttributeRequirements = {}; // New variable for custom attributes
    	let uniqueAttributes = new Set();
    	let activeManaTypes = {};
    	let isHovering = false;
    	let totalCustomAmount = 0; // This will hold the sum of all custom cards' amounts

    	function getAnyIcon(value) {
    		if (value <= 0) return manaIcons.ANY[0];
    		if (value === 1) return manaIcons.ANY[1];
    		if (value === 2) return manaIcons.ANY[2];
    		if (value === 3) return manaIcons.ANY[3];
    		if (value === 4) return manaIcons.ANY[4];
    		if (value === 5) return manaIcons.ANY[5];
    		if (value === 6) return manaIcons.ANY[6];
    		if (value === 7) return manaIcons.ANY[7];
    		if (value === 8) return manaIcons.ANY[8];
    		if (value >= 9) return manaIcons.ANY[9];
    		return manaIcons.ANY[0]; // Default to AnyIcon1 if none of the conditions match
    	}

    	// Generic function to handle button clicks and send analytics---------------------------
    	function handleRunSimulationClick() {
    		logPreparedCards(); // Call the original function to run the simulation

    		trackEvent('run_simulation_click', {
    			'event_label': 'User clicked Run Simulation button'
    		});
    	}

    	function handleRunHandSimulationClick() {
    		logPreparedCards('hand'); // Pass 'hand' to indicate hand simulation

    		trackEvent('run_hand_simulation_click', {
    			'event_label': 'User clicked Run Hand Simulation button'
    		});
    	}

    	function handleToggleAccordionClick() {
    		toggleItem(0); // Assuming toggleItem toggles the visibility of accordion item

    		trackEvent('toggle_monte_accordion_click', {
    			'event_label': 'User toggled the monte carlo simulation accordion'
    		});
    	}

    	function handleAddManaGroupClick() {
    		addCard(); // Call the original function to add a mana group

    		trackEvent('add_mana_group_click', {
    			'event_label': 'User clicked Add Mana Group button'
    		});
    	}

    	function handleAddRampGroupClick() {
    		addRampCard();

    		trackEvent('add_ramp_group_click', {
    			'event_label': 'User clicked Add Ramp Group button'
    		});
    	}

    	function handleAddCustomGroupClick() {
    		addCustomCard(); // Call the original function to add a custom group

    		trackEvent('add_custom_group_click', {
    			'event_label': 'User clicked Add Custom Group button'
    		});
    	}

    	//------------------------------
    	function ClearSimulation() {
    		// Reset simulation data
    		monteCarloResults.set([]);

    		shouldResetSimulation.set(true);

    		// Optional: reset shouldResetSimulation after a microtask to allow other components to detect the change
    		setTimeout(() => shouldResetSimulation.set(false), 0);
    	}

    	function toggleItem(index) {
    		$$invalidate(7, openItem = openItem === index ? null : index);
    		$$invalidate(8, isOpen = !isOpen); // Toggle the open/close state
    	}

    	function handleKeydown(event, index) {
    		if (event.key === 'Enter') {
    			toggleItem(index);
    		}
    	}

    	function addCard() {
    		const newCard = {
    			id: Date.now(),
    			mana: {
    				W: false,
    				U: false,
    				B: false,
    				R: false,
    				G: false,
    				C: false
    			},
    			amount: 0
    		};

    		$$invalidate(0, manaCards = [...manaCards, newCard]);
    		console.log('Added card:', newCard);
    	}

    	function removeCard(id) {
    		$$invalidate(0, manaCards = manaCards.filter(card => card.id !== id));
    	}

    	function addRampCard() {
    		const newRampCard = {
    			id: Date.now(),
    			TotalManaCost: {
    				B: 0,
    				U: 0,
    				G: 0,
    				R: 0,
    				W: 0,
    				C: 0,
    				ANY: 0
    			},
    			ColorsCanProduce: {
    				B: 0,
    				U: 0,
    				G: 0,
    				R: 0,
    				W: 0,
    				C: 0,
    				ANY: 0
    			},
    			CanProduce: 1,
    			AbilityCost: 0,
    			AvailableTurnPlayed: 0,
    			amount: 0
    		};

    		$$invalidate(2, rampCards = [...rampCards, newRampCard]);
    		console.log('Added ramp card:', newRampCard);
    	}

    	function removeRampCard(id) {
    		$$invalidate(2, rampCards = rampCards.filter(card => card.id !== id));
    	}

    	function addCustomCard() {
    		const newCustomCard = {
    			id: Date.now(),
    			title: `Group ${customCards.length + 1}`,
    			attributes: [],
    			amount: 0
    		};

    		$$invalidate(1, customCards = [...customCards, newCustomCard]);
    	}

    	function removeCustomCard(id) {
    		// Find the custom card that is being removed
    		const removedCard = customCards.find(card => card.id === id);

    		// Remove the custom card from the array
    		$$invalidate(1, customCards = customCards.filter(card => card.id !== id));

    		updateCustomAttributeRequirements();

    		// Remove the title and attributes from manaRequirements and create a new object
    		if (removedCard) {
    			let newManaRequirements = { ...manaRequirements };
    			delete newManaRequirements[removedCard.title];

    			removedCard.attributes.forEach(attr => {
    				delete newManaRequirements[attr];
    			});

    			$$invalidate(3, manaRequirements = newManaRequirements);
    		}
    	}

    	// Update function for custom attributes
    	function updateCustomAttribute(attr, value) {
    		console.log(`Updating custom attribute ${attr} to value:`, value);
    		$$invalidate(4, customAttributeRequirements[attr] = Number(value), customAttributeRequirements);
    		updateCustomAttributeRequirements(); // Ensure updating custom attribute requirements
    		console.log(`Updated customAttributeRequirements:`, customAttributeRequirements);
    	}

    	function mergeCustomAttributesIntoManaRequirements() {
    		Object.entries(customAttributeRequirements).forEach(([key, value]) => {
    			$$invalidate(3, manaRequirements[key] = value, manaRequirements);
    		});

    		console.log("Merged manaRequirements:", manaRequirements);
    	}

    	function updateCustomAttributeRequirements() {
    		const allAttributes = customCards.flatMap(card => card.attributes);
    		const newRequirements = {};

    		// Only add current attributes, initializing them to existing values or 0.
    		allAttributes.forEach(attr => {
    			newRequirements[attr] = customAttributeRequirements[attr] || 0;
    		});

    		// By completely replacing the object, we ensure Svelte detects the change.
    		$$invalidate(4, customAttributeRequirements = newRequirements);

    		// Optionally, trigger attribute updates if needed (simulate with no changes)
    		allAttributes.forEach(attr => {
    			// This is hypothetical and may need adjustment:
    			handleAttributeUpdate(attr, attr);
    		});

    		mergeCustomAttributesIntoManaRequirements(); // Ensure merging custom attributes
    		console.log('Updated customAttributeRequirements:', customAttributeRequirements);
    	}

    	function handleAttributeUpdate(newAttr, oldAttr, cardId) {
    		// Update the customCard attributes
    		$$invalidate(1, customCards = customCards.map(card => {
    			if (card.id === cardId) {
    				return {
    					...card,
    					attributes: card.attributes.map(attr => attr === oldAttr ? newAttr : attr)
    				};
    			}

    			return card;
    		}));

    		// Update the uniqueAttributes set
    		uniqueAttributes.delete(oldAttr);

    		uniqueAttributes.add(newAttr);

    		// Trigger reactivity by converting the set to an array
    		$$invalidate(5, uniqueAttributes = new Set([...uniqueAttributes]));

    		// Update the customAttributeRequirements object
    		const oldValue = customAttributeRequirements[oldAttr] || 0;

    		delete customAttributeRequirements[oldAttr];
    		$$invalidate(4, customAttributeRequirements[newAttr] = oldValue, customAttributeRequirements);
    		console.log('Updated customCards:', customCards);
    		console.log('Updated uniqueAttributes:', uniqueAttributes);
    		console.log('Updated customAttributeRequirements:', customAttributeRequirements);
    	}

    	// const rampCards = [
    	//     // {
    	//     //     TotalManaCost: { B: 0, U: 0, G: 0, R: 0, W: 0, C: 0, ANY: 1 },
    	//     //     ColorsCanProduce: { B: 0, U: 0, G: 0, R: 0, W: 0, C: 0, ANY: 1 },
    	//     //     CanProduce: 2,
    	//     //     AbilityCost: 0,
    	//     //     AvailableTurnPlayed: 1,
    	//     //     amount: 7
    	//     // },
    	//     // {
    	//     //     TotalManaCost: { B: 0, U: 0, G: 1, R: 0, W: 0, C: 0, ANY: 1 },
    	//     //     ColorsCanProduce: { B: 0, U: 0, G: 1, R: 1, W: 0, C: 0, ANY: 1 },
    	//     //     CanProduce: 1,
    	//     //     AbilityCost: 0,
    	//     //     AvailableTurnPlayed: 0,
    	//     //     amount: 25
    	//     // }
    	//     {
    	//         TotalManaCost: { B: 0, U: 0, G: 2, R: 0, W: 0, C: 0, ANY: 1 },
    	//         ColorsCanProduce: { B: 1, U: 1, G: 1, R: 1, W: 1, C: 0, ANY: 1 },
    	//         CanProduce: 1,
    	//         AbilityCost: 0,
    	//         AvailableTurnPlayed: 0,
    	//         amount: 4
    	//     },
    	//     {
    	//         TotalManaCost: { B: 0, U: 0, G: 1, R: 0, W: 0, C: 0, ANY: 1 },
    	//         ColorsCanProduce: { B: 1, U: 1, G: 1, R: 1, W: 1, C: 0, ANY: 1 },
    	//         CanProduce: 1,
    	//         AbilityCost: 0,
    	//         AvailableTurnPlayed: 0,
    	//         amount: 2
    	//     },
    	//     {
    	//         TotalManaCost: { B: 0, U: 0, G: 1, R: 0, W: 0, C: 0, ANY: 1 },
    	//         ColorsCanProduce: { B: 0, U: 1, G: 1, R: 1, W: 0, C: 0, ANY: 1 },
    	//         CanProduce: 1,
    	//         AbilityCost: 0,
    	//         AvailableTurnPlayed: 1,
    	//         amount: 5
    	//     },
    	//     {
    	//         TotalManaCost: { B: 0, U: 0, G: 1, R: 0, W: 0, C: 0, ANY: 1 },
    	//         ColorsCanProduce: { B: 0, U: 0, G: 0, R: 1, W: 1, C: 0, ANY: 1 },
    	//         CanProduce: 1,
    	//         AbilityCost: 0,
    	//         AvailableTurnPlayed: 1,
    	//         amount: 5
    	//     },
    	//     {
    	//         TotalManaCost: { B: 0, U: 0, G: 1, R: 0, W: 0, C: 0, ANY: 0 },
    	//         ColorsCanProduce: { B: 0, U: 0, G: 1, R: 0, W: 0, C: 0, ANY: 1 },
    	//         CanProduce: 1,
    	//         AbilityCost: 0,
    	//         AvailableTurnPlayed: 0,
    	//         amount: 6
    	//     }
    	// {
    	//     TotalManaCost: { B: 0, U: 0, G: 1, R: 0, W: 0, C: 0, ANY: 2 },
    	//     ColorsCanProduce: { B: 0, U: 0, G: 1, R: 0, W: 0, C: 0, ANY: 1 },
    	//     CanProduce: 1,
    	//     AbilityCost: 0,
    	//     AvailableTurnPlayed: 0,
    	//     amount: 7
    	// },
    	// {
    	//     TotalManaCost: { B: 0, U: 0, G: 1, R: 0, W: 0, C: 0, ANY: 0 },
    	//     ColorsCanProduce: { B: 0, U: 0, G: 1, R: 0, W: 0, C: 0, ANY: 1 },
    	//     CanProduce: 1,
    	//     AbilityCost: 0,
    	//     AvailableTurnPlayed: 0,
    	//     amount: 7
    	// }
    	// {
    	//     TotalManaCost: { B: 0, U: 0, G: 1, R: 1, W: 0, C: 0, ANY: 0 },
    	//     ColorsCanProduce: { B: 0, U: 0, G: 1, R: 1, W: 0, C: 0, ANY: 0 },
    	//     CanProduce: 2,
    	//     AbilityCost: 1,
    	//     amount: 1
    	// },
    	// {
    	//     TotalManaCost: { B: 0, U: 0, G: 0, R: 0, W: 1, C: 1, ANY: 0 },
    	//     ColorsCanProduce: { B: 0, U: 0, G: 0, R: 0, W: 1, C: 1, ANY: 0 },
    	//     CanProduce: 2,
    	//     AbilityCost: 1,
    	//     amount: 1
    	// },
    	// {
    	//     TotalManaCost: { B: 1, U: 0, G: 1, R: 0, W: 0, C: 0, ANY: 0 },
    	//     ColorsCanProduce: { B: 1, U: 0, G: 1, R: 0, W: 0, C: 0, ANY: 0 },
    	//     CanProduce: 2,
    	//     AbilityCost: 1,
    	//     amount: 1
    	// },
    	// {
    	//     TotalManaCost: { B: 0, U: 1, G: 0, R: 1, W: 0, C: 0, ANY: 0 },
    	//     ColorsCanProduce: { B: 0, U: 1, G: 0, R: 1, W: 0, C: 0, ANY: 0 },
    	//     CanProduce: 2,
    	//     AbilityCost: 1,
    	//     amount: 1
    	// }
    	// ];
    	// these two functions simplify ramp and prep it for processing combinations
    	// with the lands.
    	const manaOrder = ['ANY', 'W', 'U', 'B', 'R', 'G', 'C'];

    	function normalizeObject(obj) {
    		const orderedObj = {};

    		manaOrder.forEach(key => {
    			if (obj[key] !== undefined) {
    				orderedObj[key] = obj[key];
    			}
    		});

    		return orderedObj;
    	}

    	function preprocessRampCards(rampCards) {
    		const simplifiedRampManaList = rampCards.flatMap(card => {
    			const simplifiedColors = simplifyColorsCanProduce(card.ColorsCanProduce);
    			const normalizedColors = normalizeObject(simplifiedColors);
    			return Array(card.amount).fill(normalizedColors);
    		});

    		simplifiedRampMana.set(simplifiedRampManaList);
    		console.log('Simplified Ramp Mana:', simplifiedRampManaList);
    	}

    	//this preprocess is before I added normalizeObject step to ensure
    	//mana properties order matches between ramp and lands. need to confirm
    	//new logic does not mess with manapoolmeetsrequirements function
    	// function preprocessRampCards(rampCards) {
    	//     const simplifiedRampManaList = rampCards.flatMap(card => {
    	//         const simplifiedColors = simplifyColorsCanProduce(card.ColorsCanProduce);
    	//         return Array(card.amount).fill(simplifiedColors);
    	//     });
    	//     simplifiedRampMana.set(simplifiedRampManaList);
    	//     console.log('Simplified Ramp Mana:', simplifiedRampManaList);
    	// }
    	function prepareManaCardsForCalculation() {
    		let preparedCards = [];

    		// Add logic for custom cards
    		customCards.forEach(card => {
    			let cardEntry = { [card.title]: 1 };

    			card.attributes.forEach(attr => {
    				cardEntry[attr] = 1;
    			});

    			for (let i = 0; i < card.amount; i++) {
    				preparedCards.push(cardEntry);
    			}
    		});

    		// Existing logic for mana cards
    		manaCards.forEach(card => {
    			let cardEntry = Object.entries(card.mana).filter(([key, value]) => value).reduce(
    				(acc, [key, value]) => {
    					acc[key] = 1;
    					return acc;
    				},
    				{ ANY: 1 }
    			); // Add generic mana

    			for (let i = 0; i < card.amount; i++) {
    				preparedCards.push(cardEntry);
    			}
    		});

    		// Add logic for ramp cards
    		rampCards.forEach(card => {
    			for (let i = 0; i < card.amount; i++) {
    				preparedCards.push(card);
    			}
    		});

    		return preparedCards;
    	}

    	function logPreparedCards(type = 'full') {
    		const preparedCards = prepareManaCardsForCalculation();
    		console.log('Prepared Cards:', preparedCards);

    		// Filter out entries with zero values
    		const filteredManaRequirements = Object.entries(manaRequirements).reduce(
    			(acc, [key, value]) => {
    				if (value > 0) acc[key] = value;
    				return acc;
    			},
    			{}
    		);

    		console.log('Mana Requirements:', filteredManaRequirements);
    		preprocessRampCards(rampCards); // Preprocess ramp cards

    		simulationData.set({
    			preparedCards: prepareManaCardsForCalculation(),
    			manaRequirements: filteredManaRequirements,
    			iterations
    		});

    		simulationType.set(type); // Set the simulation type
    	}

    	function handleInput(key, value) {
    		console.log(`Input event for ${key}:`, value);

    		// Convert input value to number, ensure NaN values are reverted to zero
    		let numberValue = Number(value);

    		$$invalidate(3, manaRequirements[key] = isNaN(numberValue) ? 0 : numberValue, manaRequirements);
    	}

    	const writable_props = [];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$4.warn(`<MonteAccordion> was created with unknown prop '${key}'`);
    	});

    	const func = (key, card) => card.title === key;
    	const keydown_handler = event => handleKeydown(event, 0);
    	const mouseenter_handler = () => $$invalidate(11, isHovering = true);
    	const mouseleave_handler = () => $$invalidate(11, isHovering = false);
    	const click_handler = () => $$invalidate(9, showPopover = !showPopover);

    	function popover0_show_binding(value) {
    		showPopover = value;
    		$$invalidate(9, showPopover);
    	}

    	function manacard_card_binding(value, card, each_value_4, card_index_2) {
    		each_value_4[card_index_2] = value;
    		$$invalidate(0, manaCards);
    	}

    	const remove_handler = card => removeCard(card.id);

    	function rampcard_card_binding(value, card, each_value_3, card_index_1) {
    		each_value_3[card_index_1] = value;
    		$$invalidate(2, rampCards);
    	}

    	const remove_handler_1 = card => removeRampCard(card.id);

    	function customcard_card_binding(value, card, each_value_2, card_index) {
    		each_value_2[card_index] = value;
    		$$invalidate(1, customCards);
    	}

    	const remove_handler_2 = card => removeCustomCard(card.id);
    	const removeattribute_handler = ({ detail }) => updateCustomAttributeRequirements();
    	const updateattribute_handler = (card, { detail }) => handleAttributeUpdate(detail, card.id);
    	const addattribute_handler = ({ detail }) => updateCustomAttributeRequirements();
    	const click_handler_1 = () => $$invalidate(9, showPopover = !showPopover);

    	function popover1_show_binding(value) {
    		showPopover = value;
    		$$invalidate(9, showPopover);
    	}

    	const input_handler = (key, e) => handleInput(key, e.target.value);
    	const input_handler_1 = (attr, e) => updateCustomAttribute(attr, e.target.value);

    	function input_input_handler() {
    		iterations = to_number(this.value);
    		$$invalidate(10, iterations);
    	}

    	const click_handler_2 = () => $$invalidate(9, showPopover = !showPopover);

    	function popover2_show_binding(value) {
    		showPopover = value;
    		$$invalidate(9, showPopover);
    	}

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		ManaCard,
    		RampCard,
    		CustomCard,
    		slide,
    		Popover,
    		FontAwesomeIcon,
    		faQuestionCircle,
    		faChevronDown,
    		faChevronUp,
    		simulationData,
    		simulationType,
    		simplifiedRampMana,
    		monteCarloResults,
    		shouldResetSimulation,
    		trackEvent,
    		writable,
    		SimulationMulligansAccordion,
    		WIcon: img$f,
    		UIcon: img$e,
    		BIcon: img$d,
    		RIcon: img$c,
    		GIcon: img$b,
    		CIcon: img$a,
    		AnyIcon0: img$9,
    		AnyIcon1: img$8,
    		AnyIcon2: img$7,
    		AnyIcon3: img$6,
    		AnyIcon4: img$5,
    		AnyIcon5: img$4,
    		AnyIcon6: img$3,
    		AnyIcon7: img$2,
    		AnyIcon8: img$1,
    		AnyIcon9: img,
    		faYenSign,
    		manaIcons,
    		openItem,
    		isOpen,
    		showPopover,
    		dispatch,
    		manaCards,
    		customCards,
    		rampCards,
    		manaRequirements,
    		iterations,
    		customAttributeRequirements,
    		uniqueAttributes,
    		activeManaTypes,
    		isHovering,
    		totalCustomAmount,
    		getAnyIcon,
    		handleRunSimulationClick,
    		handleRunHandSimulationClick,
    		handleToggleAccordionClick,
    		handleAddManaGroupClick,
    		handleAddRampGroupClick,
    		handleAddCustomGroupClick,
    		ClearSimulation,
    		toggleItem,
    		handleKeydown,
    		addCard,
    		removeCard,
    		addRampCard,
    		removeRampCard,
    		addCustomCard,
    		removeCustomCard,
    		updateCustomAttribute,
    		mergeCustomAttributesIntoManaRequirements,
    		updateCustomAttributeRequirements,
    		handleAttributeUpdate,
    		manaOrder,
    		normalizeObject,
    		simplifyColorsCanProduce,
    		preprocessRampCards,
    		prepareManaCardsForCalculation,
    		logPreparedCards,
    		handleInput,
    		selectInput: selectInput$2,
    		filteredManaRequirements,
    		totalRampAmount,
    		totalAmount,
    		enableSimulationButton
    	});

    	$$self.$inject_state = $$props => {
    		if ('openItem' in $$props) $$invalidate(7, openItem = $$props.openItem);
    		if ('isOpen' in $$props) $$invalidate(8, isOpen = $$props.isOpen);
    		if ('showPopover' in $$props) $$invalidate(9, showPopover = $$props.showPopover);
    		if ('manaCards' in $$props) $$invalidate(0, manaCards = $$props.manaCards);
    		if ('customCards' in $$props) $$invalidate(1, customCards = $$props.customCards);
    		if ('rampCards' in $$props) $$invalidate(2, rampCards = $$props.rampCards);
    		if ('manaRequirements' in $$props) $$invalidate(3, manaRequirements = $$props.manaRequirements);
    		if ('iterations' in $$props) $$invalidate(10, iterations = $$props.iterations);
    		if ('customAttributeRequirements' in $$props) $$invalidate(4, customAttributeRequirements = $$props.customAttributeRequirements);
    		if ('uniqueAttributes' in $$props) $$invalidate(5, uniqueAttributes = $$props.uniqueAttributes);
    		if ('activeManaTypes' in $$props) $$invalidate(6, activeManaTypes = $$props.activeManaTypes);
    		if ('isHovering' in $$props) $$invalidate(11, isHovering = $$props.isHovering);
    		if ('totalCustomAmount' in $$props) $$invalidate(12, totalCustomAmount = $$props.totalCustomAmount);
    		if ('filteredManaRequirements' in $$props) filteredManaRequirements = $$props.filteredManaRequirements;
    		if ('totalRampAmount' in $$props) $$invalidate(13, totalRampAmount = $$props.totalRampAmount);
    		if ('totalAmount' in $$props) $$invalidate(14, totalAmount = $$props.totalAmount);
    		if ('enableSimulationButton' in $$props) $$invalidate(15, enableSimulationButton = $$props.enableSimulationButton);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*manaCards*/ 1) {
    			//this tracks what mana types are selected in cards, so we only show the relevant
    			//fields in the manaRequirements section
    			{
    				let types = {
    					B: false,
    					U: false,
    					G: false,
    					R: false,
    					W: false,
    					C: false,
    					ANY: false
    				};

    				let anyActive = false;

    				manaCards.forEach(card => {
    					Object.keys(card.mana).forEach(type => {
    						if (card.mana[type]) {
    							types[type] = true;

    							if (type !== 'ANY') {
    								anyActive = true; // Set to true if any specific mana type is true
    							}
    						}
    					});
    				});

    				// Only set ANY active if any specific mana type is active, ignoring custom cards for ANY visibility
    				types.ANY = anyActive;

    				$$invalidate(6, activeManaTypes = types);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*manaRequirements, activeManaTypes, customCards*/ 74) {
    			// Reactive statement to update mana requirements
    			{
    				// Remove mana types from manaRequirements if they are no longer active and not part of custom groups
    				Object.keys(manaRequirements).forEach(color => {
    					if (!activeManaTypes[color] && !customCards.some(card => card.title === color || card.attributes.includes(color))) {
    						delete manaRequirements[color];
    					}
    				});

    				// Ensure all active mana types are present in manaRequirements
    				Object.keys(activeManaTypes).forEach(color => {
    					if (activeManaTypes[color] && !(color in manaRequirements)) {
    						$$invalidate(3, manaRequirements[color] = 0, manaRequirements);
    					}
    				});

    				// Ensure custom groups are present in manaRequirements
    				customCards.forEach(card => {
    					if (!(card.title in manaRequirements)) {
    						$$invalidate(3, manaRequirements[card.title] = 0, manaRequirements);
    					}

    					card.attributes.forEach(attr => {
    						if (!(attr in manaRequirements)) {
    							$$invalidate(3, manaRequirements[attr] = 0, manaRequirements);
    						}
    					});
    				});
    			}
    		}

    		if ($$self.$$.dirty[0] & /*customCards, manaRequirements*/ 10) {
    			{
    				customCards.forEach(card => {
    					$$invalidate(3, manaRequirements[card.title] = manaRequirements[card.title] || 0, manaRequirements);

    					card.attributes.forEach(attrName => {
    						$$invalidate(3, manaRequirements[attrName] = manaRequirements[attrName] || 0, manaRequirements);
    					});
    				});

    				// Remove keys from manaRequirements that are no longer in customCards
    				Object.keys(manaRequirements).forEach(key => {
    					if (!customCards.some(card => card.title === key || card.attributes.includes(key)) && !(key in manaIcons)) {
    						delete manaRequirements[key];
    					}
    				});

    				mergeCustomAttributesIntoManaRequirements(); // Ensure merging custom attributes
    				console.log("Updated manaRequirements:", manaRequirements);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*customCards, manaRequirements*/ 10) {
    			{
    				// Update manaRequirements based on customCards titles
    				customCards.forEach(card => {
    					if (!(card.title in manaRequirements)) {
    						$$invalidate(3, manaRequirements[card.title] = 0, manaRequirements); // Initialize if the title is new
    					}
    				});

    				// Remove keys from manaRequirements that are no longer in customCards
    				Object.keys(manaRequirements).forEach(key => {
    					if (!customCards.some(card => card.title === key) && !(key in manaIcons)) {
    						delete manaRequirements[key];
    					}
    				});

    				mergeCustomAttributesIntoManaRequirements(); // Ensure merging custom attributes
    			}
    		}

    		if ($$self.$$.dirty[0] & /*customCards, manaRequirements*/ 10) {
    			{
    				console.log('Custom Cards:', customCards);

    				customCards.forEach(card => {
    					$$invalidate(3, manaRequirements[card.title] = manaRequirements[card.title] || 0, manaRequirements);

    					card.attributes.forEach(attr => {
    						$$invalidate(3, manaRequirements[attr] = manaRequirements[attr] || 0, manaRequirements);
    					});
    				});

    				mergeCustomAttributesIntoManaRequirements(); // Ensure merging custom attributes
    				console.log("Updated manaRequirements (attributes):", manaRequirements);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*customCards, manaRequirements*/ 10) {
    			{
    				// Update manaRequirements based on customCards
    				customCards.forEach(card => {
    					$$invalidate(3, manaRequirements[card.title] = manaRequirements[card.title] || 0, manaRequirements);

    					card.attributes.forEach(attr => {
    						$$invalidate(3, manaRequirements[attr] = manaRequirements[attr] || 0, manaRequirements);
    					});
    				});
    			}
    		}

    		if ($$self.$$.dirty[0] & /*customCards, customAttributeRequirements*/ 18) {
    			// Reactivity for custom attributes
    			{
    				customCards.forEach(card => {
    					card.attributes.forEach(attr => {
    						if (!(attr in customAttributeRequirements)) {
    							$$invalidate(4, customAttributeRequirements[attr] = 0, customAttributeRequirements); // Initialize if the attribute is new
    						}
    					});
    				});

    				// Remove keys from customAttributeRequirements that are no longer in customCards
    				Object.keys(customAttributeRequirements).forEach(key => {
    					if (!customCards.some(card => card.attributes.includes(key))) {
    						delete customAttributeRequirements[key];
    					}
    				});

    				mergeCustomAttributesIntoManaRequirements();
    			}
    		}

    		if ($$self.$$.dirty[0] & /*manaRequirements, customAttributeRequirements, manaCards, customCards*/ 27) {
    			$$invalidate(15, enableSimulationButton = (Object.values(manaRequirements).some(amount => amount > 0) || Object.values(customAttributeRequirements).some(amount => amount > 0)) && (manaCards.some(card => card.amount > 0) || customCards.some(card => card.amount > 0)));
    		}

    		if ($$self.$$.dirty[0] & /*manaCards*/ 1) {
    			{
    				console.log('Updated manaCards:', manaCards);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*manaCards*/ 1) {
    			$$invalidate(14, totalAmount = manaCards.reduce((sum, card) => sum + card.amount, 0));
    		}

    		if ($$self.$$.dirty[0] & /*rampCards*/ 4) {
    			$$invalidate(13, totalRampAmount = rampCards.reduce((sum, card) => sum + card.amount, 0));
    		}

    		if ($$self.$$.dirty[0] & /*customCards*/ 2) {
    			$$invalidate(12, totalCustomAmount = customCards.reduce((sum, card) => sum + card.amount, 0));
    		}

    		if ($$self.$$.dirty[0] & /*uniqueAttributes, customCards*/ 34) {
    			{
    				uniqueAttributes.clear();

    				customCards.forEach(card => {
    					card.attributes.forEach(attr => {
    						uniqueAttributes.add(attr);
    					});
    				});

    				console.log("Unique attributes:", uniqueAttributes);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*manaRequirements, customCards*/ 10) {
    			filteredManaRequirements = Object.fromEntries(Object.entries(manaRequirements).filter(([key]) => !customCards.some(card => card.attributes.includes(key))));
    		}
    	};

    	return [
    		manaCards,
    		customCards,
    		rampCards,
    		manaRequirements,
    		customAttributeRequirements,
    		uniqueAttributes,
    		activeManaTypes,
    		openItem,
    		isOpen,
    		showPopover,
    		iterations,
    		isHovering,
    		totalCustomAmount,
    		totalRampAmount,
    		totalAmount,
    		enableSimulationButton,
    		manaIcons,
    		getAnyIcon,
    		handleRunSimulationClick,
    		handleRunHandSimulationClick,
    		handleToggleAccordionClick,
    		handleAddManaGroupClick,
    		handleAddRampGroupClick,
    		handleAddCustomGroupClick,
    		handleKeydown,
    		removeCard,
    		removeRampCard,
    		removeCustomCard,
    		updateCustomAttribute,
    		updateCustomAttributeRequirements,
    		handleAttributeUpdate,
    		handleInput,
    		func,
    		keydown_handler,
    		mouseenter_handler,
    		mouseleave_handler,
    		click_handler,
    		popover0_show_binding,
    		manacard_card_binding,
    		remove_handler,
    		rampcard_card_binding,
    		remove_handler_1,
    		customcard_card_binding,
    		remove_handler_2,
    		removeattribute_handler,
    		updateattribute_handler,
    		addattribute_handler,
    		click_handler_1,
    		popover1_show_binding,
    		input_handler,
    		input_handler_1,
    		input_input_handler,
    		click_handler_2,
    		popover2_show_binding
    	];
    }

    class MonteAccordion extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {}, null, [-1, -1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MonteAccordion",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    var css_248z$7 = "";
    styleInject(css_248z$7);

    /* src\TurnDrawsAccordion.svelte generated by Svelte v3.59.2 */
    const file$7 = "src\\TurnDrawsAccordion.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	child_ctx[13] = i;
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    // (108:10) {:else}
    function create_else_block$2(ctx) {
    	let fontawesomeicon;
    	let current;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: {
    				icon: faChevronDown,
    				class: "chevron-icon"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(fontawesomeicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(fontawesomeicon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(fontawesomeicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(108:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (106:12) {#if openItem}
    function create_if_block$4(ctx) {
    	let fontawesomeicon;
    	let current;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: { icon: faChevronUp, class: "chevron-icon" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(fontawesomeicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(fontawesomeicon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(fontawesomeicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(106:12) {#if openItem}",
    		ctx
    	});

    	return block;
    }

    // (119:24) {#each Array.from({ length: 7 }, (_, i) => i + 1) as option}
    function create_each_block_1$1(ctx) {
    	let option;
    	let t_value = /*option*/ ctx[14] + "";
    	let t;
    	let option_selected_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*option*/ ctx[14];
    			option.value = option.__value;
    			option.selected = option_selected_value = /*option*/ ctx[14] === /*drawAmount*/ ctx[11];
    			add_location(option, file$7, 119, 28, 3781);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$numberOfTurns, Array*/ 1 && option_selected_value !== (option_selected_value = /*option*/ ctx[14] === /*drawAmount*/ ctx[11])) {
    				prop_dev(option, "selected", option_selected_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(119:24) {#each Array.from({ length: 7 }, (_, i) => i + 1) as option}",
    		ctx
    	});

    	return block;
    }

    // (116:16) {#each $numberOfTurns as drawAmount, turn}
    function create_each_block$4(ctx) {
    	let div;
    	let label;
    	let t0;
    	let t1_value = /*turn*/ ctx[13] + 1 + "";
    	let t1;
    	let t2;
    	let t3;
    	let select;
    	let select_value_value;
    	let t4;
    	let mounted;
    	let dispose;
    	let each_value_1 = Array.from({ length: 7 }, func);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	function change_handler(...args) {
    		return /*change_handler*/ ctx[8](/*turn*/ ctx[13], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			label = element("label");
    			t0 = text("Turn ");
    			t1 = text(t1_value);
    			t2 = text(":");
    			t3 = space();
    			select = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space();
    			attr_dev(label, "for", "drawAmount-" + /*turn*/ ctx[13]);
    			attr_dev(label, "class", "svelte-zojbfs");
    			add_location(label, file$7, 117, 20, 3479);
    			attr_dev(select, "id", "drawAmount-" + /*turn*/ ctx[13]);
    			attr_dev(select, "class", "svelte-zojbfs");
    			add_location(select, file$7, 117, 95, 3554);
    			attr_dev(div, "class", "draw-amount svelte-zojbfs");
    			add_location(div, file$7, 116, 16, 3432);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, label);
    			append_dev(label, t0);
    			append_dev(label, t1);
    			append_dev(label, t2);
    			append_dev(div, t3);
    			append_dev(div, select);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(select, null);
    				}
    			}

    			select_option(select, /*drawAmount*/ ctx[11]);
    			append_dev(div, t4);

    			if (!mounted) {
    				dispose = listen_dev(select, "change", change_handler, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*Array, $numberOfTurns*/ 1) {
    				each_value_1 = Array.from({ length: 7 }, func);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (dirty & /*$numberOfTurns, Array*/ 1 && select_value_value !== (select_value_value = /*drawAmount*/ ctx[11])) {
    				select_option(select, /*drawAmount*/ ctx[11]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(116:16) {#each $numberOfTurns as drawAmount, turn}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div4;
    	let div3;
    	let div0;
    	let h3;
    	let t1;
    	let current_block_type_index;
    	let if_block;
    	let t2;
    	let div2;
    	let p;
    	let t4;
    	let div1;
    	let div2_transition;
    	let div4_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$4, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*openItem*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let each_value = /*$numberOfTurns*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			h3 = element("h3");
    			h3.textContent = "Customize number of cards drawn each turn";
    			t1 = space();
    			if_block.c();
    			t2 = space();
    			div2 = element("div");
    			p = element("p");
    			p.textContent = "Change the number of cards you draw on any given turn. You can adjust the initial hand size above.";
    			t4 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			set_style(h3, "font-weight", "400");
    			attr_dev(h3, "class", "svelte-zojbfs");
    			add_location(h3, file$7, 103, 12, 2718);
    			attr_dev(div0, "class", "accordion-title svelte-zojbfs");
    			attr_dev(div0, "tabindex", "0");
    			add_location(div0, file$7, 97, 8, 2405);
    			set_style(p, "margin-top", "0.5rem");
    			attr_dev(p, "class", "svelte-zojbfs");
    			add_location(p, file$7, 113, 12, 3170);
    			attr_dev(div1, "class", "draw-amounts-container svelte-zojbfs");
    			add_location(div1, file$7, 114, 12, 3318);
    			attr_dev(div2, "class", "answer svelte-zojbfs");
    			set_style(div2, "height", /*openItem*/ ctx[1] ? 'auto' : '0');
    			add_location(div2, file$7, 112, 8, 3052);
    			attr_dev(div3, "class", "accordion-item svelte-zojbfs");
    			add_location(div3, file$7, 96, 4, 2367);
    			attr_dev(div4, "class", div4_class_value = "accordion " + (/*isHovering*/ ctx[2] ? 'hovering' : '') + " svelte-zojbfs");
    			add_location(div4, file$7, 93, 0, 2185);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    			append_dev(div3, div0);
    			append_dev(div0, h3);
    			append_dev(div0, t1);
    			if_blocks[current_block_type_index].m(div0, null);
    			append_dev(div3, t2);
    			append_dev(div3, div2);
    			append_dev(div2, p);
    			append_dev(div2, t4);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div1, null);
    				}
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler*/ ctx[4], false, false, false, false),
    					listen_dev(div0, "keydown", /*keydown_handler*/ ctx[5], false, false, false, false),
    					listen_dev(div0, "mouseenter", /*mouseenter_handler*/ ctx[6], false, false, false, false),
    					listen_dev(div0, "mouseleave", /*mouseleave_handler*/ ctx[7], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div0, null);
    			}

    			if (dirty & /*$numberOfTurns, handleDrawAmountChange, Array*/ 9) {
    				each_value = /*$numberOfTurns*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*openItem*/ 2) {
    				set_style(div2, "height", /*openItem*/ ctx[1] ? 'auto' : '0');
    			}

    			if (!current || dirty & /*isHovering*/ 4 && div4_class_value !== (div4_class_value = "accordion " + (/*isHovering*/ ctx[2] ? 'hovering' : '') + " svelte-zojbfs")) {
    				attr_dev(div4, "class", div4_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			if (local) {
    				add_render_callback(() => {
    					if (!current) return;
    					if (!div2_transition) div2_transition = create_bidirectional_transition(div2, slide, { duration: 250 }, true);
    					div2_transition.run(1);
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);

    			if (local) {
    				if (!div2_transition) div2_transition = create_bidirectional_transition(div2, slide, { duration: 250 }, false);
    				div2_transition.run(0);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			if_blocks[current_block_type_index].d();
    			destroy_each(each_blocks, detaching);
    			if (detaching && div2_transition) div2_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const func = (_, i) => i + 1;

    function instance$7($$self, $$props, $$invalidate) {
    	let $numberOfTurns;
    	validate_store(numberOfTurns, 'numberOfTurns');
    	component_subscribe($$self, numberOfTurns, $$value => $$invalidate(0, $numberOfTurns = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TurnDrawsAccordion', slots, []);
    	let drawAmounts = Array.from({ length: $numberOfTurns + 1 }, () => 1); // Initialize draw amounts
    	const dispatch = createEventDispatcher();

    	// Function to handle changes in the draw amount dropdown
    	function handleDrawAmountChange(turn, event) {
    		const value = parseInt(event.target.value, 10);
    		dispatch('drawAmountChange', { turn, value });
    	}

    	let openItem = false;
    	let isHovering = false;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TurnDrawsAccordion> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate(1, openItem = !openItem);
    	const keydown_handler = event => event.key === 'Enter' && $$invalidate(1, openItem = !openItem);
    	const mouseenter_handler = () => $$invalidate(2, isHovering = true);
    	const mouseleave_handler = () => $$invalidate(2, isHovering = false);
    	const change_handler = (turn, event) => handleDrawAmountChange(turn, event);

    	$$self.$capture_state = () => ({
    		writable,
    		slide,
    		createEventDispatcher,
    		numberOfTurns,
    		faChevronDown,
    		faChevronUp,
    		FontAwesomeIcon,
    		drawAmounts,
    		dispatch,
    		handleDrawAmountChange,
    		openItem,
    		isHovering,
    		$numberOfTurns
    	});

    	$$self.$inject_state = $$props => {
    		if ('drawAmounts' in $$props) drawAmounts = $$props.drawAmounts;
    		if ('openItem' in $$props) $$invalidate(1, openItem = $$props.openItem);
    		if ('isHovering' in $$props) $$invalidate(2, isHovering = $$props.isHovering);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$numberOfTurns*/ 1) {
    			drawAmounts = Array.from({ length: $numberOfTurns + 1 }, () => 1); // Update draw amounts when numberOfTurns changes
    		}
    	};

    	return [
    		$numberOfTurns,
    		openItem,
    		isHovering,
    		handleDrawAmountChange,
    		click_handler,
    		keydown_handler,
    		mouseenter_handler,
    		mouseleave_handler,
    		change_handler
    	];
    }

    class TurnDrawsAccordion extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TurnDrawsAccordion",
    			options,
    			id: create_fragment$7.name
    		});
    	}
    }

    var css_248z$6 = "";
    styleInject(css_248z$6);

    /* src\GroupDefinition.svelte generated by Svelte v3.59.2 */
    const file$6 = "src\\GroupDefinition.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[42] = list[i];
    	child_ctx[43] = list;
    	child_ctx[44] = i;
    	return child_ctx;
    }

    // (141:14) {:else}
    function create_else_block$1(ctx) {
    	let fontawesomeicon;
    	let current;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: {
    				icon: faChevronDown,
    				class: "chevron-icon"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(fontawesomeicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(fontawesomeicon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(fontawesomeicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(141:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (139:16) {#if openHypergeo}
    function create_if_block$3(ctx) {
    	let fontawesomeicon;
    	let current;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: { icon: faChevronUp, class: "chevron-icon" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(fontawesomeicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(fontawesomeicon, target, anchor);
    			current = true;
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(fontawesomeicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(139:16) {#if openHypergeo}",
    		ctx
    	});

    	return block;
    }

    // (156:24) 
    function create_trigger_slot_3(ctx) {
    	let button;
    	let fontawesomeicon;
    	let current;
    	let mounted;
    	let dispose;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: {
    				style: "height: 1.2em; vertical-align: -0.155em; color:#0066e9;",
    				icon: faQuestionCircle
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(fontawesomeicon.$$.fragment);
    			attr_dev(button, "class", "moreInfo svelte-1lfiur4");
    			attr_dev(button, "slot", "trigger");
    			attr_dev(button, "tabindex", "-1");
    			add_location(button, file$6, 155, 24, 5824);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(fontawesomeicon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_1*/ ctx[20], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(fontawesomeicon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_trigger_slot_3.name,
    		type: "slot",
    		source: "(156:24) ",
    		ctx
    	});

    	return block;
    }

    // (159:24) 
    function create_content_slot_3(ctx) {
    	let div;
    	let p0;
    	let t1;
    	let p1;
    	let b;
    	let t3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p0 = element("p");
    			p0.textContent = "In edh groups can be thought of as the similar cards you want to find the percent chance of drawing. For example, ramp, lands, interaction, etc. In 60-card formats this might be more focused around individual cards you have 2-4 of in your deck.";
    			t1 = space();
    			p1 = element("p");
    			b = element("b");
    			b.textContent = "Each group must have a unique text name";
    			t3 = text(" for the tool to work (some day I'll figure out indexing...)");
    			attr_dev(p0, "class", "popover-content svelte-1lfiur4");
    			add_location(p0, file$6, 159, 26, 6169);
    			add_location(b, file$6, 160, 53, 6499);
    			attr_dev(p1, "class", "popover-content svelte-1lfiur4");
    			add_location(p1, file$6, 160, 26, 6472);
    			attr_dev(div, "slot", "content");
    			add_location(div, file$6, 158, 24, 6121);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p0);
    			append_dev(div, t1);
    			append_dev(div, p1);
    			append_dev(p1, b);
    			append_dev(p1, t3);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot_3.name,
    		type: "slot",
    		source: "(159:24) ",
    		ctx
    	});

    	return block;
    }

    // (168:24) 
    function create_trigger_slot_2(ctx) {
    	let button;
    	let fontawesomeicon;
    	let current;
    	let mounted;
    	let dispose;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: {
    				style: "height: 1.2em; vertical-align: -0.155em; color:#0066e9;",
    				icon: faQuestionCircle
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(fontawesomeicon.$$.fragment);
    			attr_dev(button, "class", "moreInfo svelte-1lfiur4");
    			attr_dev(button, "slot", "trigger");
    			attr_dev(button, "tabindex", "-1");
    			add_location(button, file$6, 167, 24, 6922);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(fontawesomeicon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_2*/ ctx[22], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(fontawesomeicon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_trigger_slot_2.name,
    		type: "slot",
    		source: "(168:24) ",
    		ctx
    	});

    	return block;
    }

    // (171:24) 
    function create_content_slot_2(ctx) {
    	let div;
    	let p;
    	let t0;
    	let i;
    	let t2;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			t0 = text("Percent chance you'll draw ");
    			i = element("i");
    			i.textContent = "at least";
    			t2 = text(" this many cards from this group.");
    			add_location(i, file$6, 171, 82, 7323);
    			attr_dev(p, "class", "popover-content svelte-1lfiur4");
    			add_location(p, file$6, 171, 28, 7269);
    			attr_dev(div, "slot", "content");
    			add_location(div, file$6, 170, 24, 7219);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			append_dev(p, t0);
    			append_dev(p, i);
    			append_dev(p, t2);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot_2.name,
    		type: "slot",
    		source: "(171:24) ",
    		ctx
    	});

    	return block;
    }

    // (178:24) 
    function create_trigger_slot_1(ctx) {
    	let button;
    	let fontawesomeicon;
    	let current;
    	let mounted;
    	let dispose;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: {
    				style: "height: 1.2em; vertical-align: -0.155em; color:#0066e9;",
    				icon: faQuestionCircle
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(fontawesomeicon.$$.fragment);
    			attr_dev(button, "class", "moreInfo svelte-1lfiur4");
    			attr_dev(button, "slot", "trigger");
    			attr_dev(button, "tabindex", "-1");
    			add_location(button, file$6, 177, 24, 7594);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(fontawesomeicon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_3*/ ctx[24], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(fontawesomeicon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_trigger_slot_1.name,
    		type: "slot",
    		source: "(178:24) ",
    		ctx
    	});

    	return block;
    }

    // (181:24) 
    function create_content_slot_1$1(ctx) {
    	let div;
    	let p0;
    	let t0;
    	let i;
    	let t2;
    	let t3;
    	let p1;
    	let b;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p0 = element("p");
    			t0 = text("When groups have the same link name, the tool displays the percent chance of getting at least the minimum number of desired cards in ");
    			i = element("i");
    			i.textContent = "each";
    			t2 = text(" linked group.");
    			t3 = space();
    			p1 = element("p");
    			b = element("b");
    			b.textContent = "Groups must have the exact same link name (keyword match). The tool does not support linking more than 4 groups together currently.";
    			add_location(i, file$6, 181, 188, 8101);
    			attr_dev(p0, "class", "popover-content svelte-1lfiur4");
    			add_location(p0, file$6, 181, 28, 7941);
    			add_location(b, file$6, 182, 55, 8187);
    			attr_dev(p1, "class", "popover-content svelte-1lfiur4");
    			add_location(p1, file$6, 182, 28, 8160);
    			attr_dev(div, "slot", "content");
    			add_location(div, file$6, 180, 24, 7891);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p0);
    			append_dev(p0, t0);
    			append_dev(p0, i);
    			append_dev(p0, t2);
    			append_dev(div, t3);
    			append_dev(div, p1);
    			append_dev(p1, b);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot_1$1.name,
    		type: "slot",
    		source: "(181:24) ",
    		ctx
    	});

    	return block;
    }

    // (191:12) {#each groups as group, index}
    function create_each_block$3(ctx) {
    	let tr;
    	let td0;
    	let input0;
    	let t0;
    	let td1;
    	let input1;
    	let t1;
    	let td2;
    	let input2;
    	let t2;
    	let td3;
    	let input3;
    	let t3;
    	let td4;
    	let button;
    	let fontawesomeicon;
    	let t4;
    	let current;
    	let mounted;
    	let dispose;

    	function input0_input_handler() {
    		/*input0_input_handler*/ ctx[26].call(input0, /*each_value*/ ctx[43], /*index*/ ctx[44]);
    	}

    	function input1_input_handler() {
    		/*input1_input_handler*/ ctx[27].call(input1, /*each_value*/ ctx[43], /*index*/ ctx[44]);
    	}

    	function input2_input_handler() {
    		/*input2_input_handler*/ ctx[28].call(input2, /*each_value*/ ctx[43], /*index*/ ctx[44]);
    	}

    	function input3_input_handler() {
    		/*input3_input_handler*/ ctx[29].call(input3, /*each_value*/ ctx[43], /*index*/ ctx[44]);
    	}

    	fontawesomeicon = new FontAwesomeIcon({ props: { icon: faTimes }, $$inline: true });

    	function click_handler_4() {
    		return /*click_handler_4*/ ctx[30](/*index*/ ctx[44]);
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			input0 = element("input");
    			t0 = space();
    			td1 = element("td");
    			input1 = element("input");
    			t1 = space();
    			td2 = element("td");
    			input2 = element("input");
    			t2 = space();
    			td3 = element("td");
    			input3 = element("input");
    			t3 = space();
    			td4 = element("td");
    			button = element("button");
    			create_component(fontawesomeicon.$$.fragment);
    			t4 = space();
    			attr_dev(input0, "aria-label", "Group unique name");
    			attr_dev(input0, "class", "input-group svelte-1lfiur4");

    			set_style(input0, "--bg-color", /*$groupColors*/ ctx[8][/*group*/ ctx[42].link && /*group*/ ctx[42].link.trim()
    			? /*group*/ ctx[42].link
    			: /*group*/ ctx[42].name]);

    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "placeholder", "draw, ramp, removal, etc");
    			add_location(input0, file$6, 193, 24, 8615);
    			attr_dev(td0, "class", "svelte-1lfiur4");
    			add_location(td0, file$6, 192, 20, 8585);
    			attr_dev(input1, "aria-label", "Number of cards in group");
    			attr_dev(input1, "class", "input-group svelte-1lfiur4");

    			set_style(input1, "--bg-color", /*$groupColors*/ ctx[8][/*group*/ ctx[42].link && /*group*/ ctx[42].link.trim()
    			? /*group*/ ctx[42].link
    			: /*group*/ ctx[42].name]);

    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "min", "1");
    			attr_dev(input1, "max", "99");
    			add_location(input1, file$6, 210, 24, 9446);
    			attr_dev(td1, "class", "svelte-1lfiur4");
    			add_location(td1, file$6, 209, 20, 9416);
    			attr_dev(input2, "aria-label", "Minimum number of desired cards from group");
    			attr_dev(input2, "class", "input-group svelte-1lfiur4");

    			set_style(input2, "--bg-color", /*$groupColors*/ ctx[8][/*group*/ ctx[42].link && /*group*/ ctx[42].link.trim()
    			? /*group*/ ctx[42].link
    			: /*group*/ ctx[42].name]);

    			attr_dev(input2, "type", "number");
    			attr_dev(input2, "min", "1");
    			attr_dev(input2, "max", "99");
    			add_location(input2, file$6, 222, 24, 10033);
    			attr_dev(td2, "class", "svelte-1lfiur4");
    			add_location(td2, file$6, 221, 20, 10003);
    			attr_dev(input3, "aria-label", "Linked group name");
    			attr_dev(input3, "class", "input-group svelte-1lfiur4");

    			set_style(input3, "--bg-color", /*$groupColors*/ ctx[8][/*group*/ ctx[42].link && /*group*/ ctx[42].link.trim()
    			? /*group*/ ctx[42].link
    			: /*group*/ ctx[42].name]);

    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "placeholder", "Link via keyword matching...");
    			add_location(input3, file$6, 234, 24, 10645);
    			attr_dev(td3, "class", "svelte-1lfiur4");
    			add_location(td3, file$6, 233, 20, 10615);
    			attr_dev(button, "aria-label", "Remove group");
    			attr_dev(button, "class", "group-remove-button svelte-1lfiur4");
    			add_location(button, file$6, 243, 24, 11134);
    			attr_dev(td4, "class", "svelte-1lfiur4");
    			add_location(td4, file$6, 242, 20, 11104);
    			add_location(tr, file$6, 191, 16, 8559);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, input0);
    			set_input_value(input0, /*group*/ ctx[42].name);
    			append_dev(tr, t0);
    			append_dev(tr, td1);
    			append_dev(td1, input1);
    			set_input_value(input1, /*group*/ ctx[42].size);
    			append_dev(tr, t1);
    			append_dev(tr, td2);
    			append_dev(td2, input2);
    			set_input_value(input2, /*group*/ ctx[42].cardsToDraw);
    			append_dev(tr, t2);
    			append_dev(tr, td3);
    			append_dev(td3, input3);
    			set_input_value(input3, /*group*/ ctx[42].link);
    			append_dev(tr, t3);
    			append_dev(tr, td4);
    			append_dev(td4, button);
    			mount_component(fontawesomeicon, button, null);
    			append_dev(tr, t4);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", input0_input_handler),
    					listen_dev(input0, "focus", selectInput$1, false, false, false, false),
    					listen_dev(input1, "input", input1_input_handler),
    					listen_dev(input1, "focus", selectInput$1, false, false, false, false),
    					listen_dev(input2, "input", input2_input_handler),
    					listen_dev(input2, "focus", selectInput$1, false, false, false, false),
    					listen_dev(input3, "input", input3_input_handler),
    					listen_dev(button, "click", click_handler_4, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (!current || dirty[0] & /*$groupColors, groups*/ 257) {
    				set_style(input0, "--bg-color", /*$groupColors*/ ctx[8][/*group*/ ctx[42].link && /*group*/ ctx[42].link.trim()
    				? /*group*/ ctx[42].link
    				: /*group*/ ctx[42].name]);
    			}

    			if (dirty[0] & /*groups*/ 1 && input0.value !== /*group*/ ctx[42].name) {
    				set_input_value(input0, /*group*/ ctx[42].name);
    			}

    			if (!current || dirty[0] & /*$groupColors, groups*/ 257) {
    				set_style(input1, "--bg-color", /*$groupColors*/ ctx[8][/*group*/ ctx[42].link && /*group*/ ctx[42].link.trim()
    				? /*group*/ ctx[42].link
    				: /*group*/ ctx[42].name]);
    			}

    			if (dirty[0] & /*groups*/ 1 && to_number(input1.value) !== /*group*/ ctx[42].size) {
    				set_input_value(input1, /*group*/ ctx[42].size);
    			}

    			if (!current || dirty[0] & /*$groupColors, groups*/ 257) {
    				set_style(input2, "--bg-color", /*$groupColors*/ ctx[8][/*group*/ ctx[42].link && /*group*/ ctx[42].link.trim()
    				? /*group*/ ctx[42].link
    				: /*group*/ ctx[42].name]);
    			}

    			if (dirty[0] & /*groups*/ 1 && to_number(input2.value) !== /*group*/ ctx[42].cardsToDraw) {
    				set_input_value(input2, /*group*/ ctx[42].cardsToDraw);
    			}

    			if (!current || dirty[0] & /*$groupColors, groups*/ 257) {
    				set_style(input3, "--bg-color", /*$groupColors*/ ctx[8][/*group*/ ctx[42].link && /*group*/ ctx[42].link.trim()
    				? /*group*/ ctx[42].link
    				: /*group*/ ctx[42].name]);
    			}

    			if (dirty[0] & /*groups*/ 1 && input3.value !== /*group*/ ctx[42].link) {
    				set_input_value(input3, /*group*/ ctx[42].link);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_component(fontawesomeicon);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(191:12) {#each groups as group, index}",
    		ctx
    	});

    	return block;
    }

    // (258:16) 
    function create_trigger_slot$2(ctx) {
    	let button;
    	let fontawesomeicon;
    	let t;
    	let current;
    	let mounted;
    	let dispose;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: {
    				style: "height: 1.2em; vertical-align: -0.155em; color:#0066e9;",
    				icon: faQuestionCircle
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(fontawesomeicon.$$.fragment);
    			t = space();
    			attr_dev(button, "class", "moreInfo svelte-1lfiur4");
    			attr_dev(button, "slot", "trigger");
    			attr_dev(button, "tabindex", "-1");
    			add_location(button, file$6, 257, 16, 11734);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(fontawesomeicon, button, null);
    			append_dev(button, t);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler_5*/ ctx[31], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(fontawesomeicon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_trigger_slot$2.name,
    		type: "slot",
    		source: "(258:16) ",
    		ctx
    	});

    	return block;
    }

    // (261:16) 
    function create_content_slot$2(ctx) {
    	let div;
    	let p0;
    	let p1;
    	let t2;
    	let p2;
    	let t3;
    	let a;
    	let t5;
    	let t6;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p0 = element("p");
    			p0.textContent = "The London mulligan feature derives the cumulative probability of your initial draw, mulligans, and subsequent draw-1 turns.\r\n                    ";
    			p1 = element("p");
    			p1.textContent = "See the FAQs (bottom of this page) and github if you want to help confirm this logic (mulligan calculations have not been confirmed for setups with more than 1 desired card).";
    			t2 = space();
    			p2 = element("p");
    			t3 = text("Special thanks to Michael Moore for helping me understand the mathematics via ");
    			a = element("a");
    			a.textContent = "this post";
    			t5 = text(".");
    			t6 = space();
    			attr_dev(p0, "class", "popover-content svelte-1lfiur4");
    			add_location(p0, file$6, 261, 20, 12049);
    			attr_dev(p1, "class", "popover-content svelte-1lfiur4");
    			add_location(p1, file$6, 262, 20, 12222);
    			attr_dev(a, "href", "https://deckulator.blogspot.com/2022/07/mulligans-and-probability-redrawing.html");
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$6, 263, 125, 12554);
    			attr_dev(p2, "class", "popover-content svelte-1lfiur4");
    			add_location(p2, file$6, 263, 20, 12449);
    			attr_dev(div, "slot", "content");
    			add_location(div, file$6, 260, 16, 12007);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p0);
    			append_dev(div, p1);
    			append_dev(div, t2);
    			append_dev(div, p2);
    			append_dev(p2, t3);
    			append_dev(p2, a);
    			append_dev(p2, t5);
    			append_dev(div, t6);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot$2.name,
    		type: "slot",
    		source: "(261:16) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let h2;
    	let t1;
    	let p0;
    	let t3;
    	let p1;
    	let t4;
    	let a0;
    	let t6;
    	let t7;
    	let div11;
    	let div6;
    	let div5;
    	let div0;
    	let h3;
    	let t9;
    	let current_block_type_index;
    	let if_block;
    	let t10;
    	let div4;
    	let p2;
    	let t12;
    	let div1;
    	let table;
    	let thead;
    	let tr;
    	let th0;
    	let t13;
    	let popover0;
    	let updating_show;
    	let t14;
    	let th1;
    	let t16;
    	let th2;
    	let t17;
    	let popover1;
    	let updating_show_1;
    	let t18;
    	let th3;
    	let t19;
    	let popover2;
    	let updating_show_2;
    	let t20;
    	let th4;
    	let t21;
    	let tbody;
    	let t22;
    	let div3;
    	let button;
    	let t24;
    	let div2;
    	let label0;
    	let t25;
    	let popover3;
    	let updating_show_3;
    	let t26;
    	let t27;
    	let select;
    	let option0;
    	let option1;
    	let option2;
    	let option3;
    	let option4;
    	let t33;
    	let label1;
    	let i;
    	let t34;
    	let a1;
    	let t36;
    	let div4_transition;
    	let div6_class_value;
    	let t37;
    	let monteaccordion;
    	let t38;
    	let h4;
    	let t40;
    	let div10;
    	let div7;
    	let label2;
    	let t42;
    	let input0;
    	let t43;
    	let div8;
    	let label3;
    	let t45;
    	let input1;
    	let t46;
    	let div9;
    	let label4;
    	let t48;
    	let input2;
    	let t49;
    	let turndrawsaccordion;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$3, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*openHypergeo*/ ctx[6]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	function popover0_show_binding(value) {
    		/*popover0_show_binding*/ ctx[21](value);
    	}

    	let popover0_props = {
    		placement: "top",
    		$$slots: {
    			content: [create_content_slot_3],
    			trigger: [create_trigger_slot_3]
    		},
    		$$scope: { ctx }
    	};

    	if (/*showPopover*/ ctx[4] !== void 0) {
    		popover0_props.show = /*showPopover*/ ctx[4];
    	}

    	popover0 = new Popover({ props: popover0_props, $$inline: true });
    	binding_callbacks.push(() => bind(popover0, 'show', popover0_show_binding));

    	function popover1_show_binding(value) {
    		/*popover1_show_binding*/ ctx[23](value);
    	}

    	let popover1_props = {
    		placement: "top",
    		$$slots: {
    			content: [create_content_slot_2],
    			trigger: [create_trigger_slot_2]
    		},
    		$$scope: { ctx }
    	};

    	if (/*showPopover*/ ctx[4] !== void 0) {
    		popover1_props.show = /*showPopover*/ ctx[4];
    	}

    	popover1 = new Popover({ props: popover1_props, $$inline: true });
    	binding_callbacks.push(() => bind(popover1, 'show', popover1_show_binding));

    	function popover2_show_binding(value) {
    		/*popover2_show_binding*/ ctx[25](value);
    	}

    	let popover2_props = {
    		placement: "top",
    		$$slots: {
    			content: [create_content_slot_1$1],
    			trigger: [create_trigger_slot_1]
    		},
    		$$scope: { ctx }
    	};

    	if (/*showPopover*/ ctx[4] !== void 0) {
    		popover2_props.show = /*showPopover*/ ctx[4];
    	}

    	popover2 = new Popover({ props: popover2_props, $$inline: true });
    	binding_callbacks.push(() => bind(popover2, 'show', popover2_show_binding));
    	let each_value = /*groups*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	function popover3_show_binding(value) {
    		/*popover3_show_binding*/ ctx[32](value);
    	}

    	let popover3_props = {
    		placement: "top",
    		$$slots: {
    			content: [create_content_slot$2],
    			trigger: [create_trigger_slot$2]
    		},
    		$$scope: { ctx }
    	};

    	if (/*showPopover*/ ctx[4] !== void 0) {
    		popover3_props.show = /*showPopover*/ ctx[4];
    	}

    	popover3 = new Popover({ props: popover3_props, $$inline: true });
    	binding_callbacks.push(() => bind(popover3, 'show', popover3_show_binding));
    	monteaccordion = new MonteAccordion({ $$inline: true });
    	turndrawsaccordion = new TurnDrawsAccordion({ $$inline: true });
    	turndrawsaccordion.$on("drawAmountChange", /*handleDrawAmountChange*/ ctx[9]);

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Deck inputs and card groups";
    			t1 = space();
    			p0 = element("p");
    			p0.textContent = "The Hypergeometric Calulator is best for simulating the chance you'll get non-mana-based cards in your hand. The Monte Carlo Simulation will run advanced simulations that factor mana colors and ramp both in your hand and on the field.";
    			t3 = space();
    			p1 = element("p");
    			t4 = text("Simulation results per turn will output in the ");
    			a0 = element("a");
    			a0.textContent = "Probabilities";
    			t6 = text(" section.");
    			t7 = space();
    			div11 = element("div");
    			div6 = element("div");
    			div5 = element("div");
    			div0 = element("div");
    			h3 = element("h3");
    			h3.textContent = "Hypergeometric Calculator";
    			t9 = space();
    			if_block.c();
    			t10 = space();
    			div4 = element("div");
    			p2 = element("p");
    			p2.textContent = "This section let's you perform calculations based on hypergeometric math.";
    			t12 = space();
    			div1 = element("div");
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");
    			th0 = element("th");
    			t13 = text("Group unique name\r\n                    ");
    			create_component(popover0.$$.fragment);
    			t14 = space();
    			th1 = element("th");
    			th1.textContent = "# Cards in group";
    			t16 = space();
    			th2 = element("th");
    			t17 = text("Minimum # desired cards\r\n                    ");
    			create_component(popover1.$$.fragment);
    			t18 = space();
    			th3 = element("th");
    			t19 = text("Linked groups\r\n                    ");
    			create_component(popover2.$$.fragment);
    			t20 = space();
    			th4 = element("th");
    			t21 = space();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t22 = space();
    			div3 = element("div");
    			button = element("button");
    			button.textContent = "Add Group";
    			t24 = space();
    			div2 = element("div");
    			label0 = element("label");
    			t25 = text("Hypergeometric Mulligans ");
    			create_component(popover3.$$.fragment);
    			t26 = text(":");
    			t27 = space();
    			select = element("select");
    			option0 = element("option");
    			option0.textContent = "0";
    			option1 = element("option");
    			option1.textContent = "1";
    			option2 = element("option");
    			option2.textContent = "2";
    			option3 = element("option");
    			option3.textContent = "3";
    			option4 = element("option");
    			option4.textContent = "4";
    			t33 = space();
    			label1 = element("label");
    			i = element("i");
    			t34 = text("Additional global parameters ");
    			a1 = element("a");
    			a1.textContent = "below";
    			t36 = text(".");
    			t37 = space();
    			create_component(monteaccordion.$$.fragment);
    			t38 = space();
    			h4 = element("h4");
    			h4.textContent = "Global Parameters";
    			t40 = space();
    			div10 = element("div");
    			div7 = element("div");
    			label2 = element("label");
    			label2.textContent = "Initial hand size:";
    			t42 = space();
    			input0 = element("input");
    			t43 = space();
    			div8 = element("div");
    			label3 = element("label");
    			label3.textContent = "Deck size:";
    			t45 = space();
    			input1 = element("input");
    			t46 = space();
    			div9 = element("div");
    			label4 = element("label");
    			label4.textContent = "Number of turns:";
    			t48 = space();
    			input2 = element("input");
    			t49 = space();
    			create_component(turndrawsaccordion.$$.fragment);
    			set_style(h2, "text-align", "center");
    			add_location(h2, file$6, 120, 0, 3938);
    			attr_dev(p0, "class", "larger-text");
    			add_location(p0, file$6, 121, 0, 4004);
    			attr_dev(a0, "href", "#probabilities-jump");
    			add_location(a0, file$6, 122, 70, 4337);
    			attr_dev(p1, "class", "larger-text");
    			add_location(p1, file$6, 122, 0, 4267);
    			set_style(h3, "font-weight", "500");
    			set_style(h3, "font-size", "18px");
    			add_location(h3, file$6, 136, 16, 5050);
    			attr_dev(div0, "class", "accordion-title svelte-1lfiur4");
    			attr_dev(div0, "tabindex", "0");
    			add_location(div0, file$6, 130, 12, 4681);
    			add_location(p2, file$6, 147, 0, 5525);
    			attr_dev(th0, "class", "svelte-1lfiur4");
    			add_location(th0, file$6, 153, 16, 5706);
    			set_style(th1, "width", "18%");
    			attr_dev(th1, "class", "svelte-1lfiur4");
    			add_location(th1, file$6, 164, 16, 6715);
    			set_style(th2, "width", "26%");
    			attr_dev(th2, "class", "svelte-1lfiur4");
    			add_location(th2, file$6, 165, 16, 6778);
    			attr_dev(th3, "class", "svelte-1lfiur4");
    			add_location(th3, file$6, 175, 16, 7480);
    			attr_dev(th4, "class", "svelte-1lfiur4");
    			add_location(th4, file$6, 186, 16, 8434);
    			add_location(tr, file$6, 152, 12, 5684);
    			add_location(thead, file$6, 151, 8, 5663);
    			add_location(tbody, file$6, 189, 8, 8490);
    			attr_dev(table, "class", "svelte-1lfiur4");
    			add_location(table, file$6, 150, 4, 5646);
    			attr_dev(div1, "class", "table-wrapper svelte-1lfiur4");
    			add_location(div1, file$6, 149, 4, 5613);
    			attr_dev(button, "class", "svelte-1lfiur4");
    			add_location(button, file$6, 254, 4, 11510);
    			attr_dev(label0, "for", "mulliganCount");
    			attr_dev(label0, "class", "svelte-1lfiur4");
    			add_location(label0, file$6, 256, 8, 11615);
    			option0.__value = "0";
    			option0.value = option0.__value;
    			attr_dev(option0, "class", "svelte-1lfiur4");
    			add_location(option0, file$6, 267, 12, 12886);
    			option1.__value = "1";
    			option1.value = option1.__value;
    			attr_dev(option1, "class", "svelte-1lfiur4");
    			add_location(option1, file$6, 268, 12, 12928);
    			option2.__value = "2";
    			option2.value = option2.__value;
    			attr_dev(option2, "class", "svelte-1lfiur4");
    			add_location(option2, file$6, 269, 12, 12970);
    			option3.__value = "3";
    			option3.value = option3.__value;
    			attr_dev(option3, "class", "svelte-1lfiur4");
    			add_location(option3, file$6, 270, 12, 13012);
    			option4.__value = "4";
    			option4.value = option4.__value;
    			attr_dev(option4, "class", "svelte-1lfiur4");
    			add_location(option4, file$6, 271, 12, 13054);
    			attr_dev(select, "id", "mulliganCount");
    			if (/*mulliganCountString*/ ctx[3] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[33].call(select));
    			add_location(select, file$6, 266, 12, 12750);
    			attr_dev(div2, "class", "mulligan-selection svelte-1lfiur4");
    			add_location(div2, file$6, 255, 4, 11573);
    			attr_dev(a1, "href", "#global-params-jump");
    			add_location(a1, file$6, 274, 41, 13156);
    			add_location(i, file$6, 274, 9, 13124);
    			attr_dev(label1, "class", "svelte-1lfiur4");
    			add_location(label1, file$6, 274, 2, 13117);
    			attr_dev(div3, "class", "controls-container svelte-1lfiur4");
    			set_style(div3, "margin-left", "8px");
    			add_location(div3, file$6, 253, 0, 11446);
    			attr_dev(div4, "class", "answer svelte-1lfiur4");
    			set_style(div4, "height", /*openHypergeo*/ ctx[6] ? 'auto' : '0');
    			add_location(div4, file$6, 145, 8, 5413);
    			attr_dev(div5, "class", "accordion-item svelte-1lfiur4");
    			add_location(div5, file$6, 129, 8, 4639);
    			attr_dev(div6, "class", div6_class_value = "accordion " + (/*isHoveringHypergeo*/ ctx[7] ? 'hovering' : '') + " svelte-1lfiur4");
    			add_location(div6, file$6, 126, 4, 4437);
    			add_location(h4, file$6, 281, 4, 13276);
    			attr_dev(label2, "for", "cardsDrawn");
    			attr_dev(label2, "class", "svelte-1lfiur4");
    			add_location(label2, file$6, 286, 12, 13441);
    			attr_dev(input0, "type", "number");
    			attr_dev(input0, "class", "deckSize svelte-1lfiur4");
    			attr_dev(input0, "id", "cardsDrawn");
    			attr_dev(input0, "min", "1");
    			add_location(input0, file$6, 287, 12, 13505);
    			attr_dev(div7, "class", "deck-size-container svelte-1lfiur4");
    			attr_dev(div7, "id", "global-params-jump");
    			add_location(div7, file$6, 285, 8, 13370);
    			attr_dev(label3, "for", "deckSize");
    			attr_dev(label3, "class", "svelte-1lfiur4");
    			add_location(label3, file$6, 293, 12, 13725);
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "class", "deckSize svelte-1lfiur4");
    			attr_dev(input1, "id", "deckSize");
    			attr_dev(input1, "min", "1");
    			add_location(input1, file$6, 294, 12, 13779);
    			attr_dev(div8, "class", "deck-size-container svelte-1lfiur4");
    			add_location(div8, file$6, 292, 8, 13678);
    			attr_dev(label4, "for", "numberTurns");
    			attr_dev(label4, "class", "svelte-1lfiur4");
    			add_location(label4, file$6, 300, 12, 13990);
    			attr_dev(input2, "type", "number");
    			attr_dev(input2, "class", "deckSize svelte-1lfiur4");
    			attr_dev(input2, "id", "numberTurns");
    			attr_dev(input2, "min", "1");
    			add_location(input2, file$6, 301, 12, 14053);
    			attr_dev(div9, "class", "deck-size-container svelte-1lfiur4");
    			add_location(div9, file$6, 299, 8, 13943);
    			attr_dev(div10, "class", "controls-container svelte-1lfiur4");
    			add_location(div10, file$6, 282, 4, 13308);
    			attr_dev(div11, "class", "parameters svelte-1lfiur4");
    			add_location(div11, file$6, 124, 0, 4401);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, t4);
    			append_dev(p1, a0);
    			append_dev(p1, t6);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div11, anchor);
    			append_dev(div11, div6);
    			append_dev(div6, div5);
    			append_dev(div5, div0);
    			append_dev(div0, h3);
    			append_dev(div0, t9);
    			if_blocks[current_block_type_index].m(div0, null);
    			append_dev(div5, t10);
    			append_dev(div5, div4);
    			append_dev(div4, p2);
    			append_dev(div4, t12);
    			append_dev(div4, div1);
    			append_dev(div1, table);
    			append_dev(table, thead);
    			append_dev(thead, tr);
    			append_dev(tr, th0);
    			append_dev(th0, t13);
    			mount_component(popover0, th0, null);
    			append_dev(tr, t14);
    			append_dev(tr, th1);
    			append_dev(tr, t16);
    			append_dev(tr, th2);
    			append_dev(th2, t17);
    			mount_component(popover1, th2, null);
    			append_dev(tr, t18);
    			append_dev(tr, th3);
    			append_dev(th3, t19);
    			mount_component(popover2, th3, null);
    			append_dev(tr, t20);
    			append_dev(tr, th4);
    			append_dev(table, t21);
    			append_dev(table, tbody);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(tbody, null);
    				}
    			}

    			append_dev(div4, t22);
    			append_dev(div4, div3);
    			append_dev(div3, button);
    			append_dev(div3, t24);
    			append_dev(div3, div2);
    			append_dev(div2, label0);
    			append_dev(label0, t25);
    			mount_component(popover3, label0, null);
    			append_dev(label0, t26);
    			append_dev(div2, t27);
    			append_dev(div2, select);
    			append_dev(select, option0);
    			append_dev(select, option1);
    			append_dev(select, option2);
    			append_dev(select, option3);
    			append_dev(select, option4);
    			select_option(select, /*mulliganCountString*/ ctx[3], true);
    			append_dev(div3, t33);
    			append_dev(div3, label1);
    			append_dev(label1, i);
    			append_dev(i, t34);
    			append_dev(i, a1);
    			append_dev(i, t36);
    			append_dev(div11, t37);
    			mount_component(monteaccordion, div11, null);
    			append_dev(div11, t38);
    			append_dev(div11, h4);
    			append_dev(div11, t40);
    			append_dev(div11, div10);
    			append_dev(div10, div7);
    			append_dev(div7, label2);
    			append_dev(div7, t42);
    			append_dev(div7, input0);
    			set_input_value(input0, /*InitialDrawSize*/ ctx[2]);
    			append_dev(div10, t43);
    			append_dev(div10, div8);
    			append_dev(div8, label3);
    			append_dev(div8, t45);
    			append_dev(div8, input1);
    			set_input_value(input1, /*deckSize*/ ctx[1]);
    			append_dev(div10, t46);
    			append_dev(div10, div9);
    			append_dev(div9, label4);
    			append_dev(div9, t48);
    			append_dev(div9, input2);
    			set_input_value(input2, /*numberOfTurnsInput*/ ctx[5]);
    			append_dev(div11, t49);
    			mount_component(turndrawsaccordion, div11, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler*/ ctx[16], false, false, false, false),
    					listen_dev(div0, "keydown", /*keydown_handler*/ ctx[17], false, false, false, false),
    					listen_dev(div0, "mouseenter", /*mouseenter_handler*/ ctx[18], false, false, false, false),
    					listen_dev(div0, "mouseleave", /*mouseleave_handler*/ ctx[19], false, false, false, false),
    					listen_dev(button, "click", /*handleAddGroupClick*/ ctx[12], false, false, false, false),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[33]),
    					listen_dev(select, "change", /*change_handler*/ ctx[34], false, false, false, false),
    					listen_dev(input0, "input", /*input0_input_handler_1*/ ctx[35]),
    					listen_dev(input0, "focus", selectInput$1, false, false, false, false),
    					listen_dev(input1, "input", /*input1_input_handler_1*/ ctx[36]),
    					listen_dev(input1, "focus", selectInput$1, false, false, false, false),
    					listen_dev(input2, "input", /*input2_input_handler_1*/ ctx[37]),
    					listen_dev(input2, "focus", selectInput$1, false, false, false, false),
    					listen_dev(input2, "change", /*handleNumberOfTurnsChange*/ ctx[10], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div0, null);
    			}

    			const popover0_changes = {};

    			if (dirty[0] & /*showPopover*/ 16 | dirty[1] & /*$$scope*/ 16384) {
    				popover0_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_show && dirty[0] & /*showPopover*/ 16) {
    				updating_show = true;
    				popover0_changes.show = /*showPopover*/ ctx[4];
    				add_flush_callback(() => updating_show = false);
    			}

    			popover0.$set(popover0_changes);
    			const popover1_changes = {};

    			if (dirty[0] & /*showPopover*/ 16 | dirty[1] & /*$$scope*/ 16384) {
    				popover1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_show_1 && dirty[0] & /*showPopover*/ 16) {
    				updating_show_1 = true;
    				popover1_changes.show = /*showPopover*/ ctx[4];
    				add_flush_callback(() => updating_show_1 = false);
    			}

    			popover1.$set(popover1_changes);
    			const popover2_changes = {};

    			if (dirty[0] & /*showPopover*/ 16 | dirty[1] & /*$$scope*/ 16384) {
    				popover2_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_show_2 && dirty[0] & /*showPopover*/ 16) {
    				updating_show_2 = true;
    				popover2_changes.show = /*showPopover*/ ctx[4];
    				add_flush_callback(() => updating_show_2 = false);
    			}

    			popover2.$set(popover2_changes);

    			if (dirty[0] & /*removeGroup, $groupColors, groups*/ 8449) {
    				each_value = /*groups*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(tbody, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			const popover3_changes = {};

    			if (dirty[0] & /*showPopover*/ 16 | dirty[1] & /*$$scope*/ 16384) {
    				popover3_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_show_3 && dirty[0] & /*showPopover*/ 16) {
    				updating_show_3 = true;
    				popover3_changes.show = /*showPopover*/ ctx[4];
    				add_flush_callback(() => updating_show_3 = false);
    			}

    			popover3.$set(popover3_changes);

    			if (dirty[0] & /*mulliganCountString*/ 8) {
    				select_option(select, /*mulliganCountString*/ ctx[3]);
    			}

    			if (dirty[0] & /*openHypergeo*/ 64) {
    				set_style(div4, "height", /*openHypergeo*/ ctx[6] ? 'auto' : '0');
    			}

    			if (!current || dirty[0] & /*isHoveringHypergeo*/ 128 && div6_class_value !== (div6_class_value = "accordion " + (/*isHoveringHypergeo*/ ctx[7] ? 'hovering' : '') + " svelte-1lfiur4")) {
    				attr_dev(div6, "class", div6_class_value);
    			}

    			if (dirty[0] & /*InitialDrawSize*/ 4 && to_number(input0.value) !== /*InitialDrawSize*/ ctx[2]) {
    				set_input_value(input0, /*InitialDrawSize*/ ctx[2]);
    			}

    			if (dirty[0] & /*deckSize*/ 2 && to_number(input1.value) !== /*deckSize*/ ctx[1]) {
    				set_input_value(input1, /*deckSize*/ ctx[1]);
    			}

    			if (dirty[0] & /*numberOfTurnsInput*/ 32 && to_number(input2.value) !== /*numberOfTurnsInput*/ ctx[5]) {
    				set_input_value(input2, /*numberOfTurnsInput*/ ctx[5]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(popover0.$$.fragment, local);
    			transition_in(popover1.$$.fragment, local);
    			transition_in(popover2.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(popover3.$$.fragment, local);

    			if (local) {
    				add_render_callback(() => {
    					if (!current) return;
    					if (!div4_transition) div4_transition = create_bidirectional_transition(div4, slide, { duration: 250 }, true);
    					div4_transition.run(1);
    				});
    			}

    			transition_in(monteaccordion.$$.fragment, local);
    			transition_in(turndrawsaccordion.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(popover0.$$.fragment, local);
    			transition_out(popover1.$$.fragment, local);
    			transition_out(popover2.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(popover3.$$.fragment, local);

    			if (local) {
    				if (!div4_transition) div4_transition = create_bidirectional_transition(div4, slide, { duration: 250 }, false);
    				div4_transition.run(0);
    			}

    			transition_out(monteaccordion.$$.fragment, local);
    			transition_out(turndrawsaccordion.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div11);
    			if_blocks[current_block_type_index].d();
    			destroy_component(popover0);
    			destroy_component(popover1);
    			destroy_component(popover2);
    			destroy_each(each_blocks, detaching);
    			destroy_component(popover3);
    			if (detaching && div4_transition) div4_transition.end();
    			destroy_component(monteaccordion);
    			destroy_component(turndrawsaccordion);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function selectInput$1(event) {
    	event.target.select(); // Selects all text in the input upon focus
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let $groupColors;
    	validate_store(groupColors, 'groupColors');
    	component_subscribe($$self, groupColors, $$value => $$invalidate(8, $groupColors = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('GroupDefinition', slots, []);
    	const dispatch = createEventDispatcher();
    	let nextIndex = 1; // Initialize the counter for group indexes

    	let groups = [
    		{
    			index: 0,
    			name: '',
    			size: 1,
    			cardsToDraw: 1,
    			link: ''
    		}
    	]; // Initial group with name 'Category 1'

    	let deckSize = 99;
    	let InitialDrawSize = 7;
    	let mulliganCount = 0;
    	let colorIndex = 0;
    	let showPopover = false;
    	let mulliganCountString = "0"; // Use a string for the binding
    	let numberOfTurnsInput = 6; // Default value
    	let openHypergeo = false; // Add this line to manage the accordion state
    	let isHoveringHypergeo = false; // Add this line to manage hover state

    	// Function to handle draw amount changes
    	function handleDrawAmountChange(event) {
    		const { turn, value } = event.detail;

    		numberOfTurns.update(turns => {
    			turns[turn] = value;
    			return turns;
    		});
    	}

    	function handleNumberOfTurnsChange(event) {
    		const value = parseInt(event.target.value, 10);
    		$$invalidate(5, numberOfTurnsInput = value); // Update the local variable

    		numberOfTurns.update(turns => {
    			const newTurns = Array.from({ length: value }, (_, i) => turns[i] || 1);
    			return newTurns;
    		});
    	}

    	// function to handle button clicks and send analytics------------------
    	function handleSelectChange(value) {
    		$$invalidate(3, mulliganCountString = value); // Assuming you have this variable already bound to keep the state

    		// Send analytics data
    		trackEvent('mulligan_count_change', { mulligan_count: value });
    	}

    	function handleAddGroupClick() {
    		addGroup(); // Assuming toggleItem toggles the visibility of accordion item

    		trackEvent('add_hypergeo_group', {
    			'event_label': 'User clicked add group for hypergeometric'
    		});
    	}

    	const presetColors = ["#e4f5d0", "#c9f1ee", "#FFE0B2", "#edd7f1", "#cbedfd", "#ffdbd0", "#e0e5ff"];

    	function addGroup() {
    		$$invalidate(0, groups = [
    			...groups,
    			{
    				index: nextIndex,
    				name: `Group ${nextIndex + 1}`,
    				size: 1,
    				cardsToDraw: 1,
    				link: ''
    			}
    		]);

    		nextIndex++; // Increment the counter after adding a new group
    	}

    	function removeGroup(index) {
    		$$invalidate(0, groups = groups.filter((_, i) => i !== index));
    	} // After removal, update names to maintain order if needed. This could be an additional feature.

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<GroupDefinition> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate(6, openHypergeo = !openHypergeo);
    	const keydown_handler = event => event.key === 'Enter' && $$invalidate(6, openHypergeo = !openHypergeo);
    	const mouseenter_handler = () => $$invalidate(7, isHoveringHypergeo = true);
    	const mouseleave_handler = () => $$invalidate(7, isHoveringHypergeo = false);
    	const click_handler_1 = () => $$invalidate(4, showPopover = !showPopover);

    	function popover0_show_binding(value) {
    		showPopover = value;
    		$$invalidate(4, showPopover);
    	}

    	const click_handler_2 = () => $$invalidate(4, showPopover = !showPopover);

    	function popover1_show_binding(value) {
    		showPopover = value;
    		$$invalidate(4, showPopover);
    	}

    	const click_handler_3 = () => $$invalidate(4, showPopover = !showPopover);

    	function popover2_show_binding(value) {
    		showPopover = value;
    		$$invalidate(4, showPopover);
    	}

    	function input0_input_handler(each_value, index) {
    		each_value[index].name = this.value;
    		$$invalidate(0, groups);
    	}

    	function input1_input_handler(each_value, index) {
    		each_value[index].size = to_number(this.value);
    		$$invalidate(0, groups);
    	}

    	function input2_input_handler(each_value, index) {
    		each_value[index].cardsToDraw = to_number(this.value);
    		$$invalidate(0, groups);
    	}

    	function input3_input_handler(each_value, index) {
    		each_value[index].link = this.value;
    		$$invalidate(0, groups);
    	}

    	const click_handler_4 = index => removeGroup(index);
    	const click_handler_5 = () => $$invalidate(4, showPopover = !showPopover);

    	function popover3_show_binding(value) {
    		showPopover = value;
    		$$invalidate(4, showPopover);
    	}

    	function select_change_handler() {
    		mulliganCountString = select_value(this);
    		$$invalidate(3, mulliganCountString);
    	}

    	const change_handler = event => handleSelectChange(event.target.value);

    	function input0_input_handler_1() {
    		InitialDrawSize = to_number(this.value);
    		$$invalidate(2, InitialDrawSize);
    	}

    	function input1_input_handler_1() {
    		deckSize = to_number(this.value);
    		$$invalidate(1, deckSize);
    	}

    	function input2_input_handler_1() {
    		numberOfTurnsInput = to_number(this.value);
    		$$invalidate(5, numberOfTurnsInput);
    	}

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		groupColors,
    		numberOfTurns,
    		Popover,
    		FontAwesomeIcon,
    		faQuestionCircle,
    		faChevronDown,
    		faChevronUp,
    		faTimes,
    		MonteAccordion,
    		trackEvent,
    		TurnDrawsAccordion,
    		writable,
    		slide,
    		dispatch,
    		nextIndex,
    		groups,
    		deckSize,
    		InitialDrawSize,
    		mulliganCount,
    		colorIndex,
    		showPopover,
    		mulliganCountString,
    		numberOfTurnsInput,
    		openHypergeo,
    		isHoveringHypergeo,
    		handleDrawAmountChange,
    		handleNumberOfTurnsChange,
    		handleSelectChange,
    		handleAddGroupClick,
    		presetColors,
    		addGroup,
    		removeGroup,
    		selectInput: selectInput$1,
    		$groupColors
    	});

    	$$self.$inject_state = $$props => {
    		if ('nextIndex' in $$props) nextIndex = $$props.nextIndex;
    		if ('groups' in $$props) $$invalidate(0, groups = $$props.groups);
    		if ('deckSize' in $$props) $$invalidate(1, deckSize = $$props.deckSize);
    		if ('InitialDrawSize' in $$props) $$invalidate(2, InitialDrawSize = $$props.InitialDrawSize);
    		if ('mulliganCount' in $$props) $$invalidate(14, mulliganCount = $$props.mulliganCount);
    		if ('colorIndex' in $$props) $$invalidate(15, colorIndex = $$props.colorIndex);
    		if ('showPopover' in $$props) $$invalidate(4, showPopover = $$props.showPopover);
    		if ('mulliganCountString' in $$props) $$invalidate(3, mulliganCountString = $$props.mulliganCountString);
    		if ('numberOfTurnsInput' in $$props) $$invalidate(5, numberOfTurnsInput = $$props.numberOfTurnsInput);
    		if ('openHypergeo' in $$props) $$invalidate(6, openHypergeo = $$props.openHypergeo);
    		if ('isHoveringHypergeo' in $$props) $$invalidate(7, isHoveringHypergeo = $$props.isHoveringHypergeo);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*mulliganCountString*/ 8) {
    			//--------------------------------------------
    			// Reactive statement to ensure mulliganCount is always a number
    			$$invalidate(14, mulliganCount = Number(mulliganCountString));
    		}

    		if ($$self.$$.dirty[0] & /*groups, colorIndex, deckSize, InitialDrawSize, mulliganCount*/ 49159) {
    			{
    				let updatedColors = {};

    				groups.forEach(group => {
    					let key = group.link && group.link.trim()
    					? group.link
    					: group.name;

    					if (!updatedColors[key]) {
    						updatedColors[key] = presetColors[$$invalidate(15, colorIndex++, colorIndex) % presetColors.length];
    					}
    				});

    				groupColors.set(updatedColors);

    				dispatch('updateGroups', {
    					groups,
    					deckSize,
    					InitialDrawSize,
    					mulliganCount
    				});
    			}
    		}
    	};

    	return [
    		groups,
    		deckSize,
    		InitialDrawSize,
    		mulliganCountString,
    		showPopover,
    		numberOfTurnsInput,
    		openHypergeo,
    		isHoveringHypergeo,
    		$groupColors,
    		handleDrawAmountChange,
    		handleNumberOfTurnsChange,
    		handleSelectChange,
    		handleAddGroupClick,
    		removeGroup,
    		mulliganCount,
    		colorIndex,
    		click_handler,
    		keydown_handler,
    		mouseenter_handler,
    		mouseleave_handler,
    		click_handler_1,
    		popover0_show_binding,
    		click_handler_2,
    		popover1_show_binding,
    		click_handler_3,
    		popover2_show_binding,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		click_handler_4,
    		click_handler_5,
    		popover3_show_binding,
    		select_change_handler,
    		change_handler,
    		input0_input_handler_1,
    		input1_input_handler_1,
    		input2_input_handler_1
    	];
    }

    class GroupDefinition extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "GroupDefinition",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    var lodash = {exports: {}};

    /**
     * @license
     * Lodash <https://lodash.com/>
     * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */
    lodash.exports;

    (function (module, exports) {
    (function() {

    	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
    	  var undefined$1;

    	  /** Used as the semantic version number. */
    	  var VERSION = '4.17.21';

    	  /** Used as the size to enable large array optimizations. */
    	  var LARGE_ARRAY_SIZE = 200;

    	  /** Error message constants. */
    	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
    	      FUNC_ERROR_TEXT = 'Expected a function',
    	      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

    	  /** Used to stand-in for `undefined` hash values. */
    	  var HASH_UNDEFINED = '__lodash_hash_undefined__';

    	  /** Used as the maximum memoize cache size. */
    	  var MAX_MEMOIZE_SIZE = 500;

    	  /** Used as the internal argument placeholder. */
    	  var PLACEHOLDER = '__lodash_placeholder__';

    	  /** Used to compose bitmasks for cloning. */
    	  var CLONE_DEEP_FLAG = 1,
    	      CLONE_FLAT_FLAG = 2,
    	      CLONE_SYMBOLS_FLAG = 4;

    	  /** Used to compose bitmasks for value comparisons. */
    	  var COMPARE_PARTIAL_FLAG = 1,
    	      COMPARE_UNORDERED_FLAG = 2;

    	  /** Used to compose bitmasks for function metadata. */
    	  var WRAP_BIND_FLAG = 1,
    	      WRAP_BIND_KEY_FLAG = 2,
    	      WRAP_CURRY_BOUND_FLAG = 4,
    	      WRAP_CURRY_FLAG = 8,
    	      WRAP_CURRY_RIGHT_FLAG = 16,
    	      WRAP_PARTIAL_FLAG = 32,
    	      WRAP_PARTIAL_RIGHT_FLAG = 64,
    	      WRAP_ARY_FLAG = 128,
    	      WRAP_REARG_FLAG = 256,
    	      WRAP_FLIP_FLAG = 512;

    	  /** Used as default options for `_.truncate`. */
    	  var DEFAULT_TRUNC_LENGTH = 30,
    	      DEFAULT_TRUNC_OMISSION = '...';

    	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
    	  var HOT_COUNT = 800,
    	      HOT_SPAN = 16;

    	  /** Used to indicate the type of lazy iteratees. */
    	  var LAZY_FILTER_FLAG = 1,
    	      LAZY_MAP_FLAG = 2,
    	      LAZY_WHILE_FLAG = 3;

    	  /** Used as references for various `Number` constants. */
    	  var INFINITY = 1 / 0,
    	      MAX_SAFE_INTEGER = 9007199254740991,
    	      MAX_INTEGER = 1.7976931348623157e+308,
    	      NAN = 0 / 0;

    	  /** Used as references for the maximum length and index of an array. */
    	  var MAX_ARRAY_LENGTH = 4294967295,
    	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
    	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    	  /** Used to associate wrap methods with their bit flags. */
    	  var wrapFlags = [
    	    ['ary', WRAP_ARY_FLAG],
    	    ['bind', WRAP_BIND_FLAG],
    	    ['bindKey', WRAP_BIND_KEY_FLAG],
    	    ['curry', WRAP_CURRY_FLAG],
    	    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    	    ['flip', WRAP_FLIP_FLAG],
    	    ['partial', WRAP_PARTIAL_FLAG],
    	    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    	    ['rearg', WRAP_REARG_FLAG]
    	  ];

    	  /** `Object#toString` result references. */
    	  var argsTag = '[object Arguments]',
    	      arrayTag = '[object Array]',
    	      asyncTag = '[object AsyncFunction]',
    	      boolTag = '[object Boolean]',
    	      dateTag = '[object Date]',
    	      domExcTag = '[object DOMException]',
    	      errorTag = '[object Error]',
    	      funcTag = '[object Function]',
    	      genTag = '[object GeneratorFunction]',
    	      mapTag = '[object Map]',
    	      numberTag = '[object Number]',
    	      nullTag = '[object Null]',
    	      objectTag = '[object Object]',
    	      promiseTag = '[object Promise]',
    	      proxyTag = '[object Proxy]',
    	      regexpTag = '[object RegExp]',
    	      setTag = '[object Set]',
    	      stringTag = '[object String]',
    	      symbolTag = '[object Symbol]',
    	      undefinedTag = '[object Undefined]',
    	      weakMapTag = '[object WeakMap]',
    	      weakSetTag = '[object WeakSet]';

    	  var arrayBufferTag = '[object ArrayBuffer]',
    	      dataViewTag = '[object DataView]',
    	      float32Tag = '[object Float32Array]',
    	      float64Tag = '[object Float64Array]',
    	      int8Tag = '[object Int8Array]',
    	      int16Tag = '[object Int16Array]',
    	      int32Tag = '[object Int32Array]',
    	      uint8Tag = '[object Uint8Array]',
    	      uint8ClampedTag = '[object Uint8ClampedArray]',
    	      uint16Tag = '[object Uint16Array]',
    	      uint32Tag = '[object Uint32Array]';

    	  /** Used to match empty string literals in compiled template source. */
    	  var reEmptyStringLeading = /\b__p \+= '';/g,
    	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
    	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

    	  /** Used to match HTML entities and HTML characters. */
    	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
    	      reUnescapedHtml = /[&<>"']/g,
    	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
    	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

    	  /** Used to match template delimiters. */
    	  var reEscape = /<%-([\s\S]+?)%>/g,
    	      reEvaluate = /<%([\s\S]+?)%>/g,
    	      reInterpolate = /<%=([\s\S]+?)%>/g;

    	  /** Used to match property names within property paths. */
    	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    	      reIsPlainProp = /^\w*$/,
    	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    	  /**
    	   * Used to match `RegExp`
    	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
    	   */
    	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
    	      reHasRegExpChar = RegExp(reRegExpChar.source);

    	  /** Used to match leading whitespace. */
    	  var reTrimStart = /^\s+/;

    	  /** Used to match a single whitespace character. */
    	  var reWhitespace = /\s/;

    	  /** Used to match wrap detail comments. */
    	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
    	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
    	      reSplitDetails = /,? & /;

    	  /** Used to match words composed of alphanumeric characters. */
    	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

    	  /**
    	   * Used to validate the `validate` option in `_.template` variable.
    	   *
    	   * Forbids characters which could potentially change the meaning of the function argument definition:
    	   * - "()," (modification of function parameters)
    	   * - "=" (default value)
    	   * - "[]{}" (destructuring of function parameters)
    	   * - "/" (beginning of a comment)
    	   * - whitespace
    	   */
    	  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

    	  /** Used to match backslashes in property paths. */
    	  var reEscapeChar = /\\(\\)?/g;

    	  /**
    	   * Used to match
    	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
    	   */
    	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

    	  /** Used to match `RegExp` flags from their coerced string values. */
    	  var reFlags = /\w*$/;

    	  /** Used to detect bad signed hexadecimal string values. */
    	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    	  /** Used to detect binary string values. */
    	  var reIsBinary = /^0b[01]+$/i;

    	  /** Used to detect host constructors (Safari). */
    	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

    	  /** Used to detect octal string values. */
    	  var reIsOctal = /^0o[0-7]+$/i;

    	  /** Used to detect unsigned integer values. */
    	  var reIsUint = /^(?:0|[1-9]\d*)$/;

    	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
    	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    	  /** Used to ensure capturing order of template delimiters. */
    	  var reNoMatch = /($^)/;

    	  /** Used to match unescaped characters in compiled string literals. */
    	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

    	  /** Used to compose unicode character classes. */
    	  var rsAstralRange = '\\ud800-\\udfff',
    	      rsComboMarksRange = '\\u0300-\\u036f',
    	      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    	      rsComboSymbolsRange = '\\u20d0-\\u20ff',
    	      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    	      rsDingbatRange = '\\u2700-\\u27bf',
    	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    	      rsPunctuationRange = '\\u2000-\\u206f',
    	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    	      rsVarRange = '\\ufe0e\\ufe0f',
    	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

    	  /** Used to compose unicode capture groups. */
    	  var rsApos = "['\u2019]",
    	      rsAstral = '[' + rsAstralRange + ']',
    	      rsBreak = '[' + rsBreakRange + ']',
    	      rsCombo = '[' + rsComboRange + ']',
    	      rsDigits = '\\d+',
    	      rsDingbat = '[' + rsDingbatRange + ']',
    	      rsLower = '[' + rsLowerRange + ']',
    	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
    	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    	      rsNonAstral = '[^' + rsAstralRange + ']',
    	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    	      rsUpper = '[' + rsUpperRange + ']',
    	      rsZWJ = '\\u200d';

    	  /** Used to compose unicode regexes. */
    	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    	      reOptMod = rsModifier + '?',
    	      rsOptVar = '[' + rsVarRange + ']?',
    	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    	      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    	      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
    	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
    	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

    	  /** Used to match apostrophes. */
    	  var reApos = RegExp(rsApos, 'g');

    	  /**
    	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
    	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
    	   */
    	  var reComboMark = RegExp(rsCombo, 'g');

    	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

    	  /** Used to match complex or compound words. */
    	  var reUnicodeWord = RegExp([
    	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    	    rsUpper + '+' + rsOptContrUpper,
    	    rsOrdUpper,
    	    rsOrdLower,
    	    rsDigits,
    	    rsEmoji
    	  ].join('|'), 'g');

    	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

    	  /** Used to detect strings that need a more robust regexp to match words. */
    	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

    	  /** Used to assign default `context` object properties. */
    	  var contextProps = [
    	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
    	  ];

    	  /** Used to make template sourceURLs easier to identify. */
    	  var templateCounter = -1;

    	  /** Used to identify `toStringTag` values of typed arrays. */
    	  var typedArrayTags = {};
    	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    	  typedArrayTags[uint32Tag] = true;
    	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
    	  typedArrayTags[weakMapTag] = false;

    	  /** Used to identify `toStringTag` values supported by `_.clone`. */
    	  var cloneableTags = {};
    	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
    	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
    	  cloneableTags[boolTag] = cloneableTags[dateTag] =
    	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
    	  cloneableTags[numberTag] = cloneableTags[objectTag] =
    	  cloneableTags[regexpTag] = cloneableTags[setTag] =
    	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
    	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    	  cloneableTags[errorTag] = cloneableTags[funcTag] =
    	  cloneableTags[weakMapTag] = false;

    	  /** Used to map Latin Unicode letters to basic Latin letters. */
    	  var deburredLetters = {
    	    // Latin-1 Supplement block.
    	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    	    '\xc7': 'C',  '\xe7': 'c',
    	    '\xd0': 'D',  '\xf0': 'd',
    	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    	    '\xd1': 'N',  '\xf1': 'n',
    	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    	    '\xc6': 'Ae', '\xe6': 'ae',
    	    '\xde': 'Th', '\xfe': 'th',
    	    '\xdf': 'ss',
    	    // Latin Extended-A block.
    	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    	    '\u0134': 'J',  '\u0135': 'j',
    	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    	    '\u0174': 'W',  '\u0175': 'w',
    	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    	    '\u0132': 'IJ', '\u0133': 'ij',
    	    '\u0152': 'Oe', '\u0153': 'oe',
    	    '\u0149': "'n", '\u017f': 's'
    	  };

    	  /** Used to map characters to HTML entities. */
    	  var htmlEscapes = {
    	    '&': '&amp;',
    	    '<': '&lt;',
    	    '>': '&gt;',
    	    '"': '&quot;',
    	    "'": '&#39;'
    	  };

    	  /** Used to map HTML entities to characters. */
    	  var htmlUnescapes = {
    	    '&amp;': '&',
    	    '&lt;': '<',
    	    '&gt;': '>',
    	    '&quot;': '"',
    	    '&#39;': "'"
    	  };

    	  /** Used to escape characters for inclusion in compiled string literals. */
    	  var stringEscapes = {
    	    '\\': '\\',
    	    "'": "'",
    	    '\n': 'n',
    	    '\r': 'r',
    	    '\u2028': 'u2028',
    	    '\u2029': 'u2029'
    	  };

    	  /** Built-in method references without a dependency on `root`. */
    	  var freeParseFloat = parseFloat,
    	      freeParseInt = parseInt;

    	  /** Detect free variable `global` from Node.js. */
    	  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    	  /** Detect free variable `self`. */
    	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    	  /** Used as a reference to the global object. */
    	  var root = freeGlobal || freeSelf || Function('return this')();

    	  /** Detect free variable `exports`. */
    	  var freeExports = exports && !exports.nodeType && exports;

    	  /** Detect free variable `module`. */
    	  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    	  /** Detect the popular CommonJS extension `module.exports`. */
    	  var moduleExports = freeModule && freeModule.exports === freeExports;

    	  /** Detect free variable `process` from Node.js. */
    	  var freeProcess = moduleExports && freeGlobal.process;

    	  /** Used to access faster Node.js helpers. */
    	  var nodeUtil = (function() {
    	    try {
    	      // Use `util.types` for Node.js 10+.
    	      var types = freeModule && freeModule.require && freeModule.require('util').types;

    	      if (types) {
    	        return types;
    	      }

    	      // Legacy `process.binding('util')` for Node.js < 10.
    	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    	    } catch (e) {}
    	  }());

    	  /* Node.js helper references. */
    	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
    	      nodeIsDate = nodeUtil && nodeUtil.isDate,
    	      nodeIsMap = nodeUtil && nodeUtil.isMap,
    	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
    	      nodeIsSet = nodeUtil && nodeUtil.isSet,
    	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    	  /*--------------------------------------------------------------------------*/

    	  /**
    	   * A faster alternative to `Function#apply`, this function invokes `func`
    	   * with the `this` binding of `thisArg` and the arguments of `args`.
    	   *
    	   * @private
    	   * @param {Function} func The function to invoke.
    	   * @param {*} thisArg The `this` binding of `func`.
    	   * @param {Array} args The arguments to invoke `func` with.
    	   * @returns {*} Returns the result of `func`.
    	   */
    	  function apply(func, thisArg, args) {
    	    switch (args.length) {
    	      case 0: return func.call(thisArg);
    	      case 1: return func.call(thisArg, args[0]);
    	      case 2: return func.call(thisArg, args[0], args[1]);
    	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    	    }
    	    return func.apply(thisArg, args);
    	  }

    	  /**
    	   * A specialized version of `baseAggregator` for arrays.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} setter The function to set `accumulator` values.
    	   * @param {Function} iteratee The iteratee to transform keys.
    	   * @param {Object} accumulator The initial aggregated object.
    	   * @returns {Function} Returns `accumulator`.
    	   */
    	  function arrayAggregator(array, setter, iteratee, accumulator) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    while (++index < length) {
    	      var value = array[index];
    	      setter(accumulator, value, iteratee(value), array);
    	    }
    	    return accumulator;
    	  }

    	  /**
    	   * A specialized version of `_.forEach` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function arrayEach(array, iteratee) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    while (++index < length) {
    	      if (iteratee(array[index], index, array) === false) {
    	        break;
    	      }
    	    }
    	    return array;
    	  }

    	  /**
    	   * A specialized version of `_.forEachRight` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function arrayEachRight(array, iteratee) {
    	    var length = array == null ? 0 : array.length;

    	    while (length--) {
    	      if (iteratee(array[length], length, array) === false) {
    	        break;
    	      }
    	    }
    	    return array;
    	  }

    	  /**
    	   * A specialized version of `_.every` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
    	   *  else `false`.
    	   */
    	  function arrayEvery(array, predicate) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    while (++index < length) {
    	      if (!predicate(array[index], index, array)) {
    	        return false;
    	      }
    	    }
    	    return true;
    	  }

    	  /**
    	   * A specialized version of `_.filter` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @returns {Array} Returns the new filtered array.
    	   */
    	  function arrayFilter(array, predicate) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length,
    	        resIndex = 0,
    	        result = [];

    	    while (++index < length) {
    	      var value = array[index];
    	      if (predicate(value, index, array)) {
    	        result[resIndex++] = value;
    	      }
    	    }
    	    return result;
    	  }

    	  /**
    	   * A specialized version of `_.includes` for arrays without support for
    	   * specifying an index to search from.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to inspect.
    	   * @param {*} target The value to search for.
    	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
    	   */
    	  function arrayIncludes(array, value) {
    	    var length = array == null ? 0 : array.length;
    	    return !!length && baseIndexOf(array, value, 0) > -1;
    	  }

    	  /**
    	   * This function is like `arrayIncludes` except that it accepts a comparator.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to inspect.
    	   * @param {*} target The value to search for.
    	   * @param {Function} comparator The comparator invoked per element.
    	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
    	   */
    	  function arrayIncludesWith(array, value, comparator) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    while (++index < length) {
    	      if (comparator(value, array[index])) {
    	        return true;
    	      }
    	    }
    	    return false;
    	  }

    	  /**
    	   * A specialized version of `_.map` for arrays without support for iteratee
    	   * shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns the new mapped array.
    	   */
    	  function arrayMap(array, iteratee) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length,
    	        result = Array(length);

    	    while (++index < length) {
    	      result[index] = iteratee(array[index], index, array);
    	    }
    	    return result;
    	  }

    	  /**
    	   * Appends the elements of `values` to `array`.
    	   *
    	   * @private
    	   * @param {Array} array The array to modify.
    	   * @param {Array} values The values to append.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function arrayPush(array, values) {
    	    var index = -1,
    	        length = values.length,
    	        offset = array.length;

    	    while (++index < length) {
    	      array[offset + index] = values[index];
    	    }
    	    return array;
    	  }

    	  /**
    	   * A specialized version of `_.reduce` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @param {*} [accumulator] The initial value.
    	   * @param {boolean} [initAccum] Specify using the first element of `array` as
    	   *  the initial value.
    	   * @returns {*} Returns the accumulated value.
    	   */
    	  function arrayReduce(array, iteratee, accumulator, initAccum) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    if (initAccum && length) {
    	      accumulator = array[++index];
    	    }
    	    while (++index < length) {
    	      accumulator = iteratee(accumulator, array[index], index, array);
    	    }
    	    return accumulator;
    	  }

    	  /**
    	   * A specialized version of `_.reduceRight` for arrays without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @param {*} [accumulator] The initial value.
    	   * @param {boolean} [initAccum] Specify using the last element of `array` as
    	   *  the initial value.
    	   * @returns {*} Returns the accumulated value.
    	   */
    	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    	    var length = array == null ? 0 : array.length;
    	    if (initAccum && length) {
    	      accumulator = array[--length];
    	    }
    	    while (length--) {
    	      accumulator = iteratee(accumulator, array[length], length, array);
    	    }
    	    return accumulator;
    	  }

    	  /**
    	   * A specialized version of `_.some` for arrays without support for iteratee
    	   * shorthands.
    	   *
    	   * @private
    	   * @param {Array} [array] The array to iterate over.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @returns {boolean} Returns `true` if any element passes the predicate check,
    	   *  else `false`.
    	   */
    	  function arraySome(array, predicate) {
    	    var index = -1,
    	        length = array == null ? 0 : array.length;

    	    while (++index < length) {
    	      if (predicate(array[index], index, array)) {
    	        return true;
    	      }
    	    }
    	    return false;
    	  }

    	  /**
    	   * Gets the size of an ASCII `string`.
    	   *
    	   * @private
    	   * @param {string} string The string inspect.
    	   * @returns {number} Returns the string size.
    	   */
    	  var asciiSize = baseProperty('length');

    	  /**
    	   * Converts an ASCII `string` to an array.
    	   *
    	   * @private
    	   * @param {string} string The string to convert.
    	   * @returns {Array} Returns the converted array.
    	   */
    	  function asciiToArray(string) {
    	    return string.split('');
    	  }

    	  /**
    	   * Splits an ASCII `string` into an array of its words.
    	   *
    	   * @private
    	   * @param {string} The string to inspect.
    	   * @returns {Array} Returns the words of `string`.
    	   */
    	  function asciiWords(string) {
    	    return string.match(reAsciiWord) || [];
    	  }

    	  /**
    	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
    	   * without support for iteratee shorthands, which iterates over `collection`
    	   * using `eachFunc`.
    	   *
    	   * @private
    	   * @param {Array|Object} collection The collection to inspect.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @param {Function} eachFunc The function to iterate over `collection`.
    	   * @returns {*} Returns the found element or its key, else `undefined`.
    	   */
    	  function baseFindKey(collection, predicate, eachFunc) {
    	    var result;
    	    eachFunc(collection, function(value, key, collection) {
    	      if (predicate(value, key, collection)) {
    	        result = key;
    	        return false;
    	      }
    	    });
    	    return result;
    	  }

    	  /**
    	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
    	   * support for iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {Function} predicate The function invoked per iteration.
    	   * @param {number} fromIndex The index to search from.
    	   * @param {boolean} [fromRight] Specify iterating from right to left.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    	    var length = array.length,
    	        index = fromIndex + (fromRight ? 1 : -1);

    	    while ((fromRight ? index-- : ++index < length)) {
    	      if (predicate(array[index], index, array)) {
    	        return index;
    	      }
    	    }
    	    return -1;
    	  }

    	  /**
    	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} value The value to search for.
    	   * @param {number} fromIndex The index to search from.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function baseIndexOf(array, value, fromIndex) {
    	    return value === value
    	      ? strictIndexOf(array, value, fromIndex)
    	      : baseFindIndex(array, baseIsNaN, fromIndex);
    	  }

    	  /**
    	   * This function is like `baseIndexOf` except that it accepts a comparator.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} value The value to search for.
    	   * @param {number} fromIndex The index to search from.
    	   * @param {Function} comparator The comparator invoked per element.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function baseIndexOfWith(array, value, fromIndex, comparator) {
    	    var index = fromIndex - 1,
    	        length = array.length;

    	    while (++index < length) {
    	      if (comparator(array[index], value)) {
    	        return index;
    	      }
    	    }
    	    return -1;
    	  }

    	  /**
    	   * The base implementation of `_.isNaN` without support for number objects.
    	   *
    	   * @private
    	   * @param {*} value The value to check.
    	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
    	   */
    	  function baseIsNaN(value) {
    	    return value !== value;
    	  }

    	  /**
    	   * The base implementation of `_.mean` and `_.meanBy` without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} array The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {number} Returns the mean.
    	   */
    	  function baseMean(array, iteratee) {
    	    var length = array == null ? 0 : array.length;
    	    return length ? (baseSum(array, iteratee) / length) : NAN;
    	  }

    	  /**
    	   * The base implementation of `_.property` without support for deep paths.
    	   *
    	   * @private
    	   * @param {string} key The key of the property to get.
    	   * @returns {Function} Returns the new accessor function.
    	   */
    	  function baseProperty(key) {
    	    return function(object) {
    	      return object == null ? undefined$1 : object[key];
    	    };
    	  }

    	  /**
    	   * The base implementation of `_.propertyOf` without support for deep paths.
    	   *
    	   * @private
    	   * @param {Object} object The object to query.
    	   * @returns {Function} Returns the new accessor function.
    	   */
    	  function basePropertyOf(object) {
    	    return function(key) {
    	      return object == null ? undefined$1 : object[key];
    	    };
    	  }

    	  /**
    	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
    	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
    	   *
    	   * @private
    	   * @param {Array|Object} collection The collection to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @param {*} accumulator The initial value.
    	   * @param {boolean} initAccum Specify using the first or last element of
    	   *  `collection` as the initial value.
    	   * @param {Function} eachFunc The function to iterate over `collection`.
    	   * @returns {*} Returns the accumulated value.
    	   */
    	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    	    eachFunc(collection, function(value, index, collection) {
    	      accumulator = initAccum
    	        ? (initAccum = false, value)
    	        : iteratee(accumulator, value, index, collection);
    	    });
    	    return accumulator;
    	  }

    	  /**
    	   * The base implementation of `_.sortBy` which uses `comparer` to define the
    	   * sort order of `array` and replaces criteria objects with their corresponding
    	   * values.
    	   *
    	   * @private
    	   * @param {Array} array The array to sort.
    	   * @param {Function} comparer The function to define sort order.
    	   * @returns {Array} Returns `array`.
    	   */
    	  function baseSortBy(array, comparer) {
    	    var length = array.length;

    	    array.sort(comparer);
    	    while (length--) {
    	      array[length] = array[length].value;
    	    }
    	    return array;
    	  }

    	  /**
    	   * The base implementation of `_.sum` and `_.sumBy` without support for
    	   * iteratee shorthands.
    	   *
    	   * @private
    	   * @param {Array} array The array to iterate over.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {number} Returns the sum.
    	   */
    	  function baseSum(array, iteratee) {
    	    var result,
    	        index = -1,
    	        length = array.length;

    	    while (++index < length) {
    	      var current = iteratee(array[index]);
    	      if (current !== undefined$1) {
    	        result = result === undefined$1 ? current : (result + current);
    	      }
    	    }
    	    return result;
    	  }

    	  /**
    	   * The base implementation of `_.times` without support for iteratee shorthands
    	   * or max array length checks.
    	   *
    	   * @private
    	   * @param {number} n The number of times to invoke `iteratee`.
    	   * @param {Function} iteratee The function invoked per iteration.
    	   * @returns {Array} Returns the array of results.
    	   */
    	  function baseTimes(n, iteratee) {
    	    var index = -1,
    	        result = Array(n);

    	    while (++index < n) {
    	      result[index] = iteratee(index);
    	    }
    	    return result;
    	  }

    	  /**
    	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
    	   * of key-value pairs for `object` corresponding to the property names of `props`.
    	   *
    	   * @private
    	   * @param {Object} object The object to query.
    	   * @param {Array} props The property names to get values for.
    	   * @returns {Object} Returns the key-value pairs.
    	   */
    	  function baseToPairs(object, props) {
    	    return arrayMap(props, function(key) {
    	      return [key, object[key]];
    	    });
    	  }

    	  /**
    	   * The base implementation of `_.trim`.
    	   *
    	   * @private
    	   * @param {string} string The string to trim.
    	   * @returns {string} Returns the trimmed string.
    	   */
    	  function baseTrim(string) {
    	    return string
    	      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    	      : string;
    	  }

    	  /**
    	   * The base implementation of `_.unary` without support for storing metadata.
    	   *
    	   * @private
    	   * @param {Function} func The function to cap arguments for.
    	   * @returns {Function} Returns the new capped function.
    	   */
    	  function baseUnary(func) {
    	    return function(value) {
    	      return func(value);
    	    };
    	  }

    	  /**
    	   * The base implementation of `_.values` and `_.valuesIn` which creates an
    	   * array of `object` property values corresponding to the property names
    	   * of `props`.
    	   *
    	   * @private
    	   * @param {Object} object The object to query.
    	   * @param {Array} props The property names to get values for.
    	   * @returns {Object} Returns the array of property values.
    	   */
    	  function baseValues(object, props) {
    	    return arrayMap(props, function(key) {
    	      return object[key];
    	    });
    	  }

    	  /**
    	   * Checks if a `cache` value for `key` exists.
    	   *
    	   * @private
    	   * @param {Object} cache The cache to query.
    	   * @param {string} key The key of the entry to check.
    	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	   */
    	  function cacheHas(cache, key) {
    	    return cache.has(key);
    	  }

    	  /**
    	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
    	   * that is not found in the character symbols.
    	   *
    	   * @private
    	   * @param {Array} strSymbols The string symbols to inspect.
    	   * @param {Array} chrSymbols The character symbols to find.
    	   * @returns {number} Returns the index of the first unmatched string symbol.
    	   */
    	  function charsStartIndex(strSymbols, chrSymbols) {
    	    var index = -1,
    	        length = strSymbols.length;

    	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    	    return index;
    	  }

    	  /**
    	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
    	   * that is not found in the character symbols.
    	   *
    	   * @private
    	   * @param {Array} strSymbols The string symbols to inspect.
    	   * @param {Array} chrSymbols The character symbols to find.
    	   * @returns {number} Returns the index of the last unmatched string symbol.
    	   */
    	  function charsEndIndex(strSymbols, chrSymbols) {
    	    var index = strSymbols.length;

    	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    	    return index;
    	  }

    	  /**
    	   * Gets the number of `placeholder` occurrences in `array`.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} placeholder The placeholder to search for.
    	   * @returns {number} Returns the placeholder count.
    	   */
    	  function countHolders(array, placeholder) {
    	    var length = array.length,
    	        result = 0;

    	    while (length--) {
    	      if (array[length] === placeholder) {
    	        ++result;
    	      }
    	    }
    	    return result;
    	  }

    	  /**
    	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
    	   * letters to basic Latin letters.
    	   *
    	   * @private
    	   * @param {string} letter The matched letter to deburr.
    	   * @returns {string} Returns the deburred letter.
    	   */
    	  var deburrLetter = basePropertyOf(deburredLetters);

    	  /**
    	   * Used by `_.escape` to convert characters to HTML entities.
    	   *
    	   * @private
    	   * @param {string} chr The matched character to escape.
    	   * @returns {string} Returns the escaped character.
    	   */
    	  var escapeHtmlChar = basePropertyOf(htmlEscapes);

    	  /**
    	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
    	   *
    	   * @private
    	   * @param {string} chr The matched character to escape.
    	   * @returns {string} Returns the escaped character.
    	   */
    	  function escapeStringChar(chr) {
    	    return '\\' + stringEscapes[chr];
    	  }

    	  /**
    	   * Gets the value at `key` of `object`.
    	   *
    	   * @private
    	   * @param {Object} [object] The object to query.
    	   * @param {string} key The key of the property to get.
    	   * @returns {*} Returns the property value.
    	   */
    	  function getValue(object, key) {
    	    return object == null ? undefined$1 : object[key];
    	  }

    	  /**
    	   * Checks if `string` contains Unicode symbols.
    	   *
    	   * @private
    	   * @param {string} string The string to inspect.
    	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
    	   */
    	  function hasUnicode(string) {
    	    return reHasUnicode.test(string);
    	  }

    	  /**
    	   * Checks if `string` contains a word composed of Unicode symbols.
    	   *
    	   * @private
    	   * @param {string} string The string to inspect.
    	   * @returns {boolean} Returns `true` if a word is found, else `false`.
    	   */
    	  function hasUnicodeWord(string) {
    	    return reHasUnicodeWord.test(string);
    	  }

    	  /**
    	   * Converts `iterator` to an array.
    	   *
    	   * @private
    	   * @param {Object} iterator The iterator to convert.
    	   * @returns {Array} Returns the converted array.
    	   */
    	  function iteratorToArray(iterator) {
    	    var data,
    	        result = [];

    	    while (!(data = iterator.next()).done) {
    	      result.push(data.value);
    	    }
    	    return result;
    	  }

    	  /**
    	   * Converts `map` to its key-value pairs.
    	   *
    	   * @private
    	   * @param {Object} map The map to convert.
    	   * @returns {Array} Returns the key-value pairs.
    	   */
    	  function mapToArray(map) {
    	    var index = -1,
    	        result = Array(map.size);

    	    map.forEach(function(value, key) {
    	      result[++index] = [key, value];
    	    });
    	    return result;
    	  }

    	  /**
    	   * Creates a unary function that invokes `func` with its argument transformed.
    	   *
    	   * @private
    	   * @param {Function} func The function to wrap.
    	   * @param {Function} transform The argument transform.
    	   * @returns {Function} Returns the new function.
    	   */
    	  function overArg(func, transform) {
    	    return function(arg) {
    	      return func(transform(arg));
    	    };
    	  }

    	  /**
    	   * Replaces all `placeholder` elements in `array` with an internal placeholder
    	   * and returns an array of their indexes.
    	   *
    	   * @private
    	   * @param {Array} array The array to modify.
    	   * @param {*} placeholder The placeholder to replace.
    	   * @returns {Array} Returns the new array of placeholder indexes.
    	   */
    	  function replaceHolders(array, placeholder) {
    	    var index = -1,
    	        length = array.length,
    	        resIndex = 0,
    	        result = [];

    	    while (++index < length) {
    	      var value = array[index];
    	      if (value === placeholder || value === PLACEHOLDER) {
    	        array[index] = PLACEHOLDER;
    	        result[resIndex++] = index;
    	      }
    	    }
    	    return result;
    	  }

    	  /**
    	   * Converts `set` to an array of its values.
    	   *
    	   * @private
    	   * @param {Object} set The set to convert.
    	   * @returns {Array} Returns the values.
    	   */
    	  function setToArray(set) {
    	    var index = -1,
    	        result = Array(set.size);

    	    set.forEach(function(value) {
    	      result[++index] = value;
    	    });
    	    return result;
    	  }

    	  /**
    	   * Converts `set` to its value-value pairs.
    	   *
    	   * @private
    	   * @param {Object} set The set to convert.
    	   * @returns {Array} Returns the value-value pairs.
    	   */
    	  function setToPairs(set) {
    	    var index = -1,
    	        result = Array(set.size);

    	    set.forEach(function(value) {
    	      result[++index] = [value, value];
    	    });
    	    return result;
    	  }

    	  /**
    	   * A specialized version of `_.indexOf` which performs strict equality
    	   * comparisons of values, i.e. `===`.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} value The value to search for.
    	   * @param {number} fromIndex The index to search from.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function strictIndexOf(array, value, fromIndex) {
    	    var index = fromIndex - 1,
    	        length = array.length;

    	    while (++index < length) {
    	      if (array[index] === value) {
    	        return index;
    	      }
    	    }
    	    return -1;
    	  }

    	  /**
    	   * A specialized version of `_.lastIndexOf` which performs strict equality
    	   * comparisons of values, i.e. `===`.
    	   *
    	   * @private
    	   * @param {Array} array The array to inspect.
    	   * @param {*} value The value to search for.
    	   * @param {number} fromIndex The index to search from.
    	   * @returns {number} Returns the index of the matched value, else `-1`.
    	   */
    	  function strictLastIndexOf(array, value, fromIndex) {
    	    var index = fromIndex + 1;
    	    while (index--) {
    	      if (array[index] === value) {
    	        return index;
    	      }
    	    }
    	    return index;
    	  }

    	  /**
    	   * Gets the number of symbols in `string`.
    	   *
    	   * @private
    	   * @param {string} string The string to inspect.
    	   * @returns {number} Returns the string size.
    	   */
    	  function stringSize(string) {
    	    return hasUnicode(string)
    	      ? unicodeSize(string)
    	      : asciiSize(string);
    	  }

    	  /**
    	   * Converts `string` to an array.
    	   *
    	   * @private
    	   * @param {string} string The string to convert.
    	   * @returns {Array} Returns the converted array.
    	   */
    	  function stringToArray(string) {
    	    return hasUnicode(string)
    	      ? unicodeToArray(string)
    	      : asciiToArray(string);
    	  }

    	  /**
    	   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
    	   * character of `string`.
    	   *
    	   * @private
    	   * @param {string} string The string to inspect.
    	   * @returns {number} Returns the index of the last non-whitespace character.
    	   */
    	  function trimmedEndIndex(string) {
    	    var index = string.length;

    	    while (index-- && reWhitespace.test(string.charAt(index))) {}
    	    return index;
    	  }

    	  /**
    	   * Used by `_.unescape` to convert HTML entities to characters.
    	   *
    	   * @private
    	   * @param {string} chr The matched character to unescape.
    	   * @returns {string} Returns the unescaped character.
    	   */
    	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    	  /**
    	   * Gets the size of a Unicode `string`.
    	   *
    	   * @private
    	   * @param {string} string The string inspect.
    	   * @returns {number} Returns the string size.
    	   */
    	  function unicodeSize(string) {
    	    var result = reUnicode.lastIndex = 0;
    	    while (reUnicode.test(string)) {
    	      ++result;
    	    }
    	    return result;
    	  }

    	  /**
    	   * Converts a Unicode `string` to an array.
    	   *
    	   * @private
    	   * @param {string} string The string to convert.
    	   * @returns {Array} Returns the converted array.
    	   */
    	  function unicodeToArray(string) {
    	    return string.match(reUnicode) || [];
    	  }

    	  /**
    	   * Splits a Unicode `string` into an array of its words.
    	   *
    	   * @private
    	   * @param {string} The string to inspect.
    	   * @returns {Array} Returns the words of `string`.
    	   */
    	  function unicodeWords(string) {
    	    return string.match(reUnicodeWord) || [];
    	  }

    	  /*--------------------------------------------------------------------------*/

    	  /**
    	   * Create a new pristine `lodash` function using the `context` object.
    	   *
    	   * @static
    	   * @memberOf _
    	   * @since 1.1.0
    	   * @category Util
    	   * @param {Object} [context=root] The context object.
    	   * @returns {Function} Returns a new `lodash` function.
    	   * @example
    	   *
    	   * _.mixin({ 'foo': _.constant('foo') });
    	   *
    	   * var lodash = _.runInContext();
    	   * lodash.mixin({ 'bar': lodash.constant('bar') });
    	   *
    	   * _.isFunction(_.foo);
    	   * // => true
    	   * _.isFunction(_.bar);
    	   * // => false
    	   *
    	   * lodash.isFunction(lodash.foo);
    	   * // => false
    	   * lodash.isFunction(lodash.bar);
    	   * // => true
    	   *
    	   * // Create a suped-up `defer` in Node.js.
    	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
    	   */
    	  var runInContext = (function runInContext(context) {
    	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    	    /** Built-in constructor references. */
    	    var Array = context.Array,
    	        Date = context.Date,
    	        Error = context.Error,
    	        Function = context.Function,
    	        Math = context.Math,
    	        Object = context.Object,
    	        RegExp = context.RegExp,
    	        String = context.String,
    	        TypeError = context.TypeError;

    	    /** Used for built-in method references. */
    	    var arrayProto = Array.prototype,
    	        funcProto = Function.prototype,
    	        objectProto = Object.prototype;

    	    /** Used to detect overreaching core-js shims. */
    	    var coreJsData = context['__core-js_shared__'];

    	    /** Used to resolve the decompiled source of functions. */
    	    var funcToString = funcProto.toString;

    	    /** Used to check objects for own properties. */
    	    var hasOwnProperty = objectProto.hasOwnProperty;

    	    /** Used to generate unique IDs. */
    	    var idCounter = 0;

    	    /** Used to detect methods masquerading as native. */
    	    var maskSrcKey = (function() {
    	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    	      return uid ? ('Symbol(src)_1.' + uid) : '';
    	    }());

    	    /**
    	     * Used to resolve the
    	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
    	     * of values.
    	     */
    	    var nativeObjectToString = objectProto.toString;

    	    /** Used to infer the `Object` constructor. */
    	    var objectCtorString = funcToString.call(Object);

    	    /** Used to restore the original `_` reference in `_.noConflict`. */
    	    var oldDash = root._;

    	    /** Used to detect if a method is native. */
    	    var reIsNative = RegExp('^' +
    	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
    	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    	    );

    	    /** Built-in value references. */
    	    var Buffer = moduleExports ? context.Buffer : undefined$1,
    	        Symbol = context.Symbol,
    	        Uint8Array = context.Uint8Array,
    	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
    	        getPrototype = overArg(Object.getPrototypeOf, Object),
    	        objectCreate = Object.create,
    	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
    	        splice = arrayProto.splice,
    	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
    	        symIterator = Symbol ? Symbol.iterator : undefined$1,
    	        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

    	    var defineProperty = (function() {
    	      try {
    	        var func = getNative(Object, 'defineProperty');
    	        func({}, '', {});
    	        return func;
    	      } catch (e) {}
    	    }());

    	    /** Mocked built-ins. */
    	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
    	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
    	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    	    /* Built-in method references for those with the same name as other `lodash` methods. */
    	    var nativeCeil = Math.ceil,
    	        nativeFloor = Math.floor,
    	        nativeGetSymbols = Object.getOwnPropertySymbols,
    	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
    	        nativeIsFinite = context.isFinite,
    	        nativeJoin = arrayProto.join,
    	        nativeKeys = overArg(Object.keys, Object),
    	        nativeMax = Math.max,
    	        nativeMin = Math.min,
    	        nativeNow = Date.now,
    	        nativeParseInt = context.parseInt,
    	        nativeRandom = Math.random,
    	        nativeReverse = arrayProto.reverse;

    	    /* Built-in method references that are verified to be native. */
    	    var DataView = getNative(context, 'DataView'),
    	        Map = getNative(context, 'Map'),
    	        Promise = getNative(context, 'Promise'),
    	        Set = getNative(context, 'Set'),
    	        WeakMap = getNative(context, 'WeakMap'),
    	        nativeCreate = getNative(Object, 'create');

    	    /** Used to store function metadata. */
    	    var metaMap = WeakMap && new WeakMap;

    	    /** Used to lookup unminified function names. */
    	    var realNames = {};

    	    /** Used to detect maps, sets, and weakmaps. */
    	    var dataViewCtorString = toSource(DataView),
    	        mapCtorString = toSource(Map),
    	        promiseCtorString = toSource(Promise),
    	        setCtorString = toSource(Set),
    	        weakMapCtorString = toSource(WeakMap);

    	    /** Used to convert symbols to primitives and strings. */
    	    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
    	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
    	        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a `lodash` object which wraps `value` to enable implicit method
    	     * chain sequences. Methods that operate on and return arrays, collections,
    	     * and functions can be chained together. Methods that retrieve a single value
    	     * or may return a primitive value will automatically end the chain sequence
    	     * and return the unwrapped value. Otherwise, the value must be unwrapped
    	     * with `_#value`.
    	     *
    	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
    	     * enabled using `_.chain`.
    	     *
    	     * The execution of chained methods is lazy, that is, it's deferred until
    	     * `_#value` is implicitly or explicitly called.
    	     *
    	     * Lazy evaluation allows several methods to support shortcut fusion.
    	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
    	     * the creation of intermediate arrays and can greatly reduce the number of
    	     * iteratee executions. Sections of a chain sequence qualify for shortcut
    	     * fusion if the section is applied to an array and iteratees accept only
    	     * one argument. The heuristic for whether a section qualifies for shortcut
    	     * fusion is subject to change.
    	     *
    	     * Chaining is supported in custom builds as long as the `_#value` method is
    	     * directly or indirectly included in the build.
    	     *
    	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
    	     *
    	     * The wrapper `Array` methods are:
    	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
    	     *
    	     * The wrapper `String` methods are:
    	     * `replace` and `split`
    	     *
    	     * The wrapper methods that support shortcut fusion are:
    	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
    	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
    	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
    	     *
    	     * The chainable wrapper methods are:
    	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
    	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
    	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
    	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
    	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
    	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
    	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
    	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
    	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
    	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
    	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
    	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
    	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
    	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
    	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
    	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
    	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
    	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
    	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
    	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
    	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
    	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
    	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
    	     * `zipObject`, `zipObjectDeep`, and `zipWith`
    	     *
    	     * The wrapper methods that are **not** chainable by default are:
    	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
    	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
    	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
    	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
    	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
    	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
    	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
    	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
    	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
    	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
    	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
    	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
    	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
    	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
    	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
    	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
    	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
    	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
    	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
    	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
    	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
    	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
    	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
    	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
    	     * `upperFirst`, `value`, and `words`
    	     *
    	     * @name _
    	     * @constructor
    	     * @category Seq
    	     * @param {*} value The value to wrap in a `lodash` instance.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var wrapped = _([1, 2, 3]);
    	     *
    	     * // Returns an unwrapped value.
    	     * wrapped.reduce(_.add);
    	     * // => 6
    	     *
    	     * // Returns a wrapped value.
    	     * var squares = wrapped.map(square);
    	     *
    	     * _.isArray(squares);
    	     * // => false
    	     *
    	     * _.isArray(squares.value());
    	     * // => true
    	     */
    	    function lodash(value) {
    	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
    	        if (value instanceof LodashWrapper) {
    	          return value;
    	        }
    	        if (hasOwnProperty.call(value, '__wrapped__')) {
    	          return wrapperClone(value);
    	        }
    	      }
    	      return new LodashWrapper(value);
    	    }

    	    /**
    	     * The base implementation of `_.create` without support for assigning
    	     * properties to the created object.
    	     *
    	     * @private
    	     * @param {Object} proto The object to inherit from.
    	     * @returns {Object} Returns the new object.
    	     */
    	    var baseCreate = (function() {
    	      function object() {}
    	      return function(proto) {
    	        if (!isObject(proto)) {
    	          return {};
    	        }
    	        if (objectCreate) {
    	          return objectCreate(proto);
    	        }
    	        object.prototype = proto;
    	        var result = new object;
    	        object.prototype = undefined$1;
    	        return result;
    	      };
    	    }());

    	    /**
    	     * The function whose prototype chain sequence wrappers inherit from.
    	     *
    	     * @private
    	     */
    	    function baseLodash() {
    	      // No operation performed.
    	    }

    	    /**
    	     * The base constructor for creating `lodash` wrapper objects.
    	     *
    	     * @private
    	     * @param {*} value The value to wrap.
    	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
    	     */
    	    function LodashWrapper(value, chainAll) {
    	      this.__wrapped__ = value;
    	      this.__actions__ = [];
    	      this.__chain__ = !!chainAll;
    	      this.__index__ = 0;
    	      this.__values__ = undefined$1;
    	    }

    	    /**
    	     * By default, the template delimiters used by lodash are like those in
    	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
    	     * following template settings to use alternative delimiters.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @type {Object}
    	     */
    	    lodash.templateSettings = {

    	      /**
    	       * Used to detect `data` property values to be HTML-escaped.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {RegExp}
    	       */
    	      'escape': reEscape,

    	      /**
    	       * Used to detect code to be evaluated.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {RegExp}
    	       */
    	      'evaluate': reEvaluate,

    	      /**
    	       * Used to detect `data` property values to inject.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {RegExp}
    	       */
    	      'interpolate': reInterpolate,

    	      /**
    	       * Used to reference the data object in the template text.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {string}
    	       */
    	      'variable': '',

    	      /**
    	       * Used to import variables into the compiled template.
    	       *
    	       * @memberOf _.templateSettings
    	       * @type {Object}
    	       */
    	      'imports': {

    	        /**
    	         * A reference to the `lodash` function.
    	         *
    	         * @memberOf _.templateSettings.imports
    	         * @type {Function}
    	         */
    	        '_': lodash
    	      }
    	    };

    	    // Ensure wrappers are instances of `baseLodash`.
    	    lodash.prototype = baseLodash.prototype;
    	    lodash.prototype.constructor = lodash;

    	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    	    LodashWrapper.prototype.constructor = LodashWrapper;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {*} value The value to wrap.
    	     */
    	    function LazyWrapper(value) {
    	      this.__wrapped__ = value;
    	      this.__actions__ = [];
    	      this.__dir__ = 1;
    	      this.__filtered__ = false;
    	      this.__iteratees__ = [];
    	      this.__takeCount__ = MAX_ARRAY_LENGTH;
    	      this.__views__ = [];
    	    }

    	    /**
    	     * Creates a clone of the lazy wrapper object.
    	     *
    	     * @private
    	     * @name clone
    	     * @memberOf LazyWrapper
    	     * @returns {Object} Returns the cloned `LazyWrapper` object.
    	     */
    	    function lazyClone() {
    	      var result = new LazyWrapper(this.__wrapped__);
    	      result.__actions__ = copyArray(this.__actions__);
    	      result.__dir__ = this.__dir__;
    	      result.__filtered__ = this.__filtered__;
    	      result.__iteratees__ = copyArray(this.__iteratees__);
    	      result.__takeCount__ = this.__takeCount__;
    	      result.__views__ = copyArray(this.__views__);
    	      return result;
    	    }

    	    /**
    	     * Reverses the direction of lazy iteration.
    	     *
    	     * @private
    	     * @name reverse
    	     * @memberOf LazyWrapper
    	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
    	     */
    	    function lazyReverse() {
    	      if (this.__filtered__) {
    	        var result = new LazyWrapper(this);
    	        result.__dir__ = -1;
    	        result.__filtered__ = true;
    	      } else {
    	        result = this.clone();
    	        result.__dir__ *= -1;
    	      }
    	      return result;
    	    }

    	    /**
    	     * Extracts the unwrapped value from its lazy wrapper.
    	     *
    	     * @private
    	     * @name value
    	     * @memberOf LazyWrapper
    	     * @returns {*} Returns the unwrapped value.
    	     */
    	    function lazyValue() {
    	      var array = this.__wrapped__.value(),
    	          dir = this.__dir__,
    	          isArr = isArray(array),
    	          isRight = dir < 0,
    	          arrLength = isArr ? array.length : 0,
    	          view = getView(0, arrLength, this.__views__),
    	          start = view.start,
    	          end = view.end,
    	          length = end - start,
    	          index = isRight ? end : (start - 1),
    	          iteratees = this.__iteratees__,
    	          iterLength = iteratees.length,
    	          resIndex = 0,
    	          takeCount = nativeMin(length, this.__takeCount__);

    	      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
    	        return baseWrapperValue(array, this.__actions__);
    	      }
    	      var result = [];

    	      outer:
    	      while (length-- && resIndex < takeCount) {
    	        index += dir;

    	        var iterIndex = -1,
    	            value = array[index];

    	        while (++iterIndex < iterLength) {
    	          var data = iteratees[iterIndex],
    	              iteratee = data.iteratee,
    	              type = data.type,
    	              computed = iteratee(value);

    	          if (type == LAZY_MAP_FLAG) {
    	            value = computed;
    	          } else if (!computed) {
    	            if (type == LAZY_FILTER_FLAG) {
    	              continue outer;
    	            } else {
    	              break outer;
    	            }
    	          }
    	        }
    	        result[resIndex++] = value;
    	      }
    	      return result;
    	    }

    	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    	    LazyWrapper.prototype.constructor = LazyWrapper;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a hash object.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function Hash(entries) {
    	      var index = -1,
    	          length = entries == null ? 0 : entries.length;

    	      this.clear();
    	      while (++index < length) {
    	        var entry = entries[index];
    	        this.set(entry[0], entry[1]);
    	      }
    	    }

    	    /**
    	     * Removes all key-value entries from the hash.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf Hash
    	     */
    	    function hashClear() {
    	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    	      this.size = 0;
    	    }

    	    /**
    	     * Removes `key` and its value from the hash.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf Hash
    	     * @param {Object} hash The hash to modify.
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function hashDelete(key) {
    	      var result = this.has(key) && delete this.__data__[key];
    	      this.size -= result ? 1 : 0;
    	      return result;
    	    }

    	    /**
    	     * Gets the hash value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf Hash
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function hashGet(key) {
    	      var data = this.__data__;
    	      if (nativeCreate) {
    	        var result = data[key];
    	        return result === HASH_UNDEFINED ? undefined$1 : result;
    	      }
    	      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
    	    }

    	    /**
    	     * Checks if a hash value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf Hash
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function hashHas(key) {
    	      var data = this.__data__;
    	      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
    	    }

    	    /**
    	     * Sets the hash `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf Hash
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the hash instance.
    	     */
    	    function hashSet(key, value) {
    	      var data = this.__data__;
    	      this.size += this.has(key) ? 0 : 1;
    	      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
    	      return this;
    	    }

    	    // Add methods to `Hash`.
    	    Hash.prototype.clear = hashClear;
    	    Hash.prototype['delete'] = hashDelete;
    	    Hash.prototype.get = hashGet;
    	    Hash.prototype.has = hashHas;
    	    Hash.prototype.set = hashSet;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates an list cache object.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function ListCache(entries) {
    	      var index = -1,
    	          length = entries == null ? 0 : entries.length;

    	      this.clear();
    	      while (++index < length) {
    	        var entry = entries[index];
    	        this.set(entry[0], entry[1]);
    	      }
    	    }

    	    /**
    	     * Removes all key-value entries from the list cache.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf ListCache
    	     */
    	    function listCacheClear() {
    	      this.__data__ = [];
    	      this.size = 0;
    	    }

    	    /**
    	     * Removes `key` and its value from the list cache.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf ListCache
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function listCacheDelete(key) {
    	      var data = this.__data__,
    	          index = assocIndexOf(data, key);

    	      if (index < 0) {
    	        return false;
    	      }
    	      var lastIndex = data.length - 1;
    	      if (index == lastIndex) {
    	        data.pop();
    	      } else {
    	        splice.call(data, index, 1);
    	      }
    	      --this.size;
    	      return true;
    	    }

    	    /**
    	     * Gets the list cache value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf ListCache
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function listCacheGet(key) {
    	      var data = this.__data__,
    	          index = assocIndexOf(data, key);

    	      return index < 0 ? undefined$1 : data[index][1];
    	    }

    	    /**
    	     * Checks if a list cache value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf ListCache
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function listCacheHas(key) {
    	      return assocIndexOf(this.__data__, key) > -1;
    	    }

    	    /**
    	     * Sets the list cache `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf ListCache
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the list cache instance.
    	     */
    	    function listCacheSet(key, value) {
    	      var data = this.__data__,
    	          index = assocIndexOf(data, key);

    	      if (index < 0) {
    	        ++this.size;
    	        data.push([key, value]);
    	      } else {
    	        data[index][1] = value;
    	      }
    	      return this;
    	    }

    	    // Add methods to `ListCache`.
    	    ListCache.prototype.clear = listCacheClear;
    	    ListCache.prototype['delete'] = listCacheDelete;
    	    ListCache.prototype.get = listCacheGet;
    	    ListCache.prototype.has = listCacheHas;
    	    ListCache.prototype.set = listCacheSet;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a map cache object to store key-value pairs.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function MapCache(entries) {
    	      var index = -1,
    	          length = entries == null ? 0 : entries.length;

    	      this.clear();
    	      while (++index < length) {
    	        var entry = entries[index];
    	        this.set(entry[0], entry[1]);
    	      }
    	    }

    	    /**
    	     * Removes all key-value entries from the map.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf MapCache
    	     */
    	    function mapCacheClear() {
    	      this.size = 0;
    	      this.__data__ = {
    	        'hash': new Hash,
    	        'map': new (Map || ListCache),
    	        'string': new Hash
    	      };
    	    }

    	    /**
    	     * Removes `key` and its value from the map.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf MapCache
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function mapCacheDelete(key) {
    	      var result = getMapData(this, key)['delete'](key);
    	      this.size -= result ? 1 : 0;
    	      return result;
    	    }

    	    /**
    	     * Gets the map value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf MapCache
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function mapCacheGet(key) {
    	      return getMapData(this, key).get(key);
    	    }

    	    /**
    	     * Checks if a map value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf MapCache
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function mapCacheHas(key) {
    	      return getMapData(this, key).has(key);
    	    }

    	    /**
    	     * Sets the map `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf MapCache
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the map cache instance.
    	     */
    	    function mapCacheSet(key, value) {
    	      var data = getMapData(this, key),
    	          size = data.size;

    	      data.set(key, value);
    	      this.size += data.size == size ? 0 : 1;
    	      return this;
    	    }

    	    // Add methods to `MapCache`.
    	    MapCache.prototype.clear = mapCacheClear;
    	    MapCache.prototype['delete'] = mapCacheDelete;
    	    MapCache.prototype.get = mapCacheGet;
    	    MapCache.prototype.has = mapCacheHas;
    	    MapCache.prototype.set = mapCacheSet;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     *
    	     * Creates an array cache object to store unique values.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [values] The values to cache.
    	     */
    	    function SetCache(values) {
    	      var index = -1,
    	          length = values == null ? 0 : values.length;

    	      this.__data__ = new MapCache;
    	      while (++index < length) {
    	        this.add(values[index]);
    	      }
    	    }

    	    /**
    	     * Adds `value` to the array cache.
    	     *
    	     * @private
    	     * @name add
    	     * @memberOf SetCache
    	     * @alias push
    	     * @param {*} value The value to cache.
    	     * @returns {Object} Returns the cache instance.
    	     */
    	    function setCacheAdd(value) {
    	      this.__data__.set(value, HASH_UNDEFINED);
    	      return this;
    	    }

    	    /**
    	     * Checks if `value` is in the array cache.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf SetCache
    	     * @param {*} value The value to search for.
    	     * @returns {number} Returns `true` if `value` is found, else `false`.
    	     */
    	    function setCacheHas(value) {
    	      return this.__data__.has(value);
    	    }

    	    // Add methods to `SetCache`.
    	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    	    SetCache.prototype.has = setCacheHas;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a stack cache object to store key-value pairs.
    	     *
    	     * @private
    	     * @constructor
    	     * @param {Array} [entries] The key-value pairs to cache.
    	     */
    	    function Stack(entries) {
    	      var data = this.__data__ = new ListCache(entries);
    	      this.size = data.size;
    	    }

    	    /**
    	     * Removes all key-value entries from the stack.
    	     *
    	     * @private
    	     * @name clear
    	     * @memberOf Stack
    	     */
    	    function stackClear() {
    	      this.__data__ = new ListCache;
    	      this.size = 0;
    	    }

    	    /**
    	     * Removes `key` and its value from the stack.
    	     *
    	     * @private
    	     * @name delete
    	     * @memberOf Stack
    	     * @param {string} key The key of the value to remove.
    	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
    	     */
    	    function stackDelete(key) {
    	      var data = this.__data__,
    	          result = data['delete'](key);

    	      this.size = data.size;
    	      return result;
    	    }

    	    /**
    	     * Gets the stack value for `key`.
    	     *
    	     * @private
    	     * @name get
    	     * @memberOf Stack
    	     * @param {string} key The key of the value to get.
    	     * @returns {*} Returns the entry value.
    	     */
    	    function stackGet(key) {
    	      return this.__data__.get(key);
    	    }

    	    /**
    	     * Checks if a stack value for `key` exists.
    	     *
    	     * @private
    	     * @name has
    	     * @memberOf Stack
    	     * @param {string} key The key of the entry to check.
    	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
    	     */
    	    function stackHas(key) {
    	      return this.__data__.has(key);
    	    }

    	    /**
    	     * Sets the stack `key` to `value`.
    	     *
    	     * @private
    	     * @name set
    	     * @memberOf Stack
    	     * @param {string} key The key of the value to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns the stack cache instance.
    	     */
    	    function stackSet(key, value) {
    	      var data = this.__data__;
    	      if (data instanceof ListCache) {
    	        var pairs = data.__data__;
    	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
    	          pairs.push([key, value]);
    	          this.size = ++data.size;
    	          return this;
    	        }
    	        data = this.__data__ = new MapCache(pairs);
    	      }
    	      data.set(key, value);
    	      this.size = data.size;
    	      return this;
    	    }

    	    // Add methods to `Stack`.
    	    Stack.prototype.clear = stackClear;
    	    Stack.prototype['delete'] = stackDelete;
    	    Stack.prototype.get = stackGet;
    	    Stack.prototype.has = stackHas;
    	    Stack.prototype.set = stackSet;

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates an array of the enumerable property names of the array-like `value`.
    	     *
    	     * @private
    	     * @param {*} value The value to query.
    	     * @param {boolean} inherited Specify returning inherited property names.
    	     * @returns {Array} Returns the array of property names.
    	     */
    	    function arrayLikeKeys(value, inherited) {
    	      var isArr = isArray(value),
    	          isArg = !isArr && isArguments(value),
    	          isBuff = !isArr && !isArg && isBuffer(value),
    	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
    	          skipIndexes = isArr || isArg || isBuff || isType,
    	          result = skipIndexes ? baseTimes(value.length, String) : [],
    	          length = result.length;

    	      for (var key in value) {
    	        if ((inherited || hasOwnProperty.call(value, key)) &&
    	            !(skipIndexes && (
    	               // Safari 9 has enumerable `arguments.length` in strict mode.
    	               key == 'length' ||
    	               // Node.js 0.10 has enumerable non-index properties on buffers.
    	               (isBuff && (key == 'offset' || key == 'parent')) ||
    	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
    	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
    	               // Skip index properties.
    	               isIndex(key, length)
    	            ))) {
    	          result.push(key);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * A specialized version of `_.sample` for arrays.
    	     *
    	     * @private
    	     * @param {Array} array The array to sample.
    	     * @returns {*} Returns the random element.
    	     */
    	    function arraySample(array) {
    	      var length = array.length;
    	      return length ? array[baseRandom(0, length - 1)] : undefined$1;
    	    }

    	    /**
    	     * A specialized version of `_.sampleSize` for arrays.
    	     *
    	     * @private
    	     * @param {Array} array The array to sample.
    	     * @param {number} n The number of elements to sample.
    	     * @returns {Array} Returns the random elements.
    	     */
    	    function arraySampleSize(array, n) {
    	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    	    }

    	    /**
    	     * A specialized version of `_.shuffle` for arrays.
    	     *
    	     * @private
    	     * @param {Array} array The array to shuffle.
    	     * @returns {Array} Returns the new shuffled array.
    	     */
    	    function arrayShuffle(array) {
    	      return shuffleSelf(copyArray(array));
    	    }

    	    /**
    	     * This function is like `assignValue` except that it doesn't assign
    	     * `undefined` values.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {string} key The key of the property to assign.
    	     * @param {*} value The value to assign.
    	     */
    	    function assignMergeValue(object, key, value) {
    	      if ((value !== undefined$1 && !eq(object[key], value)) ||
    	          (value === undefined$1 && !(key in object))) {
    	        baseAssignValue(object, key, value);
    	      }
    	    }

    	    /**
    	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
    	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {string} key The key of the property to assign.
    	     * @param {*} value The value to assign.
    	     */
    	    function assignValue(object, key, value) {
    	      var objValue = object[key];
    	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
    	          (value === undefined$1 && !(key in object))) {
    	        baseAssignValue(object, key, value);
    	      }
    	    }

    	    /**
    	     * Gets the index at which the `key` is found in `array` of key-value pairs.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {*} key The key to search for.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     */
    	    function assocIndexOf(array, key) {
    	      var length = array.length;
    	      while (length--) {
    	        if (eq(array[length][0], key)) {
    	          return length;
    	        }
    	      }
    	      return -1;
    	    }

    	    /**
    	     * Aggregates elements of `collection` on `accumulator` with keys transformed
    	     * by `iteratee` and values set by `setter`.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} setter The function to set `accumulator` values.
    	     * @param {Function} iteratee The iteratee to transform keys.
    	     * @param {Object} accumulator The initial aggregated object.
    	     * @returns {Function} Returns `accumulator`.
    	     */
    	    function baseAggregator(collection, setter, iteratee, accumulator) {
    	      baseEach(collection, function(value, key, collection) {
    	        setter(accumulator, value, iteratee(value), collection);
    	      });
    	      return accumulator;
    	    }

    	    /**
    	     * The base implementation of `_.assign` without support for multiple sources
    	     * or `customizer` functions.
    	     *
    	     * @private
    	     * @param {Object} object The destination object.
    	     * @param {Object} source The source object.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseAssign(object, source) {
    	      return object && copyObject(source, keys(source), object);
    	    }

    	    /**
    	     * The base implementation of `_.assignIn` without support for multiple sources
    	     * or `customizer` functions.
    	     *
    	     * @private
    	     * @param {Object} object The destination object.
    	     * @param {Object} source The source object.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseAssignIn(object, source) {
    	      return object && copyObject(source, keysIn(source), object);
    	    }

    	    /**
    	     * The base implementation of `assignValue` and `assignMergeValue` without
    	     * value checks.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {string} key The key of the property to assign.
    	     * @param {*} value The value to assign.
    	     */
    	    function baseAssignValue(object, key, value) {
    	      if (key == '__proto__' && defineProperty) {
    	        defineProperty(object, key, {
    	          'configurable': true,
    	          'enumerable': true,
    	          'value': value,
    	          'writable': true
    	        });
    	      } else {
    	        object[key] = value;
    	      }
    	    }

    	    /**
    	     * The base implementation of `_.at` without support for individual paths.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {string[]} paths The property paths to pick.
    	     * @returns {Array} Returns the picked elements.
    	     */
    	    function baseAt(object, paths) {
    	      var index = -1,
    	          length = paths.length,
    	          result = Array(length),
    	          skip = object == null;

    	      while (++index < length) {
    	        result[index] = skip ? undefined$1 : get(object, paths[index]);
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.clamp` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {number} number The number to clamp.
    	     * @param {number} [lower] The lower bound.
    	     * @param {number} upper The upper bound.
    	     * @returns {number} Returns the clamped number.
    	     */
    	    function baseClamp(number, lower, upper) {
    	      if (number === number) {
    	        if (upper !== undefined$1) {
    	          number = number <= upper ? number : upper;
    	        }
    	        if (lower !== undefined$1) {
    	          number = number >= lower ? number : lower;
    	        }
    	      }
    	      return number;
    	    }

    	    /**
    	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
    	     * traversed objects.
    	     *
    	     * @private
    	     * @param {*} value The value to clone.
    	     * @param {boolean} bitmask The bitmask flags.
    	     *  1 - Deep clone
    	     *  2 - Flatten inherited properties
    	     *  4 - Clone symbols
    	     * @param {Function} [customizer] The function to customize cloning.
    	     * @param {string} [key] The key of `value`.
    	     * @param {Object} [object] The parent object of `value`.
    	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
    	     * @returns {*} Returns the cloned value.
    	     */
    	    function baseClone(value, bitmask, customizer, key, object, stack) {
    	      var result,
    	          isDeep = bitmask & CLONE_DEEP_FLAG,
    	          isFlat = bitmask & CLONE_FLAT_FLAG,
    	          isFull = bitmask & CLONE_SYMBOLS_FLAG;

    	      if (customizer) {
    	        result = object ? customizer(value, key, object, stack) : customizer(value);
    	      }
    	      if (result !== undefined$1) {
    	        return result;
    	      }
    	      if (!isObject(value)) {
    	        return value;
    	      }
    	      var isArr = isArray(value);
    	      if (isArr) {
    	        result = initCloneArray(value);
    	        if (!isDeep) {
    	          return copyArray(value, result);
    	        }
    	      } else {
    	        var tag = getTag(value),
    	            isFunc = tag == funcTag || tag == genTag;

    	        if (isBuffer(value)) {
    	          return cloneBuffer(value, isDeep);
    	        }
    	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
    	          result = (isFlat || isFunc) ? {} : initCloneObject(value);
    	          if (!isDeep) {
    	            return isFlat
    	              ? copySymbolsIn(value, baseAssignIn(result, value))
    	              : copySymbols(value, baseAssign(result, value));
    	          }
    	        } else {
    	          if (!cloneableTags[tag]) {
    	            return object ? value : {};
    	          }
    	          result = initCloneByTag(value, tag, isDeep);
    	        }
    	      }
    	      // Check for circular references and return its corresponding clone.
    	      stack || (stack = new Stack);
    	      var stacked = stack.get(value);
    	      if (stacked) {
    	        return stacked;
    	      }
    	      stack.set(value, result);

    	      if (isSet(value)) {
    	        value.forEach(function(subValue) {
    	          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    	        });
    	      } else if (isMap(value)) {
    	        value.forEach(function(subValue, key) {
    	          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    	        });
    	      }

    	      var keysFunc = isFull
    	        ? (isFlat ? getAllKeysIn : getAllKeys)
    	        : (isFlat ? keysIn : keys);

    	      var props = isArr ? undefined$1 : keysFunc(value);
    	      arrayEach(props || value, function(subValue, key) {
    	        if (props) {
    	          key = subValue;
    	          subValue = value[key];
    	        }
    	        // Recursively populate clone (susceptible to call stack limits).
    	        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    	      });
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.conforms` which doesn't clone `source`.
    	     *
    	     * @private
    	     * @param {Object} source The object of property predicates to conform to.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function baseConforms(source) {
    	      var props = keys(source);
    	      return function(object) {
    	        return baseConformsTo(object, source, props);
    	      };
    	    }

    	    /**
    	     * The base implementation of `_.conformsTo` which accepts `props` to check.
    	     *
    	     * @private
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property predicates to conform to.
    	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
    	     */
    	    function baseConformsTo(object, source, props) {
    	      var length = props.length;
    	      if (object == null) {
    	        return !length;
    	      }
    	      object = Object(object);
    	      while (length--) {
    	        var key = props[length],
    	            predicate = source[key],
    	            value = object[key];

    	        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
    	          return false;
    	        }
    	      }
    	      return true;
    	    }

    	    /**
    	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
    	     * to provide to `func`.
    	     *
    	     * @private
    	     * @param {Function} func The function to delay.
    	     * @param {number} wait The number of milliseconds to delay invocation.
    	     * @param {Array} args The arguments to provide to `func`.
    	     * @returns {number|Object} Returns the timer id or timeout object.
    	     */
    	    function baseDelay(func, wait, args) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
    	    }

    	    /**
    	     * The base implementation of methods like `_.difference` without support
    	     * for excluding multiple arrays or iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {Array} values The values to exclude.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     */
    	    function baseDifference(array, values, iteratee, comparator) {
    	      var index = -1,
    	          includes = arrayIncludes,
    	          isCommon = true,
    	          length = array.length,
    	          result = [],
    	          valuesLength = values.length;

    	      if (!length) {
    	        return result;
    	      }
    	      if (iteratee) {
    	        values = arrayMap(values, baseUnary(iteratee));
    	      }
    	      if (comparator) {
    	        includes = arrayIncludesWith;
    	        isCommon = false;
    	      }
    	      else if (values.length >= LARGE_ARRAY_SIZE) {
    	        includes = cacheHas;
    	        isCommon = false;
    	        values = new SetCache(values);
    	      }
    	      outer:
    	      while (++index < length) {
    	        var value = array[index],
    	            computed = iteratee == null ? value : iteratee(value);

    	        value = (comparator || value !== 0) ? value : 0;
    	        if (isCommon && computed === computed) {
    	          var valuesIndex = valuesLength;
    	          while (valuesIndex--) {
    	            if (values[valuesIndex] === computed) {
    	              continue outer;
    	            }
    	          }
    	          result.push(value);
    	        }
    	        else if (!includes(values, computed, comparator)) {
    	          result.push(value);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.forEach` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     */
    	    var baseEach = createBaseEach(baseForOwn);

    	    /**
    	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     */
    	    var baseEachRight = createBaseEach(baseForOwnRight, true);

    	    /**
    	     * The base implementation of `_.every` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
    	     *  else `false`
    	     */
    	    function baseEvery(collection, predicate) {
    	      var result = true;
    	      baseEach(collection, function(value, index, collection) {
    	        result = !!predicate(value, index, collection);
    	        return result;
    	      });
    	      return result;
    	    }

    	    /**
    	     * The base implementation of methods like `_.max` and `_.min` which accepts a
    	     * `comparator` to determine the extremum value.
    	     *
    	     * @private
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} iteratee The iteratee invoked per iteration.
    	     * @param {Function} comparator The comparator used to compare values.
    	     * @returns {*} Returns the extremum value.
    	     */
    	    function baseExtremum(array, iteratee, comparator) {
    	      var index = -1,
    	          length = array.length;

    	      while (++index < length) {
    	        var value = array[index],
    	            current = iteratee(value);

    	        if (current != null && (computed === undefined$1
    	              ? (current === current && !isSymbol(current))
    	              : comparator(current, computed)
    	            )) {
    	          var computed = current,
    	              result = value;
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.fill` without an iteratee call guard.
    	     *
    	     * @private
    	     * @param {Array} array The array to fill.
    	     * @param {*} value The value to fill `array` with.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function baseFill(array, value, start, end) {
    	      var length = array.length;

    	      start = toInteger(start);
    	      if (start < 0) {
    	        start = -start > length ? 0 : (length + start);
    	      }
    	      end = (end === undefined$1 || end > length) ? length : toInteger(end);
    	      if (end < 0) {
    	        end += length;
    	      }
    	      end = start > end ? 0 : toLength(end);
    	      while (start < end) {
    	        array[start++] = value;
    	      }
    	      return array;
    	    }

    	    /**
    	     * The base implementation of `_.filter` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @returns {Array} Returns the new filtered array.
    	     */
    	    function baseFilter(collection, predicate) {
    	      var result = [];
    	      baseEach(collection, function(value, index, collection) {
    	        if (predicate(value, index, collection)) {
    	          result.push(value);
    	        }
    	      });
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.flatten` with support for restricting flattening.
    	     *
    	     * @private
    	     * @param {Array} array The array to flatten.
    	     * @param {number} depth The maximum recursion depth.
    	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
    	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
    	     * @param {Array} [result=[]] The initial result value.
    	     * @returns {Array} Returns the new flattened array.
    	     */
    	    function baseFlatten(array, depth, predicate, isStrict, result) {
    	      var index = -1,
    	          length = array.length;

    	      predicate || (predicate = isFlattenable);
    	      result || (result = []);

    	      while (++index < length) {
    	        var value = array[index];
    	        if (depth > 0 && predicate(value)) {
    	          if (depth > 1) {
    	            // Recursively flatten arrays (susceptible to call stack limits).
    	            baseFlatten(value, depth - 1, predicate, isStrict, result);
    	          } else {
    	            arrayPush(result, value);
    	          }
    	        } else if (!isStrict) {
    	          result[result.length] = value;
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `baseForOwn` which iterates over `object`
    	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
    	     * Iteratee functions may exit iteration early by explicitly returning `false`.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @param {Function} keysFunc The function to get the keys of `object`.
    	     * @returns {Object} Returns `object`.
    	     */
    	    var baseFor = createBaseFor();

    	    /**
    	     * This function is like `baseFor` except that it iterates over properties
    	     * in the opposite order.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @param {Function} keysFunc The function to get the keys of `object`.
    	     * @returns {Object} Returns `object`.
    	     */
    	    var baseForRight = createBaseFor(true);

    	    /**
    	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseForOwn(object, iteratee) {
    	      return object && baseFor(object, iteratee, keys);
    	    }

    	    /**
    	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseForOwnRight(object, iteratee) {
    	      return object && baseForRight(object, iteratee, keys);
    	    }

    	    /**
    	     * The base implementation of `_.functions` which creates an array of
    	     * `object` function property names filtered from `props`.
    	     *
    	     * @private
    	     * @param {Object} object The object to inspect.
    	     * @param {Array} props The property names to filter.
    	     * @returns {Array} Returns the function names.
    	     */
    	    function baseFunctions(object, props) {
    	      return arrayFilter(props, function(key) {
    	        return isFunction(object[key]);
    	      });
    	    }

    	    /**
    	     * The base implementation of `_.get` without support for default values.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the property to get.
    	     * @returns {*} Returns the resolved value.
    	     */
    	    function baseGet(object, path) {
    	      path = castPath(path, object);

    	      var index = 0,
    	          length = path.length;

    	      while (object != null && index < length) {
    	        object = object[toKey(path[index++])];
    	      }
    	      return (index && index == length) ? object : undefined$1;
    	    }

    	    /**
    	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
    	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
    	     * symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Function} keysFunc The function to get the keys of `object`.
    	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
    	     * @returns {Array} Returns the array of property names and symbols.
    	     */
    	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    	      var result = keysFunc(object);
    	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    	    }

    	    /**
    	     * The base implementation of `getTag` without fallbacks for buggy environments.
    	     *
    	     * @private
    	     * @param {*} value The value to query.
    	     * @returns {string} Returns the `toStringTag`.
    	     */
    	    function baseGetTag(value) {
    	      if (value == null) {
    	        return value === undefined$1 ? undefinedTag : nullTag;
    	      }
    	      return (symToStringTag && symToStringTag in Object(value))
    	        ? getRawTag(value)
    	        : objectToString(value);
    	    }

    	    /**
    	     * The base implementation of `_.gt` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
    	     *  else `false`.
    	     */
    	    function baseGt(value, other) {
    	      return value > other;
    	    }

    	    /**
    	     * The base implementation of `_.has` without support for deep paths.
    	     *
    	     * @private
    	     * @param {Object} [object] The object to query.
    	     * @param {Array|string} key The key to check.
    	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
    	     */
    	    function baseHas(object, key) {
    	      return object != null && hasOwnProperty.call(object, key);
    	    }

    	    /**
    	     * The base implementation of `_.hasIn` without support for deep paths.
    	     *
    	     * @private
    	     * @param {Object} [object] The object to query.
    	     * @param {Array|string} key The key to check.
    	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
    	     */
    	    function baseHasIn(object, key) {
    	      return object != null && key in Object(object);
    	    }

    	    /**
    	     * The base implementation of `_.inRange` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {number} number The number to check.
    	     * @param {number} start The start of the range.
    	     * @param {number} end The end of the range.
    	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
    	     */
    	    function baseInRange(number, start, end) {
    	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    	    }

    	    /**
    	     * The base implementation of methods like `_.intersection`, without support
    	     * for iteratee shorthands, that accepts an array of arrays to inspect.
    	     *
    	     * @private
    	     * @param {Array} arrays The arrays to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of shared values.
    	     */
    	    function baseIntersection(arrays, iteratee, comparator) {
    	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
    	          length = arrays[0].length,
    	          othLength = arrays.length,
    	          othIndex = othLength,
    	          caches = Array(othLength),
    	          maxLength = Infinity,
    	          result = [];

    	      while (othIndex--) {
    	        var array = arrays[othIndex];
    	        if (othIndex && iteratee) {
    	          array = arrayMap(array, baseUnary(iteratee));
    	        }
    	        maxLength = nativeMin(array.length, maxLength);
    	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
    	          ? new SetCache(othIndex && array)
    	          : undefined$1;
    	      }
    	      array = arrays[0];

    	      var index = -1,
    	          seen = caches[0];

    	      outer:
    	      while (++index < length && result.length < maxLength) {
    	        var value = array[index],
    	            computed = iteratee ? iteratee(value) : value;

    	        value = (comparator || value !== 0) ? value : 0;
    	        if (!(seen
    	              ? cacheHas(seen, computed)
    	              : includes(result, computed, comparator)
    	            )) {
    	          othIndex = othLength;
    	          while (--othIndex) {
    	            var cache = caches[othIndex];
    	            if (!(cache
    	                  ? cacheHas(cache, computed)
    	                  : includes(arrays[othIndex], computed, comparator))
    	                ) {
    	              continue outer;
    	            }
    	          }
    	          if (seen) {
    	            seen.push(computed);
    	          }
    	          result.push(value);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.invert` and `_.invertBy` which inverts
    	     * `object` with values transformed by `iteratee` and set by `setter`.
    	     *
    	     * @private
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} setter The function to set `accumulator` values.
    	     * @param {Function} iteratee The iteratee to transform values.
    	     * @param {Object} accumulator The initial inverted object.
    	     * @returns {Function} Returns `accumulator`.
    	     */
    	    function baseInverter(object, setter, iteratee, accumulator) {
    	      baseForOwn(object, function(value, key, object) {
    	        setter(accumulator, iteratee(value), key, object);
    	      });
    	      return accumulator;
    	    }

    	    /**
    	     * The base implementation of `_.invoke` without support for individual
    	     * method arguments.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the method to invoke.
    	     * @param {Array} args The arguments to invoke the method with.
    	     * @returns {*} Returns the result of the invoked method.
    	     */
    	    function baseInvoke(object, path, args) {
    	      path = castPath(path, object);
    	      object = parent(object, path);
    	      var func = object == null ? object : object[toKey(last(path))];
    	      return func == null ? undefined$1 : apply(func, object, args);
    	    }

    	    /**
    	     * The base implementation of `_.isArguments`.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
    	     */
    	    function baseIsArguments(value) {
    	      return isObjectLike(value) && baseGetTag(value) == argsTag;
    	    }

    	    /**
    	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
    	     */
    	    function baseIsArrayBuffer(value) {
    	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    	    }

    	    /**
    	     * The base implementation of `_.isDate` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
    	     */
    	    function baseIsDate(value) {
    	      return isObjectLike(value) && baseGetTag(value) == dateTag;
    	    }

    	    /**
    	     * The base implementation of `_.isEqual` which supports partial comparisons
    	     * and tracks traversed objects.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @param {boolean} bitmask The bitmask flags.
    	     *  1 - Unordered comparison
    	     *  2 - Partial comparison
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
    	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	     */
    	    function baseIsEqual(value, other, bitmask, customizer, stack) {
    	      if (value === other) {
    	        return true;
    	      }
    	      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    	        return value !== value && other !== other;
    	      }
    	      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    	    }

    	    /**
    	     * A specialized version of `baseIsEqual` for arrays and objects which performs
    	     * deep comparisons and tracks traversed objects enabling objects with circular
    	     * references to be compared.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	     * @param {Function} customizer The function to customize comparisons.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
    	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	     */
    	    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    	      var objIsArr = isArray(object),
    	          othIsArr = isArray(other),
    	          objTag = objIsArr ? arrayTag : getTag(object),
    	          othTag = othIsArr ? arrayTag : getTag(other);

    	      objTag = objTag == argsTag ? objectTag : objTag;
    	      othTag = othTag == argsTag ? objectTag : othTag;

    	      var objIsObj = objTag == objectTag,
    	          othIsObj = othTag == objectTag,
    	          isSameTag = objTag == othTag;

    	      if (isSameTag && isBuffer(object)) {
    	        if (!isBuffer(other)) {
    	          return false;
    	        }
    	        objIsArr = true;
    	        objIsObj = false;
    	      }
    	      if (isSameTag && !objIsObj) {
    	        stack || (stack = new Stack);
    	        return (objIsArr || isTypedArray(object))
    	          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
    	          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    	      }
    	      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
    	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    	        if (objIsWrapped || othIsWrapped) {
    	          var objUnwrapped = objIsWrapped ? object.value() : object,
    	              othUnwrapped = othIsWrapped ? other.value() : other;

    	          stack || (stack = new Stack);
    	          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    	        }
    	      }
    	      if (!isSameTag) {
    	        return false;
    	      }
    	      stack || (stack = new Stack);
    	      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    	    }

    	    /**
    	     * The base implementation of `_.isMap` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
    	     */
    	    function baseIsMap(value) {
    	      return isObjectLike(value) && getTag(value) == mapTag;
    	    }

    	    /**
    	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property values to match.
    	     * @param {Array} matchData The property names, values, and compare flags to match.
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
    	     */
    	    function baseIsMatch(object, source, matchData, customizer) {
    	      var index = matchData.length,
    	          length = index,
    	          noCustomizer = !customizer;

    	      if (object == null) {
    	        return !length;
    	      }
    	      object = Object(object);
    	      while (index--) {
    	        var data = matchData[index];
    	        if ((noCustomizer && data[2])
    	              ? data[1] !== object[data[0]]
    	              : !(data[0] in object)
    	            ) {
    	          return false;
    	        }
    	      }
    	      while (++index < length) {
    	        data = matchData[index];
    	        var key = data[0],
    	            objValue = object[key],
    	            srcValue = data[1];

    	        if (noCustomizer && data[2]) {
    	          if (objValue === undefined$1 && !(key in object)) {
    	            return false;
    	          }
    	        } else {
    	          var stack = new Stack;
    	          if (customizer) {
    	            var result = customizer(objValue, srcValue, key, object, source, stack);
    	          }
    	          if (!(result === undefined$1
    	                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
    	                : result
    	              )) {
    	            return false;
    	          }
    	        }
    	      }
    	      return true;
    	    }

    	    /**
    	     * The base implementation of `_.isNative` without bad shim checks.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a native function,
    	     *  else `false`.
    	     */
    	    function baseIsNative(value) {
    	      if (!isObject(value) || isMasked(value)) {
    	        return false;
    	      }
    	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    	      return pattern.test(toSource(value));
    	    }

    	    /**
    	     * The base implementation of `_.isRegExp` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
    	     */
    	    function baseIsRegExp(value) {
    	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    	    }

    	    /**
    	     * The base implementation of `_.isSet` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
    	     */
    	    function baseIsSet(value) {
    	      return isObjectLike(value) && getTag(value) == setTag;
    	    }

    	    /**
    	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
    	     */
    	    function baseIsTypedArray(value) {
    	      return isObjectLike(value) &&
    	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    	    }

    	    /**
    	     * The base implementation of `_.iteratee`.
    	     *
    	     * @private
    	     * @param {*} [value=_.identity] The value to convert to an iteratee.
    	     * @returns {Function} Returns the iteratee.
    	     */
    	    function baseIteratee(value) {
    	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    	      if (typeof value == 'function') {
    	        return value;
    	      }
    	      if (value == null) {
    	        return identity;
    	      }
    	      if (typeof value == 'object') {
    	        return isArray(value)
    	          ? baseMatchesProperty(value[0], value[1])
    	          : baseMatches(value);
    	      }
    	      return property(value);
    	    }

    	    /**
    	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     */
    	    function baseKeys(object) {
    	      if (!isPrototype(object)) {
    	        return nativeKeys(object);
    	      }
    	      var result = [];
    	      for (var key in Object(object)) {
    	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
    	          result.push(key);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     */
    	    function baseKeysIn(object) {
    	      if (!isObject(object)) {
    	        return nativeKeysIn(object);
    	      }
    	      var isProto = isPrototype(object),
    	          result = [];

    	      for (var key in object) {
    	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
    	          result.push(key);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.lt` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is less than `other`,
    	     *  else `false`.
    	     */
    	    function baseLt(value, other) {
    	      return value < other;
    	    }

    	    /**
    	     * The base implementation of `_.map` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} iteratee The function invoked per iteration.
    	     * @returns {Array} Returns the new mapped array.
    	     */
    	    function baseMap(collection, iteratee) {
    	      var index = -1,
    	          result = isArrayLike(collection) ? Array(collection.length) : [];

    	      baseEach(collection, function(value, key, collection) {
    	        result[++index] = iteratee(value, key, collection);
    	      });
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.matches` which doesn't clone `source`.
    	     *
    	     * @private
    	     * @param {Object} source The object of property values to match.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function baseMatches(source) {
    	      var matchData = getMatchData(source);
    	      if (matchData.length == 1 && matchData[0][2]) {
    	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    	      }
    	      return function(object) {
    	        return object === source || baseIsMatch(object, source, matchData);
    	      };
    	    }

    	    /**
    	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
    	     *
    	     * @private
    	     * @param {string} path The path of the property to get.
    	     * @param {*} srcValue The value to match.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function baseMatchesProperty(path, srcValue) {
    	      if (isKey(path) && isStrictComparable(srcValue)) {
    	        return matchesStrictComparable(toKey(path), srcValue);
    	      }
    	      return function(object) {
    	        var objValue = get(object, path);
    	        return (objValue === undefined$1 && objValue === srcValue)
    	          ? hasIn(object, path)
    	          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    	      };
    	    }

    	    /**
    	     * The base implementation of `_.merge` without support for multiple sources.
    	     *
    	     * @private
    	     * @param {Object} object The destination object.
    	     * @param {Object} source The source object.
    	     * @param {number} srcIndex The index of `source`.
    	     * @param {Function} [customizer] The function to customize merged values.
    	     * @param {Object} [stack] Tracks traversed source values and their merged
    	     *  counterparts.
    	     */
    	    function baseMerge(object, source, srcIndex, customizer, stack) {
    	      if (object === source) {
    	        return;
    	      }
    	      baseFor(source, function(srcValue, key) {
    	        stack || (stack = new Stack);
    	        if (isObject(srcValue)) {
    	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    	        }
    	        else {
    	          var newValue = customizer
    	            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
    	            : undefined$1;

    	          if (newValue === undefined$1) {
    	            newValue = srcValue;
    	          }
    	          assignMergeValue(object, key, newValue);
    	        }
    	      }, keysIn);
    	    }

    	    /**
    	     * A specialized version of `baseMerge` for arrays and objects which performs
    	     * deep merges and tracks traversed objects enabling objects with circular
    	     * references to be merged.
    	     *
    	     * @private
    	     * @param {Object} object The destination object.
    	     * @param {Object} source The source object.
    	     * @param {string} key The key of the value to merge.
    	     * @param {number} srcIndex The index of `source`.
    	     * @param {Function} mergeFunc The function to merge values.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @param {Object} [stack] Tracks traversed source values and their merged
    	     *  counterparts.
    	     */
    	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    	      var objValue = safeGet(object, key),
    	          srcValue = safeGet(source, key),
    	          stacked = stack.get(srcValue);

    	      if (stacked) {
    	        assignMergeValue(object, key, stacked);
    	        return;
    	      }
    	      var newValue = customizer
    	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    	        : undefined$1;

    	      var isCommon = newValue === undefined$1;

    	      if (isCommon) {
    	        var isArr = isArray(srcValue),
    	            isBuff = !isArr && isBuffer(srcValue),
    	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    	        newValue = srcValue;
    	        if (isArr || isBuff || isTyped) {
    	          if (isArray(objValue)) {
    	            newValue = objValue;
    	          }
    	          else if (isArrayLikeObject(objValue)) {
    	            newValue = copyArray(objValue);
    	          }
    	          else if (isBuff) {
    	            isCommon = false;
    	            newValue = cloneBuffer(srcValue, true);
    	          }
    	          else if (isTyped) {
    	            isCommon = false;
    	            newValue = cloneTypedArray(srcValue, true);
    	          }
    	          else {
    	            newValue = [];
    	          }
    	        }
    	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
    	          newValue = objValue;
    	          if (isArguments(objValue)) {
    	            newValue = toPlainObject(objValue);
    	          }
    	          else if (!isObject(objValue) || isFunction(objValue)) {
    	            newValue = initCloneObject(srcValue);
    	          }
    	        }
    	        else {
    	          isCommon = false;
    	        }
    	      }
    	      if (isCommon) {
    	        // Recursively merge objects and arrays (susceptible to call stack limits).
    	        stack.set(srcValue, newValue);
    	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    	        stack['delete'](srcValue);
    	      }
    	      assignMergeValue(object, key, newValue);
    	    }

    	    /**
    	     * The base implementation of `_.nth` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {Array} array The array to query.
    	     * @param {number} n The index of the element to return.
    	     * @returns {*} Returns the nth element of `array`.
    	     */
    	    function baseNth(array, n) {
    	      var length = array.length;
    	      if (!length) {
    	        return;
    	      }
    	      n += n < 0 ? length : 0;
    	      return isIndex(n, length) ? array[n] : undefined$1;
    	    }

    	    /**
    	     * The base implementation of `_.orderBy` without param guards.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
    	     * @param {string[]} orders The sort orders of `iteratees`.
    	     * @returns {Array} Returns the new sorted array.
    	     */
    	    function baseOrderBy(collection, iteratees, orders) {
    	      if (iteratees.length) {
    	        iteratees = arrayMap(iteratees, function(iteratee) {
    	          if (isArray(iteratee)) {
    	            return function(value) {
    	              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
    	            }
    	          }
    	          return iteratee;
    	        });
    	      } else {
    	        iteratees = [identity];
    	      }

    	      var index = -1;
    	      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

    	      var result = baseMap(collection, function(value, key, collection) {
    	        var criteria = arrayMap(iteratees, function(iteratee) {
    	          return iteratee(value);
    	        });
    	        return { 'criteria': criteria, 'index': ++index, 'value': value };
    	      });

    	      return baseSortBy(result, function(object, other) {
    	        return compareMultiple(object, other, orders);
    	      });
    	    }

    	    /**
    	     * The base implementation of `_.pick` without support for individual
    	     * property identifiers.
    	     *
    	     * @private
    	     * @param {Object} object The source object.
    	     * @param {string[]} paths The property paths to pick.
    	     * @returns {Object} Returns the new object.
    	     */
    	    function basePick(object, paths) {
    	      return basePickBy(object, paths, function(value, path) {
    	        return hasIn(object, path);
    	      });
    	    }

    	    /**
    	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Object} object The source object.
    	     * @param {string[]} paths The property paths to pick.
    	     * @param {Function} predicate The function invoked per property.
    	     * @returns {Object} Returns the new object.
    	     */
    	    function basePickBy(object, paths, predicate) {
    	      var index = -1,
    	          length = paths.length,
    	          result = {};

    	      while (++index < length) {
    	        var path = paths[index],
    	            value = baseGet(object, path);

    	        if (predicate(value, path)) {
    	          baseSet(result, castPath(path, object), value);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * A specialized version of `baseProperty` which supports deep paths.
    	     *
    	     * @private
    	     * @param {Array|string} path The path of the property to get.
    	     * @returns {Function} Returns the new accessor function.
    	     */
    	    function basePropertyDeep(path) {
    	      return function(object) {
    	        return baseGet(object, path);
    	      };
    	    }

    	    /**
    	     * The base implementation of `_.pullAllBy` without support for iteratee
    	     * shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function basePullAll(array, values, iteratee, comparator) {
    	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
    	          index = -1,
    	          length = values.length,
    	          seen = array;

    	      if (array === values) {
    	        values = copyArray(values);
    	      }
    	      if (iteratee) {
    	        seen = arrayMap(array, baseUnary(iteratee));
    	      }
    	      while (++index < length) {
    	        var fromIndex = 0,
    	            value = values[index],
    	            computed = iteratee ? iteratee(value) : value;

    	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
    	          if (seen !== array) {
    	            splice.call(seen, fromIndex, 1);
    	          }
    	          splice.call(array, fromIndex, 1);
    	        }
    	      }
    	      return array;
    	    }

    	    /**
    	     * The base implementation of `_.pullAt` without support for individual
    	     * indexes or capturing the removed elements.
    	     *
    	     * @private
    	     * @param {Array} array The array to modify.
    	     * @param {number[]} indexes The indexes of elements to remove.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function basePullAt(array, indexes) {
    	      var length = array ? indexes.length : 0,
    	          lastIndex = length - 1;

    	      while (length--) {
    	        var index = indexes[length];
    	        if (length == lastIndex || index !== previous) {
    	          var previous = index;
    	          if (isIndex(index)) {
    	            splice.call(array, index, 1);
    	          } else {
    	            baseUnset(array, index);
    	          }
    	        }
    	      }
    	      return array;
    	    }

    	    /**
    	     * The base implementation of `_.random` without support for returning
    	     * floating-point numbers.
    	     *
    	     * @private
    	     * @param {number} lower The lower bound.
    	     * @param {number} upper The upper bound.
    	     * @returns {number} Returns the random number.
    	     */
    	    function baseRandom(lower, upper) {
    	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    	    }

    	    /**
    	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
    	     * coerce arguments.
    	     *
    	     * @private
    	     * @param {number} start The start of the range.
    	     * @param {number} end The end of the range.
    	     * @param {number} step The value to increment or decrement by.
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Array} Returns the range of numbers.
    	     */
    	    function baseRange(start, end, step, fromRight) {
    	      var index = -1,
    	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
    	          result = Array(length);

    	      while (length--) {
    	        result[fromRight ? length : ++index] = start;
    	        start += step;
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.repeat` which doesn't coerce arguments.
    	     *
    	     * @private
    	     * @param {string} string The string to repeat.
    	     * @param {number} n The number of times to repeat the string.
    	     * @returns {string} Returns the repeated string.
    	     */
    	    function baseRepeat(string, n) {
    	      var result = '';
    	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
    	        return result;
    	      }
    	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
    	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
    	      do {
    	        if (n % 2) {
    	          result += string;
    	        }
    	        n = nativeFloor(n / 2);
    	        if (n) {
    	          string += string;
    	        }
    	      } while (n);

    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
    	     *
    	     * @private
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @param {number} [start=func.length-1] The start position of the rest parameter.
    	     * @returns {Function} Returns the new function.
    	     */
    	    function baseRest(func, start) {
    	      return setToString(overRest(func, start, identity), func + '');
    	    }

    	    /**
    	     * The base implementation of `_.sample`.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to sample.
    	     * @returns {*} Returns the random element.
    	     */
    	    function baseSample(collection) {
    	      return arraySample(values(collection));
    	    }

    	    /**
    	     * The base implementation of `_.sampleSize` without param guards.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to sample.
    	     * @param {number} n The number of elements to sample.
    	     * @returns {Array} Returns the random elements.
    	     */
    	    function baseSampleSize(collection, n) {
    	      var array = values(collection);
    	      return shuffleSelf(array, baseClamp(n, 0, array.length));
    	    }

    	    /**
    	     * The base implementation of `_.set`.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {*} value The value to set.
    	     * @param {Function} [customizer] The function to customize path creation.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseSet(object, path, value, customizer) {
    	      if (!isObject(object)) {
    	        return object;
    	      }
    	      path = castPath(path, object);

    	      var index = -1,
    	          length = path.length,
    	          lastIndex = length - 1,
    	          nested = object;

    	      while (nested != null && ++index < length) {
    	        var key = toKey(path[index]),
    	            newValue = value;

    	        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
    	          return object;
    	        }

    	        if (index != lastIndex) {
    	          var objValue = nested[key];
    	          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
    	          if (newValue === undefined$1) {
    	            newValue = isObject(objValue)
    	              ? objValue
    	              : (isIndex(path[index + 1]) ? [] : {});
    	          }
    	        }
    	        assignValue(nested, key, newValue);
    	        nested = nested[key];
    	      }
    	      return object;
    	    }

    	    /**
    	     * The base implementation of `setData` without support for hot loop shorting.
    	     *
    	     * @private
    	     * @param {Function} func The function to associate metadata with.
    	     * @param {*} data The metadata.
    	     * @returns {Function} Returns `func`.
    	     */
    	    var baseSetData = !metaMap ? identity : function(func, data) {
    	      metaMap.set(func, data);
    	      return func;
    	    };

    	    /**
    	     * The base implementation of `setToString` without support for hot loop shorting.
    	     *
    	     * @private
    	     * @param {Function} func The function to modify.
    	     * @param {Function} string The `toString` result.
    	     * @returns {Function} Returns `func`.
    	     */
    	    var baseSetToString = !defineProperty ? identity : function(func, string) {
    	      return defineProperty(func, 'toString', {
    	        'configurable': true,
    	        'enumerable': false,
    	        'value': constant(string),
    	        'writable': true
    	      });
    	    };

    	    /**
    	     * The base implementation of `_.shuffle`.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to shuffle.
    	     * @returns {Array} Returns the new shuffled array.
    	     */
    	    function baseShuffle(collection) {
    	      return shuffleSelf(values(collection));
    	    }

    	    /**
    	     * The base implementation of `_.slice` without an iteratee call guard.
    	     *
    	     * @private
    	     * @param {Array} array The array to slice.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns the slice of `array`.
    	     */
    	    function baseSlice(array, start, end) {
    	      var index = -1,
    	          length = array.length;

    	      if (start < 0) {
    	        start = -start > length ? 0 : (length + start);
    	      }
    	      end = end > length ? length : end;
    	      if (end < 0) {
    	        end += length;
    	      }
    	      length = start > end ? 0 : ((end - start) >>> 0);
    	      start >>>= 0;

    	      var result = Array(length);
    	      while (++index < length) {
    	        result[index] = array[index + start];
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.some` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @returns {boolean} Returns `true` if any element passes the predicate check,
    	     *  else `false`.
    	     */
    	    function baseSome(collection, predicate) {
    	      var result;

    	      baseEach(collection, function(value, index, collection) {
    	        result = predicate(value, index, collection);
    	        return !result;
    	      });
    	      return !!result;
    	    }

    	    /**
    	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
    	     * performs a binary search of `array` to determine the index at which `value`
    	     * should be inserted into `array` in order to maintain its sort order.
    	     *
    	     * @private
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     */
    	    function baseSortedIndex(array, value, retHighest) {
    	      var low = 0,
    	          high = array == null ? low : array.length;

    	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
    	        while (low < high) {
    	          var mid = (low + high) >>> 1,
    	              computed = array[mid];

    	          if (computed !== null && !isSymbol(computed) &&
    	              (retHighest ? (computed <= value) : (computed < value))) {
    	            low = mid + 1;
    	          } else {
    	            high = mid;
    	          }
    	        }
    	        return high;
    	      }
    	      return baseSortedIndexBy(array, value, identity, retHighest);
    	    }

    	    /**
    	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
    	     * which invokes `iteratee` for `value` and each element of `array` to compute
    	     * their sort ranking. The iteratee is invoked with one argument; (value).
    	     *
    	     * @private
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {Function} iteratee The iteratee invoked per element.
    	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     */
    	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
    	      var low = 0,
    	          high = array == null ? 0 : array.length;
    	      if (high === 0) {
    	        return 0;
    	      }

    	      value = iteratee(value);
    	      var valIsNaN = value !== value,
    	          valIsNull = value === null,
    	          valIsSymbol = isSymbol(value),
    	          valIsUndefined = value === undefined$1;

    	      while (low < high) {
    	        var mid = nativeFloor((low + high) / 2),
    	            computed = iteratee(array[mid]),
    	            othIsDefined = computed !== undefined$1,
    	            othIsNull = computed === null,
    	            othIsReflexive = computed === computed,
    	            othIsSymbol = isSymbol(computed);

    	        if (valIsNaN) {
    	          var setLow = retHighest || othIsReflexive;
    	        } else if (valIsUndefined) {
    	          setLow = othIsReflexive && (retHighest || othIsDefined);
    	        } else if (valIsNull) {
    	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
    	        } else if (valIsSymbol) {
    	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
    	        } else if (othIsNull || othIsSymbol) {
    	          setLow = false;
    	        } else {
    	          setLow = retHighest ? (computed <= value) : (computed < value);
    	        }
    	        if (setLow) {
    	          low = mid + 1;
    	        } else {
    	          high = mid;
    	        }
    	      }
    	      return nativeMin(high, MAX_ARRAY_INDEX);
    	    }

    	    /**
    	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
    	     * support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     */
    	    function baseSortedUniq(array, iteratee) {
    	      var index = -1,
    	          length = array.length,
    	          resIndex = 0,
    	          result = [];

    	      while (++index < length) {
    	        var value = array[index],
    	            computed = iteratee ? iteratee(value) : value;

    	        if (!index || !eq(computed, seen)) {
    	          var seen = computed;
    	          result[resIndex++] = value === 0 ? 0 : value;
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.toNumber` which doesn't ensure correct
    	     * conversions of binary, hexadecimal, or octal string values.
    	     *
    	     * @private
    	     * @param {*} value The value to process.
    	     * @returns {number} Returns the number.
    	     */
    	    function baseToNumber(value) {
    	      if (typeof value == 'number') {
    	        return value;
    	      }
    	      if (isSymbol(value)) {
    	        return NAN;
    	      }
    	      return +value;
    	    }

    	    /**
    	     * The base implementation of `_.toString` which doesn't convert nullish
    	     * values to empty strings.
    	     *
    	     * @private
    	     * @param {*} value The value to process.
    	     * @returns {string} Returns the string.
    	     */
    	    function baseToString(value) {
    	      // Exit early for strings to avoid a performance hit in some environments.
    	      if (typeof value == 'string') {
    	        return value;
    	      }
    	      if (isArray(value)) {
    	        // Recursively convert values (susceptible to call stack limits).
    	        return arrayMap(value, baseToString) + '';
    	      }
    	      if (isSymbol(value)) {
    	        return symbolToString ? symbolToString.call(value) : '';
    	      }
    	      var result = (value + '');
    	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    	    }

    	    /**
    	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     */
    	    function baseUniq(array, iteratee, comparator) {
    	      var index = -1,
    	          includes = arrayIncludes,
    	          length = array.length,
    	          isCommon = true,
    	          result = [],
    	          seen = result;

    	      if (comparator) {
    	        isCommon = false;
    	        includes = arrayIncludesWith;
    	      }
    	      else if (length >= LARGE_ARRAY_SIZE) {
    	        var set = iteratee ? null : createSet(array);
    	        if (set) {
    	          return setToArray(set);
    	        }
    	        isCommon = false;
    	        includes = cacheHas;
    	        seen = new SetCache;
    	      }
    	      else {
    	        seen = iteratee ? [] : result;
    	      }
    	      outer:
    	      while (++index < length) {
    	        var value = array[index],
    	            computed = iteratee ? iteratee(value) : value;

    	        value = (comparator || value !== 0) ? value : 0;
    	        if (isCommon && computed === computed) {
    	          var seenIndex = seen.length;
    	          while (seenIndex--) {
    	            if (seen[seenIndex] === computed) {
    	              continue outer;
    	            }
    	          }
    	          if (iteratee) {
    	            seen.push(computed);
    	          }
    	          result.push(value);
    	        }
    	        else if (!includes(seen, computed, comparator)) {
    	          if (seen !== result) {
    	            seen.push(computed);
    	          }
    	          result.push(value);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * The base implementation of `_.unset`.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The property path to unset.
    	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
    	     */
    	    function baseUnset(object, path) {
    	      path = castPath(path, object);
    	      object = parent(object, path);
    	      return object == null || delete object[toKey(last(path))];
    	    }

    	    /**
    	     * The base implementation of `_.update`.
    	     *
    	     * @private
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to update.
    	     * @param {Function} updater The function to produce the updated value.
    	     * @param {Function} [customizer] The function to customize path creation.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function baseUpdate(object, path, updater, customizer) {
    	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    	    }

    	    /**
    	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
    	     * without support for iteratee shorthands.
    	     *
    	     * @private
    	     * @param {Array} array The array to query.
    	     * @param {Function} predicate The function invoked per iteration.
    	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Array} Returns the slice of `array`.
    	     */
    	    function baseWhile(array, predicate, isDrop, fromRight) {
    	      var length = array.length,
    	          index = fromRight ? length : -1;

    	      while ((fromRight ? index-- : ++index < length) &&
    	        predicate(array[index], index, array)) {}

    	      return isDrop
    	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
    	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    	    }

    	    /**
    	     * The base implementation of `wrapperValue` which returns the result of
    	     * performing a sequence of actions on the unwrapped `value`, where each
    	     * successive action is supplied the return value of the previous.
    	     *
    	     * @private
    	     * @param {*} value The unwrapped value.
    	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
    	     * @returns {*} Returns the resolved value.
    	     */
    	    function baseWrapperValue(value, actions) {
    	      var result = value;
    	      if (result instanceof LazyWrapper) {
    	        result = result.value();
    	      }
    	      return arrayReduce(actions, function(result, action) {
    	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
    	      }, result);
    	    }

    	    /**
    	     * The base implementation of methods like `_.xor`, without support for
    	     * iteratee shorthands, that accepts an array of arrays to inspect.
    	     *
    	     * @private
    	     * @param {Array} arrays The arrays to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of values.
    	     */
    	    function baseXor(arrays, iteratee, comparator) {
    	      var length = arrays.length;
    	      if (length < 2) {
    	        return length ? baseUniq(arrays[0]) : [];
    	      }
    	      var index = -1,
    	          result = Array(length);

    	      while (++index < length) {
    	        var array = arrays[index],
    	            othIndex = -1;

    	        while (++othIndex < length) {
    	          if (othIndex != index) {
    	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
    	          }
    	        }
    	      }
    	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    	    }

    	    /**
    	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
    	     *
    	     * @private
    	     * @param {Array} props The property identifiers.
    	     * @param {Array} values The property values.
    	     * @param {Function} assignFunc The function to assign values.
    	     * @returns {Object} Returns the new object.
    	     */
    	    function baseZipObject(props, values, assignFunc) {
    	      var index = -1,
    	          length = props.length,
    	          valsLength = values.length,
    	          result = {};

    	      while (++index < length) {
    	        var value = index < valsLength ? values[index] : undefined$1;
    	        assignFunc(result, props[index], value);
    	      }
    	      return result;
    	    }

    	    /**
    	     * Casts `value` to an empty array if it's not an array like object.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @returns {Array|Object} Returns the cast array-like object.
    	     */
    	    function castArrayLikeObject(value) {
    	      return isArrayLikeObject(value) ? value : [];
    	    }

    	    /**
    	     * Casts `value` to `identity` if it's not a function.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @returns {Function} Returns cast function.
    	     */
    	    function castFunction(value) {
    	      return typeof value == 'function' ? value : identity;
    	    }

    	    /**
    	     * Casts `value` to a path array if it's not one.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @param {Object} [object] The object to query keys on.
    	     * @returns {Array} Returns the cast property path array.
    	     */
    	    function castPath(value, object) {
    	      if (isArray(value)) {
    	        return value;
    	      }
    	      return isKey(value, object) ? [value] : stringToPath(toString(value));
    	    }

    	    /**
    	     * A `baseRest` alias which can be replaced with `identity` by module
    	     * replacement plugins.
    	     *
    	     * @private
    	     * @type {Function}
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @returns {Function} Returns the new function.
    	     */
    	    var castRest = baseRest;

    	    /**
    	     * Casts `array` to a slice if it's needed.
    	     *
    	     * @private
    	     * @param {Array} array The array to inspect.
    	     * @param {number} start The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns the cast slice.
    	     */
    	    function castSlice(array, start, end) {
    	      var length = array.length;
    	      end = end === undefined$1 ? length : end;
    	      return (!start && end >= length) ? array : baseSlice(array, start, end);
    	    }

    	    /**
    	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
    	     *
    	     * @private
    	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
    	     */
    	    var clearTimeout = ctxClearTimeout || function(id) {
    	      return root.clearTimeout(id);
    	    };

    	    /**
    	     * Creates a clone of  `buffer`.
    	     *
    	     * @private
    	     * @param {Buffer} buffer The buffer to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Buffer} Returns the cloned buffer.
    	     */
    	    function cloneBuffer(buffer, isDeep) {
    	      if (isDeep) {
    	        return buffer.slice();
    	      }
    	      var length = buffer.length,
    	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

    	      buffer.copy(result);
    	      return result;
    	    }

    	    /**
    	     * Creates a clone of `arrayBuffer`.
    	     *
    	     * @private
    	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
    	     * @returns {ArrayBuffer} Returns the cloned array buffer.
    	     */
    	    function cloneArrayBuffer(arrayBuffer) {
    	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    	      return result;
    	    }

    	    /**
    	     * Creates a clone of `dataView`.
    	     *
    	     * @private
    	     * @param {Object} dataView The data view to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Object} Returns the cloned data view.
    	     */
    	    function cloneDataView(dataView, isDeep) {
    	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    	    }

    	    /**
    	     * Creates a clone of `regexp`.
    	     *
    	     * @private
    	     * @param {Object} regexp The regexp to clone.
    	     * @returns {Object} Returns the cloned regexp.
    	     */
    	    function cloneRegExp(regexp) {
    	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    	      result.lastIndex = regexp.lastIndex;
    	      return result;
    	    }

    	    /**
    	     * Creates a clone of the `symbol` object.
    	     *
    	     * @private
    	     * @param {Object} symbol The symbol object to clone.
    	     * @returns {Object} Returns the cloned symbol object.
    	     */
    	    function cloneSymbol(symbol) {
    	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    	    }

    	    /**
    	     * Creates a clone of `typedArray`.
    	     *
    	     * @private
    	     * @param {Object} typedArray The typed array to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Object} Returns the cloned typed array.
    	     */
    	    function cloneTypedArray(typedArray, isDeep) {
    	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    	    }

    	    /**
    	     * Compares values to sort them in ascending order.
    	     *
    	     * @private
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {number} Returns the sort order indicator for `value`.
    	     */
    	    function compareAscending(value, other) {
    	      if (value !== other) {
    	        var valIsDefined = value !== undefined$1,
    	            valIsNull = value === null,
    	            valIsReflexive = value === value,
    	            valIsSymbol = isSymbol(value);

    	        var othIsDefined = other !== undefined$1,
    	            othIsNull = other === null,
    	            othIsReflexive = other === other,
    	            othIsSymbol = isSymbol(other);

    	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
    	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
    	            (valIsNull && othIsDefined && othIsReflexive) ||
    	            (!valIsDefined && othIsReflexive) ||
    	            !valIsReflexive) {
    	          return 1;
    	        }
    	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
    	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
    	            (othIsNull && valIsDefined && valIsReflexive) ||
    	            (!othIsDefined && valIsReflexive) ||
    	            !othIsReflexive) {
    	          return -1;
    	        }
    	      }
    	      return 0;
    	    }

    	    /**
    	     * Used by `_.orderBy` to compare multiple properties of a value to another
    	     * and stable sort them.
    	     *
    	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
    	     * specify an order of "desc" for descending or "asc" for ascending sort order
    	     * of corresponding values.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {boolean[]|string[]} orders The order to sort by for each property.
    	     * @returns {number} Returns the sort order indicator for `object`.
    	     */
    	    function compareMultiple(object, other, orders) {
    	      var index = -1,
    	          objCriteria = object.criteria,
    	          othCriteria = other.criteria,
    	          length = objCriteria.length,
    	          ordersLength = orders.length;

    	      while (++index < length) {
    	        var result = compareAscending(objCriteria[index], othCriteria[index]);
    	        if (result) {
    	          if (index >= ordersLength) {
    	            return result;
    	          }
    	          var order = orders[index];
    	          return result * (order == 'desc' ? -1 : 1);
    	        }
    	      }
    	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    	      // that causes it, under certain circumstances, to provide the same value for
    	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    	      // for more details.
    	      //
    	      // This also ensures a stable sort in V8 and other engines.
    	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
    	      return object.index - other.index;
    	    }

    	    /**
    	     * Creates an array that is the composition of partially applied arguments,
    	     * placeholders, and provided arguments into a single array of arguments.
    	     *
    	     * @private
    	     * @param {Array} args The provided arguments.
    	     * @param {Array} partials The arguments to prepend to those provided.
    	     * @param {Array} holders The `partials` placeholder indexes.
    	     * @params {boolean} [isCurried] Specify composing for a curried function.
    	     * @returns {Array} Returns the new array of composed arguments.
    	     */
    	    function composeArgs(args, partials, holders, isCurried) {
    	      var argsIndex = -1,
    	          argsLength = args.length,
    	          holdersLength = holders.length,
    	          leftIndex = -1,
    	          leftLength = partials.length,
    	          rangeLength = nativeMax(argsLength - holdersLength, 0),
    	          result = Array(leftLength + rangeLength),
    	          isUncurried = !isCurried;

    	      while (++leftIndex < leftLength) {
    	        result[leftIndex] = partials[leftIndex];
    	      }
    	      while (++argsIndex < holdersLength) {
    	        if (isUncurried || argsIndex < argsLength) {
    	          result[holders[argsIndex]] = args[argsIndex];
    	        }
    	      }
    	      while (rangeLength--) {
    	        result[leftIndex++] = args[argsIndex++];
    	      }
    	      return result;
    	    }

    	    /**
    	     * This function is like `composeArgs` except that the arguments composition
    	     * is tailored for `_.partialRight`.
    	     *
    	     * @private
    	     * @param {Array} args The provided arguments.
    	     * @param {Array} partials The arguments to append to those provided.
    	     * @param {Array} holders The `partials` placeholder indexes.
    	     * @params {boolean} [isCurried] Specify composing for a curried function.
    	     * @returns {Array} Returns the new array of composed arguments.
    	     */
    	    function composeArgsRight(args, partials, holders, isCurried) {
    	      var argsIndex = -1,
    	          argsLength = args.length,
    	          holdersIndex = -1,
    	          holdersLength = holders.length,
    	          rightIndex = -1,
    	          rightLength = partials.length,
    	          rangeLength = nativeMax(argsLength - holdersLength, 0),
    	          result = Array(rangeLength + rightLength),
    	          isUncurried = !isCurried;

    	      while (++argsIndex < rangeLength) {
    	        result[argsIndex] = args[argsIndex];
    	      }
    	      var offset = argsIndex;
    	      while (++rightIndex < rightLength) {
    	        result[offset + rightIndex] = partials[rightIndex];
    	      }
    	      while (++holdersIndex < holdersLength) {
    	        if (isUncurried || argsIndex < argsLength) {
    	          result[offset + holders[holdersIndex]] = args[argsIndex++];
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * Copies the values of `source` to `array`.
    	     *
    	     * @private
    	     * @param {Array} source The array to copy values from.
    	     * @param {Array} [array=[]] The array to copy values to.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function copyArray(source, array) {
    	      var index = -1,
    	          length = source.length;

    	      array || (array = Array(length));
    	      while (++index < length) {
    	        array[index] = source[index];
    	      }
    	      return array;
    	    }

    	    /**
    	     * Copies properties of `source` to `object`.
    	     *
    	     * @private
    	     * @param {Object} source The object to copy properties from.
    	     * @param {Array} props The property identifiers to copy.
    	     * @param {Object} [object={}] The object to copy properties to.
    	     * @param {Function} [customizer] The function to customize copied values.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function copyObject(source, props, object, customizer) {
    	      var isNew = !object;
    	      object || (object = {});

    	      var index = -1,
    	          length = props.length;

    	      while (++index < length) {
    	        var key = props[index];

    	        var newValue = customizer
    	          ? customizer(object[key], source[key], key, object, source)
    	          : undefined$1;

    	        if (newValue === undefined$1) {
    	          newValue = source[key];
    	        }
    	        if (isNew) {
    	          baseAssignValue(object, key, newValue);
    	        } else {
    	          assignValue(object, key, newValue);
    	        }
    	      }
    	      return object;
    	    }

    	    /**
    	     * Copies own symbols of `source` to `object`.
    	     *
    	     * @private
    	     * @param {Object} source The object to copy symbols from.
    	     * @param {Object} [object={}] The object to copy symbols to.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function copySymbols(source, object) {
    	      return copyObject(source, getSymbols(source), object);
    	    }

    	    /**
    	     * Copies own and inherited symbols of `source` to `object`.
    	     *
    	     * @private
    	     * @param {Object} source The object to copy symbols from.
    	     * @param {Object} [object={}] The object to copy symbols to.
    	     * @returns {Object} Returns `object`.
    	     */
    	    function copySymbolsIn(source, object) {
    	      return copyObject(source, getSymbolsIn(source), object);
    	    }

    	    /**
    	     * Creates a function like `_.groupBy`.
    	     *
    	     * @private
    	     * @param {Function} setter The function to set accumulator values.
    	     * @param {Function} [initializer] The accumulator object initializer.
    	     * @returns {Function} Returns the new aggregator function.
    	     */
    	    function createAggregator(setter, initializer) {
    	      return function(collection, iteratee) {
    	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
    	            accumulator = initializer ? initializer() : {};

    	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
    	      };
    	    }

    	    /**
    	     * Creates a function like `_.assign`.
    	     *
    	     * @private
    	     * @param {Function} assigner The function to assign values.
    	     * @returns {Function} Returns the new assigner function.
    	     */
    	    function createAssigner(assigner) {
    	      return baseRest(function(object, sources) {
    	        var index = -1,
    	            length = sources.length,
    	            customizer = length > 1 ? sources[length - 1] : undefined$1,
    	            guard = length > 2 ? sources[2] : undefined$1;

    	        customizer = (assigner.length > 3 && typeof customizer == 'function')
    	          ? (length--, customizer)
    	          : undefined$1;

    	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    	          customizer = length < 3 ? undefined$1 : customizer;
    	          length = 1;
    	        }
    	        object = Object(object);
    	        while (++index < length) {
    	          var source = sources[index];
    	          if (source) {
    	            assigner(object, source, index, customizer);
    	          }
    	        }
    	        return object;
    	      });
    	    }

    	    /**
    	     * Creates a `baseEach` or `baseEachRight` function.
    	     *
    	     * @private
    	     * @param {Function} eachFunc The function to iterate over a collection.
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new base function.
    	     */
    	    function createBaseEach(eachFunc, fromRight) {
    	      return function(collection, iteratee) {
    	        if (collection == null) {
    	          return collection;
    	        }
    	        if (!isArrayLike(collection)) {
    	          return eachFunc(collection, iteratee);
    	        }
    	        var length = collection.length,
    	            index = fromRight ? length : -1,
    	            iterable = Object(collection);

    	        while ((fromRight ? index-- : ++index < length)) {
    	          if (iteratee(iterable[index], index, iterable) === false) {
    	            break;
    	          }
    	        }
    	        return collection;
    	      };
    	    }

    	    /**
    	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
    	     *
    	     * @private
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new base function.
    	     */
    	    function createBaseFor(fromRight) {
    	      return function(object, iteratee, keysFunc) {
    	        var index = -1,
    	            iterable = Object(object),
    	            props = keysFunc(object),
    	            length = props.length;

    	        while (length--) {
    	          var key = props[fromRight ? length : ++index];
    	          if (iteratee(iterable[key], key, iterable) === false) {
    	            break;
    	          }
    	        }
    	        return object;
    	      };
    	    }

    	    /**
    	     * Creates a function that wraps `func` to invoke it with the optional `this`
    	     * binding of `thisArg`.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createBind(func, bitmask, thisArg) {
    	      var isBind = bitmask & WRAP_BIND_FLAG,
    	          Ctor = createCtor(func);

    	      function wrapper() {
    	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    	        return fn.apply(isBind ? thisArg : this, arguments);
    	      }
    	      return wrapper;
    	    }

    	    /**
    	     * Creates a function like `_.lowerFirst`.
    	     *
    	     * @private
    	     * @param {string} methodName The name of the `String` case method to use.
    	     * @returns {Function} Returns the new case function.
    	     */
    	    function createCaseFirst(methodName) {
    	      return function(string) {
    	        string = toString(string);

    	        var strSymbols = hasUnicode(string)
    	          ? stringToArray(string)
    	          : undefined$1;

    	        var chr = strSymbols
    	          ? strSymbols[0]
    	          : string.charAt(0);

    	        var trailing = strSymbols
    	          ? castSlice(strSymbols, 1).join('')
    	          : string.slice(1);

    	        return chr[methodName]() + trailing;
    	      };
    	    }

    	    /**
    	     * Creates a function like `_.camelCase`.
    	     *
    	     * @private
    	     * @param {Function} callback The function to combine each word.
    	     * @returns {Function} Returns the new compounder function.
    	     */
    	    function createCompounder(callback) {
    	      return function(string) {
    	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
    	      };
    	    }

    	    /**
    	     * Creates a function that produces an instance of `Ctor` regardless of
    	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
    	     *
    	     * @private
    	     * @param {Function} Ctor The constructor to wrap.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createCtor(Ctor) {
    	      return function() {
    	        // Use a `switch` statement to work with class constructors. See
    	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
    	        // for more details.
    	        var args = arguments;
    	        switch (args.length) {
    	          case 0: return new Ctor;
    	          case 1: return new Ctor(args[0]);
    	          case 2: return new Ctor(args[0], args[1]);
    	          case 3: return new Ctor(args[0], args[1], args[2]);
    	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
    	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
    	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
    	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    	        }
    	        var thisBinding = baseCreate(Ctor.prototype),
    	            result = Ctor.apply(thisBinding, args);

    	        // Mimic the constructor's `return` behavior.
    	        // See https://es5.github.io/#x13.2.2 for more details.
    	        return isObject(result) ? result : thisBinding;
    	      };
    	    }

    	    /**
    	     * Creates a function that wraps `func` to enable currying.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @param {number} arity The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createCurry(func, bitmask, arity) {
    	      var Ctor = createCtor(func);

    	      function wrapper() {
    	        var length = arguments.length,
    	            args = Array(length),
    	            index = length,
    	            placeholder = getHolder(wrapper);

    	        while (index--) {
    	          args[index] = arguments[index];
    	        }
    	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
    	          ? []
    	          : replaceHolders(args, placeholder);

    	        length -= holders.length;
    	        if (length < arity) {
    	          return createRecurry(
    	            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
    	            args, holders, undefined$1, undefined$1, arity - length);
    	        }
    	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    	        return apply(fn, this, args);
    	      }
    	      return wrapper;
    	    }

    	    /**
    	     * Creates a `_.find` or `_.findLast` function.
    	     *
    	     * @private
    	     * @param {Function} findIndexFunc The function to find the collection index.
    	     * @returns {Function} Returns the new find function.
    	     */
    	    function createFind(findIndexFunc) {
    	      return function(collection, predicate, fromIndex) {
    	        var iterable = Object(collection);
    	        if (!isArrayLike(collection)) {
    	          var iteratee = getIteratee(predicate, 3);
    	          collection = keys(collection);
    	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
    	        }
    	        var index = findIndexFunc(collection, predicate, fromIndex);
    	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
    	      };
    	    }

    	    /**
    	     * Creates a `_.flow` or `_.flowRight` function.
    	     *
    	     * @private
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new flow function.
    	     */
    	    function createFlow(fromRight) {
    	      return flatRest(function(funcs) {
    	        var length = funcs.length,
    	            index = length,
    	            prereq = LodashWrapper.prototype.thru;

    	        if (fromRight) {
    	          funcs.reverse();
    	        }
    	        while (index--) {
    	          var func = funcs[index];
    	          if (typeof func != 'function') {
    	            throw new TypeError(FUNC_ERROR_TEXT);
    	          }
    	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
    	            var wrapper = new LodashWrapper([], true);
    	          }
    	        }
    	        index = wrapper ? index : length;
    	        while (++index < length) {
    	          func = funcs[index];

    	          var funcName = getFuncName(func),
    	              data = funcName == 'wrapper' ? getData(func) : undefined$1;

    	          if (data && isLaziable(data[0]) &&
    	                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
    	                !data[4].length && data[9] == 1
    	              ) {
    	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
    	          } else {
    	            wrapper = (func.length == 1 && isLaziable(func))
    	              ? wrapper[funcName]()
    	              : wrapper.thru(func);
    	          }
    	        }
    	        return function() {
    	          var args = arguments,
    	              value = args[0];

    	          if (wrapper && args.length == 1 && isArray(value)) {
    	            return wrapper.plant(value).value();
    	          }
    	          var index = 0,
    	              result = length ? funcs[index].apply(this, args) : value;

    	          while (++index < length) {
    	            result = funcs[index].call(this, result);
    	          }
    	          return result;
    	        };
    	      });
    	    }

    	    /**
    	     * Creates a function that wraps `func` to invoke it with optional `this`
    	     * binding of `thisArg`, partial application, and currying.
    	     *
    	     * @private
    	     * @param {Function|string} func The function or method name to wrap.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @param {Array} [partials] The arguments to prepend to those provided to
    	     *  the new function.
    	     * @param {Array} [holders] The `partials` placeholder indexes.
    	     * @param {Array} [partialsRight] The arguments to append to those provided
    	     *  to the new function.
    	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
    	     * @param {Array} [argPos] The argument positions of the new function.
    	     * @param {number} [ary] The arity cap of `func`.
    	     * @param {number} [arity] The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
    	      var isAry = bitmask & WRAP_ARY_FLAG,
    	          isBind = bitmask & WRAP_BIND_FLAG,
    	          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
    	          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
    	          isFlip = bitmask & WRAP_FLIP_FLAG,
    	          Ctor = isBindKey ? undefined$1 : createCtor(func);

    	      function wrapper() {
    	        var length = arguments.length,
    	            args = Array(length),
    	            index = length;

    	        while (index--) {
    	          args[index] = arguments[index];
    	        }
    	        if (isCurried) {
    	          var placeholder = getHolder(wrapper),
    	              holdersCount = countHolders(args, placeholder);
    	        }
    	        if (partials) {
    	          args = composeArgs(args, partials, holders, isCurried);
    	        }
    	        if (partialsRight) {
    	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
    	        }
    	        length -= holdersCount;
    	        if (isCurried && length < arity) {
    	          var newHolders = replaceHolders(args, placeholder);
    	          return createRecurry(
    	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
    	            args, newHolders, argPos, ary, arity - length
    	          );
    	        }
    	        var thisBinding = isBind ? thisArg : this,
    	            fn = isBindKey ? thisBinding[func] : func;

    	        length = args.length;
    	        if (argPos) {
    	          args = reorder(args, argPos);
    	        } else if (isFlip && length > 1) {
    	          args.reverse();
    	        }
    	        if (isAry && ary < length) {
    	          args.length = ary;
    	        }
    	        if (this && this !== root && this instanceof wrapper) {
    	          fn = Ctor || createCtor(fn);
    	        }
    	        return fn.apply(thisBinding, args);
    	      }
    	      return wrapper;
    	    }

    	    /**
    	     * Creates a function like `_.invertBy`.
    	     *
    	     * @private
    	     * @param {Function} setter The function to set accumulator values.
    	     * @param {Function} toIteratee The function to resolve iteratees.
    	     * @returns {Function} Returns the new inverter function.
    	     */
    	    function createInverter(setter, toIteratee) {
    	      return function(object, iteratee) {
    	        return baseInverter(object, setter, toIteratee(iteratee), {});
    	      };
    	    }

    	    /**
    	     * Creates a function that performs a mathematical operation on two values.
    	     *
    	     * @private
    	     * @param {Function} operator The function to perform the operation.
    	     * @param {number} [defaultValue] The value used for `undefined` arguments.
    	     * @returns {Function} Returns the new mathematical operation function.
    	     */
    	    function createMathOperation(operator, defaultValue) {
    	      return function(value, other) {
    	        var result;
    	        if (value === undefined$1 && other === undefined$1) {
    	          return defaultValue;
    	        }
    	        if (value !== undefined$1) {
    	          result = value;
    	        }
    	        if (other !== undefined$1) {
    	          if (result === undefined$1) {
    	            return other;
    	          }
    	          if (typeof value == 'string' || typeof other == 'string') {
    	            value = baseToString(value);
    	            other = baseToString(other);
    	          } else {
    	            value = baseToNumber(value);
    	            other = baseToNumber(other);
    	          }
    	          result = operator(value, other);
    	        }
    	        return result;
    	      };
    	    }

    	    /**
    	     * Creates a function like `_.over`.
    	     *
    	     * @private
    	     * @param {Function} arrayFunc The function to iterate over iteratees.
    	     * @returns {Function} Returns the new over function.
    	     */
    	    function createOver(arrayFunc) {
    	      return flatRest(function(iteratees) {
    	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
    	        return baseRest(function(args) {
    	          var thisArg = this;
    	          return arrayFunc(iteratees, function(iteratee) {
    	            return apply(iteratee, thisArg, args);
    	          });
    	        });
    	      });
    	    }

    	    /**
    	     * Creates the padding for `string` based on `length`. The `chars` string
    	     * is truncated if the number of characters exceeds `length`.
    	     *
    	     * @private
    	     * @param {number} length The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padding for `string`.
    	     */
    	    function createPadding(length, chars) {
    	      chars = chars === undefined$1 ? ' ' : baseToString(chars);

    	      var charsLength = chars.length;
    	      if (charsLength < 2) {
    	        return charsLength ? baseRepeat(chars, length) : chars;
    	      }
    	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
    	      return hasUnicode(chars)
    	        ? castSlice(stringToArray(result), 0, length).join('')
    	        : result.slice(0, length);
    	    }

    	    /**
    	     * Creates a function that wraps `func` to invoke it with the `this` binding
    	     * of `thisArg` and `partials` prepended to the arguments it receives.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @param {*} thisArg The `this` binding of `func`.
    	     * @param {Array} partials The arguments to prepend to those provided to
    	     *  the new function.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createPartial(func, bitmask, thisArg, partials) {
    	      var isBind = bitmask & WRAP_BIND_FLAG,
    	          Ctor = createCtor(func);

    	      function wrapper() {
    	        var argsIndex = -1,
    	            argsLength = arguments.length,
    	            leftIndex = -1,
    	            leftLength = partials.length,
    	            args = Array(leftLength + argsLength),
    	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

    	        while (++leftIndex < leftLength) {
    	          args[leftIndex] = partials[leftIndex];
    	        }
    	        while (argsLength--) {
    	          args[leftIndex++] = arguments[++argsIndex];
    	        }
    	        return apply(fn, isBind ? thisArg : this, args);
    	      }
    	      return wrapper;
    	    }

    	    /**
    	     * Creates a `_.range` or `_.rangeRight` function.
    	     *
    	     * @private
    	     * @param {boolean} [fromRight] Specify iterating from right to left.
    	     * @returns {Function} Returns the new range function.
    	     */
    	    function createRange(fromRight) {
    	      return function(start, end, step) {
    	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
    	          end = step = undefined$1;
    	        }
    	        // Ensure the sign of `-0` is preserved.
    	        start = toFinite(start);
    	        if (end === undefined$1) {
    	          end = start;
    	          start = 0;
    	        } else {
    	          end = toFinite(end);
    	        }
    	        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
    	        return baseRange(start, end, step, fromRight);
    	      };
    	    }

    	    /**
    	     * Creates a function that performs a relational operation on two values.
    	     *
    	     * @private
    	     * @param {Function} operator The function to perform the operation.
    	     * @returns {Function} Returns the new relational operation function.
    	     */
    	    function createRelationalOperation(operator) {
    	      return function(value, other) {
    	        if (!(typeof value == 'string' && typeof other == 'string')) {
    	          value = toNumber(value);
    	          other = toNumber(other);
    	        }
    	        return operator(value, other);
    	      };
    	    }

    	    /**
    	     * Creates a function that wraps `func` to continue currying.
    	     *
    	     * @private
    	     * @param {Function} func The function to wrap.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @param {Function} wrapFunc The function to create the `func` wrapper.
    	     * @param {*} placeholder The placeholder value.
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @param {Array} [partials] The arguments to prepend to those provided to
    	     *  the new function.
    	     * @param {Array} [holders] The `partials` placeholder indexes.
    	     * @param {Array} [argPos] The argument positions of the new function.
    	     * @param {number} [ary] The arity cap of `func`.
    	     * @param {number} [arity] The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
    	      var isCurry = bitmask & WRAP_CURRY_FLAG,
    	          newHolders = isCurry ? holders : undefined$1,
    	          newHoldersRight = isCurry ? undefined$1 : holders,
    	          newPartials = isCurry ? partials : undefined$1,
    	          newPartialsRight = isCurry ? undefined$1 : partials;

    	      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
    	      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

    	      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
    	        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
    	      }
    	      var newData = [
    	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
    	        newHoldersRight, argPos, ary, arity
    	      ];

    	      var result = wrapFunc.apply(undefined$1, newData);
    	      if (isLaziable(func)) {
    	        setData(result, newData);
    	      }
    	      result.placeholder = placeholder;
    	      return setWrapToString(result, func, bitmask);
    	    }

    	    /**
    	     * Creates a function like `_.round`.
    	     *
    	     * @private
    	     * @param {string} methodName The name of the `Math` method to use when rounding.
    	     * @returns {Function} Returns the new round function.
    	     */
    	    function createRound(methodName) {
    	      var func = Math[methodName];
    	      return function(number, precision) {
    	        number = toNumber(number);
    	        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
    	        if (precision && nativeIsFinite(number)) {
    	          // Shift with exponential notation to avoid floating-point issues.
    	          // See [MDN](https://mdn.io/round#Examples) for more details.
    	          var pair = (toString(number) + 'e').split('e'),
    	              value = func(pair[0] + 'e' + (+pair[1] + precision));

    	          pair = (toString(value) + 'e').split('e');
    	          return +(pair[0] + 'e' + (+pair[1] - precision));
    	        }
    	        return func(number);
    	      };
    	    }

    	    /**
    	     * Creates a set object of `values`.
    	     *
    	     * @private
    	     * @param {Array} values The values to add to the set.
    	     * @returns {Object} Returns the new set.
    	     */
    	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
    	      return new Set(values);
    	    };

    	    /**
    	     * Creates a `_.toPairs` or `_.toPairsIn` function.
    	     *
    	     * @private
    	     * @param {Function} keysFunc The function to get the keys of a given object.
    	     * @returns {Function} Returns the new pairs function.
    	     */
    	    function createToPairs(keysFunc) {
    	      return function(object) {
    	        var tag = getTag(object);
    	        if (tag == mapTag) {
    	          return mapToArray(object);
    	        }
    	        if (tag == setTag) {
    	          return setToPairs(object);
    	        }
    	        return baseToPairs(object, keysFunc(object));
    	      };
    	    }

    	    /**
    	     * Creates a function that either curries or invokes `func` with optional
    	     * `this` binding and partially applied arguments.
    	     *
    	     * @private
    	     * @param {Function|string} func The function or method name to wrap.
    	     * @param {number} bitmask The bitmask flags.
    	     *    1 - `_.bind`
    	     *    2 - `_.bindKey`
    	     *    4 - `_.curry` or `_.curryRight` of a bound function
    	     *    8 - `_.curry`
    	     *   16 - `_.curryRight`
    	     *   32 - `_.partial`
    	     *   64 - `_.partialRight`
    	     *  128 - `_.rearg`
    	     *  256 - `_.ary`
    	     *  512 - `_.flip`
    	     * @param {*} [thisArg] The `this` binding of `func`.
    	     * @param {Array} [partials] The arguments to be partially applied.
    	     * @param {Array} [holders] The `partials` placeholder indexes.
    	     * @param {Array} [argPos] The argument positions of the new function.
    	     * @param {number} [ary] The arity cap of `func`.
    	     * @param {number} [arity] The arity of `func`.
    	     * @returns {Function} Returns the new wrapped function.
    	     */
    	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
    	      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
    	      if (!isBindKey && typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      var length = partials ? partials.length : 0;
    	      if (!length) {
    	        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
    	        partials = holders = undefined$1;
    	      }
    	      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
    	      arity = arity === undefined$1 ? arity : toInteger(arity);
    	      length -= holders ? holders.length : 0;

    	      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
    	        var partialsRight = partials,
    	            holdersRight = holders;

    	        partials = holders = undefined$1;
    	      }
    	      var data = isBindKey ? undefined$1 : getData(func);

    	      var newData = [
    	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
    	        argPos, ary, arity
    	      ];

    	      if (data) {
    	        mergeData(newData, data);
    	      }
    	      func = newData[0];
    	      bitmask = newData[1];
    	      thisArg = newData[2];
    	      partials = newData[3];
    	      holders = newData[4];
    	      arity = newData[9] = newData[9] === undefined$1
    	        ? (isBindKey ? 0 : func.length)
    	        : nativeMax(newData[9] - length, 0);

    	      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
    	        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
    	      }
    	      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
    	        var result = createBind(func, bitmask, thisArg);
    	      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
    	        result = createCurry(func, bitmask, arity);
    	      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
    	        result = createPartial(func, bitmask, thisArg, partials);
    	      } else {
    	        result = createHybrid.apply(undefined$1, newData);
    	      }
    	      var setter = data ? baseSetData : setData;
    	      return setWrapToString(setter(result, newData), func, bitmask);
    	    }

    	    /**
    	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
    	     * of source objects to the destination object for all destination properties
    	     * that resolve to `undefined`.
    	     *
    	     * @private
    	     * @param {*} objValue The destination value.
    	     * @param {*} srcValue The source value.
    	     * @param {string} key The key of the property to assign.
    	     * @param {Object} object The parent object of `objValue`.
    	     * @returns {*} Returns the value to assign.
    	     */
    	    function customDefaultsAssignIn(objValue, srcValue, key, object) {
    	      if (objValue === undefined$1 ||
    	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
    	        return srcValue;
    	      }
    	      return objValue;
    	    }

    	    /**
    	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
    	     * objects into destination objects that are passed thru.
    	     *
    	     * @private
    	     * @param {*} objValue The destination value.
    	     * @param {*} srcValue The source value.
    	     * @param {string} key The key of the property to merge.
    	     * @param {Object} object The parent object of `objValue`.
    	     * @param {Object} source The parent object of `srcValue`.
    	     * @param {Object} [stack] Tracks traversed source values and their merged
    	     *  counterparts.
    	     * @returns {*} Returns the value to assign.
    	     */
    	    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
    	      if (isObject(objValue) && isObject(srcValue)) {
    	        // Recursively merge objects and arrays (susceptible to call stack limits).
    	        stack.set(srcValue, objValue);
    	        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
    	        stack['delete'](srcValue);
    	      }
    	      return objValue;
    	    }

    	    /**
    	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
    	     * objects.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @param {string} key The key of the property to inspect.
    	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
    	     */
    	    function customOmitClone(value) {
    	      return isPlainObject(value) ? undefined$1 : value;
    	    }

    	    /**
    	     * A specialized version of `baseIsEqualDeep` for arrays with support for
    	     * partial deep comparisons.
    	     *
    	     * @private
    	     * @param {Array} array The array to compare.
    	     * @param {Array} other The other array to compare.
    	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	     * @param {Function} customizer The function to customize comparisons.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Object} stack Tracks traversed `array` and `other` objects.
    	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
    	     */
    	    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
    	          arrLength = array.length,
    	          othLength = other.length;

    	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    	        return false;
    	      }
    	      // Check that cyclic values are equal.
    	      var arrStacked = stack.get(array);
    	      var othStacked = stack.get(other);
    	      if (arrStacked && othStacked) {
    	        return arrStacked == other && othStacked == array;
    	      }
    	      var index = -1,
    	          result = true,
    	          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

    	      stack.set(array, other);
    	      stack.set(other, array);

    	      // Ignore non-index properties.
    	      while (++index < arrLength) {
    	        var arrValue = array[index],
    	            othValue = other[index];

    	        if (customizer) {
    	          var compared = isPartial
    	            ? customizer(othValue, arrValue, index, other, array, stack)
    	            : customizer(arrValue, othValue, index, array, other, stack);
    	        }
    	        if (compared !== undefined$1) {
    	          if (compared) {
    	            continue;
    	          }
    	          result = false;
    	          break;
    	        }
    	        // Recursively compare arrays (susceptible to call stack limits).
    	        if (seen) {
    	          if (!arraySome(other, function(othValue, othIndex) {
    	                if (!cacheHas(seen, othIndex) &&
    	                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
    	                  return seen.push(othIndex);
    	                }
    	              })) {
    	            result = false;
    	            break;
    	          }
    	        } else if (!(
    	              arrValue === othValue ||
    	                equalFunc(arrValue, othValue, bitmask, customizer, stack)
    	            )) {
    	          result = false;
    	          break;
    	        }
    	      }
    	      stack['delete'](array);
    	      stack['delete'](other);
    	      return result;
    	    }

    	    /**
    	     * A specialized version of `baseIsEqualDeep` for comparing objects of
    	     * the same `toStringTag`.
    	     *
    	     * **Note:** This function only supports comparing values with tags of
    	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {string} tag The `toStringTag` of the objects to compare.
    	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	     * @param {Function} customizer The function to customize comparisons.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Object} stack Tracks traversed `object` and `other` objects.
    	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	     */
    	    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    	      switch (tag) {
    	        case dataViewTag:
    	          if ((object.byteLength != other.byteLength) ||
    	              (object.byteOffset != other.byteOffset)) {
    	            return false;
    	          }
    	          object = object.buffer;
    	          other = other.buffer;

    	        case arrayBufferTag:
    	          if ((object.byteLength != other.byteLength) ||
    	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
    	            return false;
    	          }
    	          return true;

    	        case boolTag:
    	        case dateTag:
    	        case numberTag:
    	          // Coerce booleans to `1` or `0` and dates to milliseconds.
    	          // Invalid dates are coerced to `NaN`.
    	          return eq(+object, +other);

    	        case errorTag:
    	          return object.name == other.name && object.message == other.message;

    	        case regexpTag:
    	        case stringTag:
    	          // Coerce regexes to strings and treat strings, primitives and objects,
    	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
    	          // for more details.
    	          return object == (other + '');

    	        case mapTag:
    	          var convert = mapToArray;

    	        case setTag:
    	          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
    	          convert || (convert = setToArray);

    	          if (object.size != other.size && !isPartial) {
    	            return false;
    	          }
    	          // Assume cyclic values are equal.
    	          var stacked = stack.get(object);
    	          if (stacked) {
    	            return stacked == other;
    	          }
    	          bitmask |= COMPARE_UNORDERED_FLAG;

    	          // Recursively compare objects (susceptible to call stack limits).
    	          stack.set(object, other);
    	          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
    	          stack['delete'](object);
    	          return result;

    	        case symbolTag:
    	          if (symbolValueOf) {
    	            return symbolValueOf.call(object) == symbolValueOf.call(other);
    	          }
    	      }
    	      return false;
    	    }

    	    /**
    	     * A specialized version of `baseIsEqualDeep` for objects with support for
    	     * partial deep comparisons.
    	     *
    	     * @private
    	     * @param {Object} object The object to compare.
    	     * @param {Object} other The other object to compare.
    	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
    	     * @param {Function} customizer The function to customize comparisons.
    	     * @param {Function} equalFunc The function to determine equivalents of values.
    	     * @param {Object} stack Tracks traversed `object` and `other` objects.
    	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
    	     */
    	    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
    	          objProps = getAllKeys(object),
    	          objLength = objProps.length,
    	          othProps = getAllKeys(other),
    	          othLength = othProps.length;

    	      if (objLength != othLength && !isPartial) {
    	        return false;
    	      }
    	      var index = objLength;
    	      while (index--) {
    	        var key = objProps[index];
    	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
    	          return false;
    	        }
    	      }
    	      // Check that cyclic values are equal.
    	      var objStacked = stack.get(object);
    	      var othStacked = stack.get(other);
    	      if (objStacked && othStacked) {
    	        return objStacked == other && othStacked == object;
    	      }
    	      var result = true;
    	      stack.set(object, other);
    	      stack.set(other, object);

    	      var skipCtor = isPartial;
    	      while (++index < objLength) {
    	        key = objProps[index];
    	        var objValue = object[key],
    	            othValue = other[key];

    	        if (customizer) {
    	          var compared = isPartial
    	            ? customizer(othValue, objValue, key, other, object, stack)
    	            : customizer(objValue, othValue, key, object, other, stack);
    	        }
    	        // Recursively compare objects (susceptible to call stack limits).
    	        if (!(compared === undefined$1
    	              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
    	              : compared
    	            )) {
    	          result = false;
    	          break;
    	        }
    	        skipCtor || (skipCtor = key == 'constructor');
    	      }
    	      if (result && !skipCtor) {
    	        var objCtor = object.constructor,
    	            othCtor = other.constructor;

    	        // Non `Object` object instances with different constructors are not equal.
    	        if (objCtor != othCtor &&
    	            ('constructor' in object && 'constructor' in other) &&
    	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
    	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
    	          result = false;
    	        }
    	      }
    	      stack['delete'](object);
    	      stack['delete'](other);
    	      return result;
    	    }

    	    /**
    	     * A specialized version of `baseRest` which flattens the rest array.
    	     *
    	     * @private
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @returns {Function} Returns the new function.
    	     */
    	    function flatRest(func) {
    	      return setToString(overRest(func, undefined$1, flatten), func + '');
    	    }

    	    /**
    	     * Creates an array of own enumerable property names and symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names and symbols.
    	     */
    	    function getAllKeys(object) {
    	      return baseGetAllKeys(object, keys, getSymbols);
    	    }

    	    /**
    	     * Creates an array of own and inherited enumerable property names and
    	     * symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names and symbols.
    	     */
    	    function getAllKeysIn(object) {
    	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    	    }

    	    /**
    	     * Gets metadata for `func`.
    	     *
    	     * @private
    	     * @param {Function} func The function to query.
    	     * @returns {*} Returns the metadata for `func`.
    	     */
    	    var getData = !metaMap ? noop : function(func) {
    	      return metaMap.get(func);
    	    };

    	    /**
    	     * Gets the name of `func`.
    	     *
    	     * @private
    	     * @param {Function} func The function to query.
    	     * @returns {string} Returns the function name.
    	     */
    	    function getFuncName(func) {
    	      var result = (func.name + ''),
    	          array = realNames[result],
    	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

    	      while (length--) {
    	        var data = array[length],
    	            otherFunc = data.func;
    	        if (otherFunc == null || otherFunc == func) {
    	          return data.name;
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * Gets the argument placeholder value for `func`.
    	     *
    	     * @private
    	     * @param {Function} func The function to inspect.
    	     * @returns {*} Returns the placeholder value.
    	     */
    	    function getHolder(func) {
    	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
    	      return object.placeholder;
    	    }

    	    /**
    	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
    	     * this function returns the custom method, otherwise it returns `baseIteratee`.
    	     * If arguments are provided, the chosen function is invoked with them and
    	     * its result is returned.
    	     *
    	     * @private
    	     * @param {*} [value] The value to convert to an iteratee.
    	     * @param {number} [arity] The arity of the created iteratee.
    	     * @returns {Function} Returns the chosen function or its result.
    	     */
    	    function getIteratee() {
    	      var result = lodash.iteratee || iteratee;
    	      result = result === iteratee ? baseIteratee : result;
    	      return arguments.length ? result(arguments[0], arguments[1]) : result;
    	    }

    	    /**
    	     * Gets the data for `map`.
    	     *
    	     * @private
    	     * @param {Object} map The map to query.
    	     * @param {string} key The reference key.
    	     * @returns {*} Returns the map data.
    	     */
    	    function getMapData(map, key) {
    	      var data = map.__data__;
    	      return isKeyable(key)
    	        ? data[typeof key == 'string' ? 'string' : 'hash']
    	        : data.map;
    	    }

    	    /**
    	     * Gets the property names, values, and compare flags of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the match data of `object`.
    	     */
    	    function getMatchData(object) {
    	      var result = keys(object),
    	          length = result.length;

    	      while (length--) {
    	        var key = result[length],
    	            value = object[key];

    	        result[length] = [key, value, isStrictComparable(value)];
    	      }
    	      return result;
    	    }

    	    /**
    	     * Gets the native function at `key` of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {string} key The key of the method to get.
    	     * @returns {*} Returns the function if it's native, else `undefined`.
    	     */
    	    function getNative(object, key) {
    	      var value = getValue(object, key);
    	      return baseIsNative(value) ? value : undefined$1;
    	    }

    	    /**
    	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
    	     *
    	     * @private
    	     * @param {*} value The value to query.
    	     * @returns {string} Returns the raw `toStringTag`.
    	     */
    	    function getRawTag(value) {
    	      var isOwn = hasOwnProperty.call(value, symToStringTag),
    	          tag = value[symToStringTag];

    	      try {
    	        value[symToStringTag] = undefined$1;
    	        var unmasked = true;
    	      } catch (e) {}

    	      var result = nativeObjectToString.call(value);
    	      if (unmasked) {
    	        if (isOwn) {
    	          value[symToStringTag] = tag;
    	        } else {
    	          delete value[symToStringTag];
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * Creates an array of the own enumerable symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of symbols.
    	     */
    	    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    	      if (object == null) {
    	        return [];
    	      }
    	      object = Object(object);
    	      return arrayFilter(nativeGetSymbols(object), function(symbol) {
    	        return propertyIsEnumerable.call(object, symbol);
    	      });
    	    };

    	    /**
    	     * Creates an array of the own and inherited enumerable symbols of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of symbols.
    	     */
    	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
    	      var result = [];
    	      while (object) {
    	        arrayPush(result, getSymbols(object));
    	        object = getPrototype(object);
    	      }
    	      return result;
    	    };

    	    /**
    	     * Gets the `toStringTag` of `value`.
    	     *
    	     * @private
    	     * @param {*} value The value to query.
    	     * @returns {string} Returns the `toStringTag`.
    	     */
    	    var getTag = baseGetTag;

    	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    	        (Map && getTag(new Map) != mapTag) ||
    	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
    	        (Set && getTag(new Set) != setTag) ||
    	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
    	      getTag = function(value) {
    	        var result = baseGetTag(value),
    	            Ctor = result == objectTag ? value.constructor : undefined$1,
    	            ctorString = Ctor ? toSource(Ctor) : '';

    	        if (ctorString) {
    	          switch (ctorString) {
    	            case dataViewCtorString: return dataViewTag;
    	            case mapCtorString: return mapTag;
    	            case promiseCtorString: return promiseTag;
    	            case setCtorString: return setTag;
    	            case weakMapCtorString: return weakMapTag;
    	          }
    	        }
    	        return result;
    	      };
    	    }

    	    /**
    	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
    	     *
    	     * @private
    	     * @param {number} start The start of the view.
    	     * @param {number} end The end of the view.
    	     * @param {Array} transforms The transformations to apply to the view.
    	     * @returns {Object} Returns an object containing the `start` and `end`
    	     *  positions of the view.
    	     */
    	    function getView(start, end, transforms) {
    	      var index = -1,
    	          length = transforms.length;

    	      while (++index < length) {
    	        var data = transforms[index],
    	            size = data.size;

    	        switch (data.type) {
    	          case 'drop':      start += size; break;
    	          case 'dropRight': end -= size; break;
    	          case 'take':      end = nativeMin(end, start + size); break;
    	          case 'takeRight': start = nativeMax(start, end - size); break;
    	        }
    	      }
    	      return { 'start': start, 'end': end };
    	    }

    	    /**
    	     * Extracts wrapper details from the `source` body comment.
    	     *
    	     * @private
    	     * @param {string} source The source to inspect.
    	     * @returns {Array} Returns the wrapper details.
    	     */
    	    function getWrapDetails(source) {
    	      var match = source.match(reWrapDetails);
    	      return match ? match[1].split(reSplitDetails) : [];
    	    }

    	    /**
    	     * Checks if `path` exists on `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path to check.
    	     * @param {Function} hasFunc The function to check properties.
    	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
    	     */
    	    function hasPath(object, path, hasFunc) {
    	      path = castPath(path, object);

    	      var index = -1,
    	          length = path.length,
    	          result = false;

    	      while (++index < length) {
    	        var key = toKey(path[index]);
    	        if (!(result = object != null && hasFunc(object, key))) {
    	          break;
    	        }
    	        object = object[key];
    	      }
    	      if (result || ++index != length) {
    	        return result;
    	      }
    	      length = object == null ? 0 : object.length;
    	      return !!length && isLength(length) && isIndex(key, length) &&
    	        (isArray(object) || isArguments(object));
    	    }

    	    /**
    	     * Initializes an array clone.
    	     *
    	     * @private
    	     * @param {Array} array The array to clone.
    	     * @returns {Array} Returns the initialized clone.
    	     */
    	    function initCloneArray(array) {
    	      var length = array.length,
    	          result = new array.constructor(length);

    	      // Add properties assigned by `RegExp#exec`.
    	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    	        result.index = array.index;
    	        result.input = array.input;
    	      }
    	      return result;
    	    }

    	    /**
    	     * Initializes an object clone.
    	     *
    	     * @private
    	     * @param {Object} object The object to clone.
    	     * @returns {Object} Returns the initialized clone.
    	     */
    	    function initCloneObject(object) {
    	      return (typeof object.constructor == 'function' && !isPrototype(object))
    	        ? baseCreate(getPrototype(object))
    	        : {};
    	    }

    	    /**
    	     * Initializes an object clone based on its `toStringTag`.
    	     *
    	     * **Note:** This function only supports cloning values with tags of
    	     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
    	     *
    	     * @private
    	     * @param {Object} object The object to clone.
    	     * @param {string} tag The `toStringTag` of the object to clone.
    	     * @param {boolean} [isDeep] Specify a deep clone.
    	     * @returns {Object} Returns the initialized clone.
    	     */
    	    function initCloneByTag(object, tag, isDeep) {
    	      var Ctor = object.constructor;
    	      switch (tag) {
    	        case arrayBufferTag:
    	          return cloneArrayBuffer(object);

    	        case boolTag:
    	        case dateTag:
    	          return new Ctor(+object);

    	        case dataViewTag:
    	          return cloneDataView(object, isDeep);

    	        case float32Tag: case float64Tag:
    	        case int8Tag: case int16Tag: case int32Tag:
    	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
    	          return cloneTypedArray(object, isDeep);

    	        case mapTag:
    	          return new Ctor;

    	        case numberTag:
    	        case stringTag:
    	          return new Ctor(object);

    	        case regexpTag:
    	          return cloneRegExp(object);

    	        case setTag:
    	          return new Ctor;

    	        case symbolTag:
    	          return cloneSymbol(object);
    	      }
    	    }

    	    /**
    	     * Inserts wrapper `details` in a comment at the top of the `source` body.
    	     *
    	     * @private
    	     * @param {string} source The source to modify.
    	     * @returns {Array} details The details to insert.
    	     * @returns {string} Returns the modified source.
    	     */
    	    function insertWrapDetails(source, details) {
    	      var length = details.length;
    	      if (!length) {
    	        return source;
    	      }
    	      var lastIndex = length - 1;
    	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
    	      details = details.join(length > 2 ? ', ' : ' ');
    	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    	    }

    	    /**
    	     * Checks if `value` is a flattenable `arguments` object or array.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
    	     */
    	    function isFlattenable(value) {
    	      return isArray(value) || isArguments(value) ||
    	        !!(spreadableSymbol && value && value[spreadableSymbol]);
    	    }

    	    /**
    	     * Checks if `value` is a valid array-like index.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
    	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
    	     */
    	    function isIndex(value, length) {
    	      var type = typeof value;
    	      length = length == null ? MAX_SAFE_INTEGER : length;

    	      return !!length &&
    	        (type == 'number' ||
    	          (type != 'symbol' && reIsUint.test(value))) &&
    	            (value > -1 && value % 1 == 0 && value < length);
    	    }

    	    /**
    	     * Checks if the given arguments are from an iteratee call.
    	     *
    	     * @private
    	     * @param {*} value The potential iteratee value argument.
    	     * @param {*} index The potential iteratee index or key argument.
    	     * @param {*} object The potential iteratee object argument.
    	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
    	     *  else `false`.
    	     */
    	    function isIterateeCall(value, index, object) {
    	      if (!isObject(object)) {
    	        return false;
    	      }
    	      var type = typeof index;
    	      if (type == 'number'
    	            ? (isArrayLike(object) && isIndex(index, object.length))
    	            : (type == 'string' && index in object)
    	          ) {
    	        return eq(object[index], value);
    	      }
    	      return false;
    	    }

    	    /**
    	     * Checks if `value` is a property name and not a property path.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @param {Object} [object] The object to query keys on.
    	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
    	     */
    	    function isKey(value, object) {
    	      if (isArray(value)) {
    	        return false;
    	      }
    	      var type = typeof value;
    	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
    	          value == null || isSymbol(value)) {
    	        return true;
    	      }
    	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    	        (object != null && value in Object(object));
    	    }

    	    /**
    	     * Checks if `value` is suitable for use as unique object key.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
    	     */
    	    function isKeyable(value) {
    	      var type = typeof value;
    	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    	        ? (value !== '__proto__')
    	        : (value === null);
    	    }

    	    /**
    	     * Checks if `func` has a lazy counterpart.
    	     *
    	     * @private
    	     * @param {Function} func The function to check.
    	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
    	     *  else `false`.
    	     */
    	    function isLaziable(func) {
    	      var funcName = getFuncName(func),
    	          other = lodash[funcName];

    	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
    	        return false;
    	      }
    	      if (func === other) {
    	        return true;
    	      }
    	      var data = getData(other);
    	      return !!data && func === data[0];
    	    }

    	    /**
    	     * Checks if `func` has its source masked.
    	     *
    	     * @private
    	     * @param {Function} func The function to check.
    	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
    	     */
    	    function isMasked(func) {
    	      return !!maskSrcKey && (maskSrcKey in func);
    	    }

    	    /**
    	     * Checks if `func` is capable of being masked.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
    	     */
    	    var isMaskable = coreJsData ? isFunction : stubFalse;

    	    /**
    	     * Checks if `value` is likely a prototype object.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
    	     */
    	    function isPrototype(value) {
    	      var Ctor = value && value.constructor,
    	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

    	      return value === proto;
    	    }

    	    /**
    	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
    	     *
    	     * @private
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` if suitable for strict
    	     *  equality comparisons, else `false`.
    	     */
    	    function isStrictComparable(value) {
    	      return value === value && !isObject(value);
    	    }

    	    /**
    	     * A specialized version of `matchesProperty` for source values suitable
    	     * for strict equality comparisons, i.e. `===`.
    	     *
    	     * @private
    	     * @param {string} key The key of the property to get.
    	     * @param {*} srcValue The value to match.
    	     * @returns {Function} Returns the new spec function.
    	     */
    	    function matchesStrictComparable(key, srcValue) {
    	      return function(object) {
    	        if (object == null) {
    	          return false;
    	        }
    	        return object[key] === srcValue &&
    	          (srcValue !== undefined$1 || (key in Object(object)));
    	      };
    	    }

    	    /**
    	     * A specialized version of `_.memoize` which clears the memoized function's
    	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
    	     *
    	     * @private
    	     * @param {Function} func The function to have its output memoized.
    	     * @returns {Function} Returns the new memoized function.
    	     */
    	    function memoizeCapped(func) {
    	      var result = memoize(func, function(key) {
    	        if (cache.size === MAX_MEMOIZE_SIZE) {
    	          cache.clear();
    	        }
    	        return key;
    	      });

    	      var cache = result.cache;
    	      return result;
    	    }

    	    /**
    	     * Merges the function metadata of `source` into `data`.
    	     *
    	     * Merging metadata reduces the number of wrappers used to invoke a function.
    	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
    	     * may be applied regardless of execution order. Methods like `_.ary` and
    	     * `_.rearg` modify function arguments, making the order in which they are
    	     * executed important, preventing the merging of metadata. However, we make
    	     * an exception for a safe combined case where curried functions have `_.ary`
    	     * and or `_.rearg` applied.
    	     *
    	     * @private
    	     * @param {Array} data The destination metadata.
    	     * @param {Array} source The source metadata.
    	     * @returns {Array} Returns `data`.
    	     */
    	    function mergeData(data, source) {
    	      var bitmask = data[1],
    	          srcBitmask = source[1],
    	          newBitmask = bitmask | srcBitmask,
    	          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

    	      var isCombo =
    	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
    	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
    	        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

    	      // Exit early if metadata can't be merged.
    	      if (!(isCommon || isCombo)) {
    	        return data;
    	      }
    	      // Use source `thisArg` if available.
    	      if (srcBitmask & WRAP_BIND_FLAG) {
    	        data[2] = source[2];
    	        // Set when currying a bound function.
    	        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
    	      }
    	      // Compose partial arguments.
    	      var value = source[3];
    	      if (value) {
    	        var partials = data[3];
    	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
    	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
    	      }
    	      // Compose partial right arguments.
    	      value = source[5];
    	      if (value) {
    	        partials = data[5];
    	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
    	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
    	      }
    	      // Use source `argPos` if available.
    	      value = source[7];
    	      if (value) {
    	        data[7] = value;
    	      }
    	      // Use source `ary` if it's smaller.
    	      if (srcBitmask & WRAP_ARY_FLAG) {
    	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
    	      }
    	      // Use source `arity` if one is not provided.
    	      if (data[9] == null) {
    	        data[9] = source[9];
    	      }
    	      // Use source `func` and merge bitmasks.
    	      data[0] = source[0];
    	      data[1] = newBitmask;

    	      return data;
    	    }

    	    /**
    	     * This function is like
    	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
    	     * except that it includes inherited enumerable properties.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     */
    	    function nativeKeysIn(object) {
    	      var result = [];
    	      if (object != null) {
    	        for (var key in Object(object)) {
    	          result.push(key);
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * Converts `value` to a string using `Object.prototype.toString`.
    	     *
    	     * @private
    	     * @param {*} value The value to convert.
    	     * @returns {string} Returns the converted string.
    	     */
    	    function objectToString(value) {
    	      return nativeObjectToString.call(value);
    	    }

    	    /**
    	     * A specialized version of `baseRest` which transforms the rest array.
    	     *
    	     * @private
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @param {number} [start=func.length-1] The start position of the rest parameter.
    	     * @param {Function} transform The rest array transform.
    	     * @returns {Function} Returns the new function.
    	     */
    	    function overRest(func, start, transform) {
    	      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
    	      return function() {
    	        var args = arguments,
    	            index = -1,
    	            length = nativeMax(args.length - start, 0),
    	            array = Array(length);

    	        while (++index < length) {
    	          array[index] = args[start + index];
    	        }
    	        index = -1;
    	        var otherArgs = Array(start + 1);
    	        while (++index < start) {
    	          otherArgs[index] = args[index];
    	        }
    	        otherArgs[start] = transform(array);
    	        return apply(func, this, otherArgs);
    	      };
    	    }

    	    /**
    	     * Gets the parent value at `path` of `object`.
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {Array} path The path to get the parent value of.
    	     * @returns {*} Returns the parent value.
    	     */
    	    function parent(object, path) {
    	      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    	    }

    	    /**
    	     * Reorder `array` according to the specified indexes where the element at
    	     * the first index is assigned as the first element, the element at
    	     * the second index is assigned as the second element, and so on.
    	     *
    	     * @private
    	     * @param {Array} array The array to reorder.
    	     * @param {Array} indexes The arranged array indexes.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function reorder(array, indexes) {
    	      var arrLength = array.length,
    	          length = nativeMin(indexes.length, arrLength),
    	          oldArray = copyArray(array);

    	      while (length--) {
    	        var index = indexes[length];
    	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
    	      }
    	      return array;
    	    }

    	    /**
    	     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
    	     *
    	     * @private
    	     * @param {Object} object The object to query.
    	     * @param {string} key The key of the property to get.
    	     * @returns {*} Returns the property value.
    	     */
    	    function safeGet(object, key) {
    	      if (key === 'constructor' && typeof object[key] === 'function') {
    	        return;
    	      }

    	      if (key == '__proto__') {
    	        return;
    	      }

    	      return object[key];
    	    }

    	    /**
    	     * Sets metadata for `func`.
    	     *
    	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
    	     * period of time, it will trip its breaker and transition to an identity
    	     * function to avoid garbage collection pauses in V8. See
    	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
    	     * for more details.
    	     *
    	     * @private
    	     * @param {Function} func The function to associate metadata with.
    	     * @param {*} data The metadata.
    	     * @returns {Function} Returns `func`.
    	     */
    	    var setData = shortOut(baseSetData);

    	    /**
    	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
    	     *
    	     * @private
    	     * @param {Function} func The function to delay.
    	     * @param {number} wait The number of milliseconds to delay invocation.
    	     * @returns {number|Object} Returns the timer id or timeout object.
    	     */
    	    var setTimeout = ctxSetTimeout || function(func, wait) {
    	      return root.setTimeout(func, wait);
    	    };

    	    /**
    	     * Sets the `toString` method of `func` to return `string`.
    	     *
    	     * @private
    	     * @param {Function} func The function to modify.
    	     * @param {Function} string The `toString` result.
    	     * @returns {Function} Returns `func`.
    	     */
    	    var setToString = shortOut(baseSetToString);

    	    /**
    	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
    	     * with wrapper details in a comment at the top of the source body.
    	     *
    	     * @private
    	     * @param {Function} wrapper The function to modify.
    	     * @param {Function} reference The reference function.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @returns {Function} Returns `wrapper`.
    	     */
    	    function setWrapToString(wrapper, reference, bitmask) {
    	      var source = (reference + '');
    	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    	    }

    	    /**
    	     * Creates a function that'll short out and invoke `identity` instead
    	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
    	     * milliseconds.
    	     *
    	     * @private
    	     * @param {Function} func The function to restrict.
    	     * @returns {Function} Returns the new shortable function.
    	     */
    	    function shortOut(func) {
    	      var count = 0,
    	          lastCalled = 0;

    	      return function() {
    	        var stamp = nativeNow(),
    	            remaining = HOT_SPAN - (stamp - lastCalled);

    	        lastCalled = stamp;
    	        if (remaining > 0) {
    	          if (++count >= HOT_COUNT) {
    	            return arguments[0];
    	          }
    	        } else {
    	          count = 0;
    	        }
    	        return func.apply(undefined$1, arguments);
    	      };
    	    }

    	    /**
    	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
    	     *
    	     * @private
    	     * @param {Array} array The array to shuffle.
    	     * @param {number} [size=array.length] The size of `array`.
    	     * @returns {Array} Returns `array`.
    	     */
    	    function shuffleSelf(array, size) {
    	      var index = -1,
    	          length = array.length,
    	          lastIndex = length - 1;

    	      size = size === undefined$1 ? length : size;
    	      while (++index < size) {
    	        var rand = baseRandom(index, lastIndex),
    	            value = array[rand];

    	        array[rand] = array[index];
    	        array[index] = value;
    	      }
    	      array.length = size;
    	      return array;
    	    }

    	    /**
    	     * Converts `string` to a property path array.
    	     *
    	     * @private
    	     * @param {string} string The string to convert.
    	     * @returns {Array} Returns the property path array.
    	     */
    	    var stringToPath = memoizeCapped(function(string) {
    	      var result = [];
    	      if (string.charCodeAt(0) === 46 /* . */) {
    	        result.push('');
    	      }
    	      string.replace(rePropName, function(match, number, quote, subString) {
    	        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
    	      });
    	      return result;
    	    });

    	    /**
    	     * Converts `value` to a string key if it's not a string or symbol.
    	     *
    	     * @private
    	     * @param {*} value The value to inspect.
    	     * @returns {string|symbol} Returns the key.
    	     */
    	    function toKey(value) {
    	      if (typeof value == 'string' || isSymbol(value)) {
    	        return value;
    	      }
    	      var result = (value + '');
    	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    	    }

    	    /**
    	     * Converts `func` to its source code.
    	     *
    	     * @private
    	     * @param {Function} func The function to convert.
    	     * @returns {string} Returns the source code.
    	     */
    	    function toSource(func) {
    	      if (func != null) {
    	        try {
    	          return funcToString.call(func);
    	        } catch (e) {}
    	        try {
    	          return (func + '');
    	        } catch (e) {}
    	      }
    	      return '';
    	    }

    	    /**
    	     * Updates wrapper `details` based on `bitmask` flags.
    	     *
    	     * @private
    	     * @returns {Array} details The details to modify.
    	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
    	     * @returns {Array} Returns `details`.
    	     */
    	    function updateWrapDetails(details, bitmask) {
    	      arrayEach(wrapFlags, function(pair) {
    	        var value = '_.' + pair[0];
    	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
    	          details.push(value);
    	        }
    	      });
    	      return details.sort();
    	    }

    	    /**
    	     * Creates a clone of `wrapper`.
    	     *
    	     * @private
    	     * @param {Object} wrapper The wrapper to clone.
    	     * @returns {Object} Returns the cloned wrapper.
    	     */
    	    function wrapperClone(wrapper) {
    	      if (wrapper instanceof LazyWrapper) {
    	        return wrapper.clone();
    	      }
    	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
    	      result.__actions__ = copyArray(wrapper.__actions__);
    	      result.__index__  = wrapper.__index__;
    	      result.__values__ = wrapper.__values__;
    	      return result;
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates an array of elements split into groups the length of `size`.
    	     * If `array` can't be split evenly, the final chunk will be the remaining
    	     * elements.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to process.
    	     * @param {number} [size=1] The length of each chunk
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the new array of chunks.
    	     * @example
    	     *
    	     * _.chunk(['a', 'b', 'c', 'd'], 2);
    	     * // => [['a', 'b'], ['c', 'd']]
    	     *
    	     * _.chunk(['a', 'b', 'c', 'd'], 3);
    	     * // => [['a', 'b', 'c'], ['d']]
    	     */
    	    function chunk(array, size, guard) {
    	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
    	        size = 1;
    	      } else {
    	        size = nativeMax(toInteger(size), 0);
    	      }
    	      var length = array == null ? 0 : array.length;
    	      if (!length || size < 1) {
    	        return [];
    	      }
    	      var index = 0,
    	          resIndex = 0,
    	          result = Array(nativeCeil(length / size));

    	      while (index < length) {
    	        result[resIndex++] = baseSlice(array, index, (index += size));
    	      }
    	      return result;
    	    }

    	    /**
    	     * Creates an array with all falsey values removed. The values `false`, `null`,
    	     * `0`, `""`, `undefined`, and `NaN` are falsey.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to compact.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * _.compact([0, 1, false, 2, '', 3]);
    	     * // => [1, 2, 3]
    	     */
    	    function compact(array) {
    	      var index = -1,
    	          length = array == null ? 0 : array.length,
    	          resIndex = 0,
    	          result = [];

    	      while (++index < length) {
    	        var value = array[index];
    	        if (value) {
    	          result[resIndex++] = value;
    	        }
    	      }
    	      return result;
    	    }

    	    /**
    	     * Creates a new array concatenating `array` with any additional arrays
    	     * and/or values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to concatenate.
    	     * @param {...*} [values] The values to concatenate.
    	     * @returns {Array} Returns the new concatenated array.
    	     * @example
    	     *
    	     * var array = [1];
    	     * var other = _.concat(array, 2, [3], [[4]]);
    	     *
    	     * console.log(other);
    	     * // => [1, 2, 3, [4]]
    	     *
    	     * console.log(array);
    	     * // => [1]
    	     */
    	    function concat() {
    	      var length = arguments.length;
    	      if (!length) {
    	        return [];
    	      }
    	      var args = Array(length - 1),
    	          array = arguments[0],
    	          index = length;

    	      while (index--) {
    	        args[index - 1] = arguments[index];
    	      }
    	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    	    }

    	    /**
    	     * Creates an array of `array` values not included in the other given arrays
    	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons. The order and references of result values are
    	     * determined by the first array.
    	     *
    	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...Array} [values] The values to exclude.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @see _.without, _.xor
    	     * @example
    	     *
    	     * _.difference([2, 1], [2, 3]);
    	     * // => [1]
    	     */
    	    var difference = baseRest(function(array, values) {
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
    	        : [];
    	    });

    	    /**
    	     * This method is like `_.difference` except that it accepts `iteratee` which
    	     * is invoked for each element of `array` and `values` to generate the criterion
    	     * by which they're compared. The order and references of result values are
    	     * determined by the first array. The iteratee is invoked with one argument:
    	     * (value).
    	     *
    	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...Array} [values] The values to exclude.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
    	     * // => [1.2]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
    	     * // => [{ 'x': 2 }]
    	     */
    	    var differenceBy = baseRest(function(array, values) {
    	      var iteratee = last(values);
    	      if (isArrayLikeObject(iteratee)) {
    	        iteratee = undefined$1;
    	      }
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
    	        : [];
    	    });

    	    /**
    	     * This method is like `_.difference` except that it accepts `comparator`
    	     * which is invoked to compare elements of `array` to `values`. The order and
    	     * references of result values are determined by the first array. The comparator
    	     * is invoked with two arguments: (arrVal, othVal).
    	     *
    	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...Array} [values] The values to exclude.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     *
    	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
    	     * // => [{ 'x': 2, 'y': 1 }]
    	     */
    	    var differenceWith = baseRest(function(array, values) {
    	      var comparator = last(values);
    	      if (isArrayLikeObject(comparator)) {
    	        comparator = undefined$1;
    	      }
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
    	        : [];
    	    });

    	    /**
    	     * Creates a slice of `array` with `n` elements dropped from the beginning.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.5.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to drop.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.drop([1, 2, 3]);
    	     * // => [2, 3]
    	     *
    	     * _.drop([1, 2, 3], 2);
    	     * // => [3]
    	     *
    	     * _.drop([1, 2, 3], 5);
    	     * // => []
    	     *
    	     * _.drop([1, 2, 3], 0);
    	     * // => [1, 2, 3]
    	     */
    	    function drop(array, n, guard) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
    	      return baseSlice(array, n < 0 ? 0 : n, length);
    	    }

    	    /**
    	     * Creates a slice of `array` with `n` elements dropped from the end.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to drop.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.dropRight([1, 2, 3]);
    	     * // => [1, 2]
    	     *
    	     * _.dropRight([1, 2, 3], 2);
    	     * // => [1]
    	     *
    	     * _.dropRight([1, 2, 3], 5);
    	     * // => []
    	     *
    	     * _.dropRight([1, 2, 3], 0);
    	     * // => [1, 2, 3]
    	     */
    	    function dropRight(array, n, guard) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
    	      n = length - n;
    	      return baseSlice(array, 0, n < 0 ? 0 : n);
    	    }

    	    /**
    	     * Creates a slice of `array` excluding elements dropped from the end.
    	     * Elements are dropped until `predicate` returns falsey. The predicate is
    	     * invoked with three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': true },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': false }
    	     * ];
    	     *
    	     * _.dropRightWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
    	     * // => objects for ['barney', 'fred']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.dropRightWhile(users, ['active', false]);
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.dropRightWhile(users, 'active');
    	     * // => objects for ['barney', 'fred', 'pebbles']
    	     */
    	    function dropRightWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
    	        : [];
    	    }

    	    /**
    	     * Creates a slice of `array` excluding elements dropped from the beginning.
    	     * Elements are dropped until `predicate` returns falsey. The predicate is
    	     * invoked with three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': false },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': true }
    	     * ];
    	     *
    	     * _.dropWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['pebbles']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
    	     * // => objects for ['fred', 'pebbles']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.dropWhile(users, ['active', false]);
    	     * // => objects for ['pebbles']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.dropWhile(users, 'active');
    	     * // => objects for ['barney', 'fred', 'pebbles']
    	     */
    	    function dropWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3), true)
    	        : [];
    	    }

    	    /**
    	     * Fills elements of `array` with `value` from `start` up to, but not
    	     * including, `end`.
    	     *
    	     * **Note:** This method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Array
    	     * @param {Array} array The array to fill.
    	     * @param {*} value The value to fill `array` with.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [1, 2, 3];
    	     *
    	     * _.fill(array, 'a');
    	     * console.log(array);
    	     * // => ['a', 'a', 'a']
    	     *
    	     * _.fill(Array(3), 2);
    	     * // => [2, 2, 2]
    	     *
    	     * _.fill([4, 6, 8, 10], '*', 1, 3);
    	     * // => [4, '*', '*', 10]
    	     */
    	    function fill(array, value, start, end) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
    	        start = 0;
    	        end = length;
    	      }
    	      return baseFill(array, value, start, end);
    	    }

    	    /**
    	     * This method is like `_.find` except that it returns the index of the first
    	     * element `predicate` returns truthy for instead of the element itself.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @returns {number} Returns the index of the found element, else `-1`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': false },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': true }
    	     * ];
    	     *
    	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
    	     * // => 0
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findIndex(users, { 'user': 'fred', 'active': false });
    	     * // => 1
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findIndex(users, ['active', false]);
    	     * // => 0
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findIndex(users, 'active');
    	     * // => 2
    	     */
    	    function findIndex(array, predicate, fromIndex) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
    	      if (index < 0) {
    	        index = nativeMax(length + index, 0);
    	      }
    	      return baseFindIndex(array, getIteratee(predicate, 3), index);
    	    }

    	    /**
    	     * This method is like `_.findIndex` except that it iterates over elements
    	     * of `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param {number} [fromIndex=array.length-1] The index to search from.
    	     * @returns {number} Returns the index of the found element, else `-1`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': true },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': false }
    	     * ];
    	     *
    	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
    	     * // => 2
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
    	     * // => 0
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findLastIndex(users, ['active', false]);
    	     * // => 2
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findLastIndex(users, 'active');
    	     * // => 0
    	     */
    	    function findLastIndex(array, predicate, fromIndex) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = length - 1;
    	      if (fromIndex !== undefined$1) {
    	        index = toInteger(fromIndex);
    	        index = fromIndex < 0
    	          ? nativeMax(length + index, 0)
    	          : nativeMin(index, length - 1);
    	      }
    	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    	    }

    	    /**
    	     * Flattens `array` a single level deep.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to flatten.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * _.flatten([1, [2, [3, [4]], 5]]);
    	     * // => [1, 2, [3, [4]], 5]
    	     */
    	    function flatten(array) {
    	      var length = array == null ? 0 : array.length;
    	      return length ? baseFlatten(array, 1) : [];
    	    }

    	    /**
    	     * Recursively flattens `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to flatten.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
    	     * // => [1, 2, 3, 4, 5]
    	     */
    	    function flattenDeep(array) {
    	      var length = array == null ? 0 : array.length;
    	      return length ? baseFlatten(array, INFINITY) : [];
    	    }

    	    /**
    	     * Recursively flatten `array` up to `depth` times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.4.0
    	     * @category Array
    	     * @param {Array} array The array to flatten.
    	     * @param {number} [depth=1] The maximum recursion depth.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * var array = [1, [2, [3, [4]], 5]];
    	     *
    	     * _.flattenDepth(array, 1);
    	     * // => [1, 2, [3, [4]], 5]
    	     *
    	     * _.flattenDepth(array, 2);
    	     * // => [1, 2, 3, [4], 5]
    	     */
    	    function flattenDepth(array, depth) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      depth = depth === undefined$1 ? 1 : toInteger(depth);
    	      return baseFlatten(array, depth);
    	    }

    	    /**
    	     * The inverse of `_.toPairs`; this method returns an object composed
    	     * from key-value `pairs`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} pairs The key-value pairs.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * _.fromPairs([['a', 1], ['b', 2]]);
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    function fromPairs(pairs) {
    	      var index = -1,
    	          length = pairs == null ? 0 : pairs.length,
    	          result = {};

    	      while (++index < length) {
    	        var pair = pairs[index];
    	        result[pair[0]] = pair[1];
    	      }
    	      return result;
    	    }

    	    /**
    	     * Gets the first element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @alias first
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {*} Returns the first element of `array`.
    	     * @example
    	     *
    	     * _.head([1, 2, 3]);
    	     * // => 1
    	     *
    	     * _.head([]);
    	     * // => undefined
    	     */
    	    function head(array) {
    	      return (array && array.length) ? array[0] : undefined$1;
    	    }

    	    /**
    	     * Gets the index at which the first occurrence of `value` is found in `array`
    	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons. If `fromIndex` is negative, it's used as the
    	     * offset from the end of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {*} value The value to search for.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.indexOf([1, 2, 1, 2], 2);
    	     * // => 1
    	     *
    	     * // Search from the `fromIndex`.
    	     * _.indexOf([1, 2, 1, 2], 2, 2);
    	     * // => 3
    	     */
    	    function indexOf(array, value, fromIndex) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
    	      if (index < 0) {
    	        index = nativeMax(length + index, 0);
    	      }
    	      return baseIndexOf(array, value, index);
    	    }

    	    /**
    	     * Gets all but the last element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.initial([1, 2, 3]);
    	     * // => [1, 2]
    	     */
    	    function initial(array) {
    	      var length = array == null ? 0 : array.length;
    	      return length ? baseSlice(array, 0, -1) : [];
    	    }

    	    /**
    	     * Creates an array of unique values that are included in all given arrays
    	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons. The order and references of result values are
    	     * determined by the first array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @returns {Array} Returns the new array of intersecting values.
    	     * @example
    	     *
    	     * _.intersection([2, 1], [2, 3]);
    	     * // => [2]
    	     */
    	    var intersection = baseRest(function(arrays) {
    	      var mapped = arrayMap(arrays, castArrayLikeObject);
    	      return (mapped.length && mapped[0] === arrays[0])
    	        ? baseIntersection(mapped)
    	        : [];
    	    });

    	    /**
    	     * This method is like `_.intersection` except that it accepts `iteratee`
    	     * which is invoked for each element of each `arrays` to generate the criterion
    	     * by which they're compared. The order and references of result values are
    	     * determined by the first array. The iteratee is invoked with one argument:
    	     * (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of intersecting values.
    	     * @example
    	     *
    	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
    	     * // => [2.1]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 1 }]
    	     */
    	    var intersectionBy = baseRest(function(arrays) {
    	      var iteratee = last(arrays),
    	          mapped = arrayMap(arrays, castArrayLikeObject);

    	      if (iteratee === last(mapped)) {
    	        iteratee = undefined$1;
    	      } else {
    	        mapped.pop();
    	      }
    	      return (mapped.length && mapped[0] === arrays[0])
    	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
    	        : [];
    	    });

    	    /**
    	     * This method is like `_.intersection` except that it accepts `comparator`
    	     * which is invoked to compare elements of `arrays`. The order and references
    	     * of result values are determined by the first array. The comparator is
    	     * invoked with two arguments: (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of intersecting values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.intersectionWith(objects, others, _.isEqual);
    	     * // => [{ 'x': 1, 'y': 2 }]
    	     */
    	    var intersectionWith = baseRest(function(arrays) {
    	      var comparator = last(arrays),
    	          mapped = arrayMap(arrays, castArrayLikeObject);

    	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
    	      if (comparator) {
    	        mapped.pop();
    	      }
    	      return (mapped.length && mapped[0] === arrays[0])
    	        ? baseIntersection(mapped, undefined$1, comparator)
    	        : [];
    	    });

    	    /**
    	     * Converts all elements in `array` into a string separated by `separator`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to convert.
    	     * @param {string} [separator=','] The element separator.
    	     * @returns {string} Returns the joined string.
    	     * @example
    	     *
    	     * _.join(['a', 'b', 'c'], '~');
    	     * // => 'a~b~c'
    	     */
    	    function join(array, separator) {
    	      return array == null ? '' : nativeJoin.call(array, separator);
    	    }

    	    /**
    	     * Gets the last element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {*} Returns the last element of `array`.
    	     * @example
    	     *
    	     * _.last([1, 2, 3]);
    	     * // => 3
    	     */
    	    function last(array) {
    	      var length = array == null ? 0 : array.length;
    	      return length ? array[length - 1] : undefined$1;
    	    }

    	    /**
    	     * This method is like `_.indexOf` except that it iterates over elements of
    	     * `array` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {*} value The value to search for.
    	     * @param {number} [fromIndex=array.length-1] The index to search from.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.lastIndexOf([1, 2, 1, 2], 2);
    	     * // => 3
    	     *
    	     * // Search from the `fromIndex`.
    	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
    	     * // => 1
    	     */
    	    function lastIndexOf(array, value, fromIndex) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return -1;
    	      }
    	      var index = length;
    	      if (fromIndex !== undefined$1) {
    	        index = toInteger(fromIndex);
    	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
    	      }
    	      return value === value
    	        ? strictLastIndexOf(array, value, index)
    	        : baseFindIndex(array, baseIsNaN, index, true);
    	    }

    	    /**
    	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
    	     * element from the end is returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.11.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=0] The index of the element to return.
    	     * @returns {*} Returns the nth element of `array`.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'd'];
    	     *
    	     * _.nth(array, 1);
    	     * // => 'b'
    	     *
    	     * _.nth(array, -2);
    	     * // => 'c';
    	     */
    	    function nth(array, n) {
    	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
    	    }

    	    /**
    	     * Removes all given values from `array` using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
    	     * to remove elements from an array by predicate.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {...*} [values] The values to remove.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
    	     *
    	     * _.pull(array, 'a', 'c');
    	     * console.log(array);
    	     * // => ['b', 'b']
    	     */
    	    var pull = baseRest(pullAll);

    	    /**
    	     * This method is like `_.pull` except that it accepts an array of values to remove.
    	     *
    	     * **Note:** Unlike `_.difference`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
    	     *
    	     * _.pullAll(array, ['a', 'c']);
    	     * console.log(array);
    	     * // => ['b', 'b']
    	     */
    	    function pullAll(array, values) {
    	      return (array && array.length && values && values.length)
    	        ? basePullAll(array, values)
    	        : array;
    	    }

    	    /**
    	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
    	     * invoked for each element of `array` and `values` to generate the criterion
    	     * by which they're compared. The iteratee is invoked with one argument: (value).
    	     *
    	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
    	     *
    	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
    	     * console.log(array);
    	     * // => [{ 'x': 2 }]
    	     */
    	    function pullAllBy(array, values, iteratee) {
    	      return (array && array.length && values && values.length)
    	        ? basePullAll(array, values, getIteratee(iteratee, 2))
    	        : array;
    	    }

    	    /**
    	     * This method is like `_.pullAll` except that it accepts `comparator` which
    	     * is invoked to compare elements of `array` to `values`. The comparator is
    	     * invoked with two arguments: (arrVal, othVal).
    	     *
    	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.6.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Array} values The values to remove.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
    	     *
    	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
    	     * console.log(array);
    	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
    	     */
    	    function pullAllWith(array, values, comparator) {
    	      return (array && array.length && values && values.length)
    	        ? basePullAll(array, values, undefined$1, comparator)
    	        : array;
    	    }

    	    /**
    	     * Removes elements from `array` corresponding to `indexes` and returns an
    	     * array of removed elements.
    	     *
    	     * **Note:** Unlike `_.at`, this method mutates `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
    	     * @returns {Array} Returns the new array of removed elements.
    	     * @example
    	     *
    	     * var array = ['a', 'b', 'c', 'd'];
    	     * var pulled = _.pullAt(array, [1, 3]);
    	     *
    	     * console.log(array);
    	     * // => ['a', 'c']
    	     *
    	     * console.log(pulled);
    	     * // => ['b', 'd']
    	     */
    	    var pullAt = flatRest(function(array, indexes) {
    	      var length = array == null ? 0 : array.length,
    	          result = baseAt(array, indexes);

    	      basePullAt(array, arrayMap(indexes, function(index) {
    	        return isIndex(index, length) ? +index : index;
    	      }).sort(compareAscending));

    	      return result;
    	    });

    	    /**
    	     * Removes all elements from `array` that `predicate` returns truthy for
    	     * and returns an array of the removed elements. The predicate is invoked
    	     * with three arguments: (value, index, array).
    	     *
    	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
    	     * to pull elements from an array by value.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new array of removed elements.
    	     * @example
    	     *
    	     * var array = [1, 2, 3, 4];
    	     * var evens = _.remove(array, function(n) {
    	     *   return n % 2 == 0;
    	     * });
    	     *
    	     * console.log(array);
    	     * // => [1, 3]
    	     *
    	     * console.log(evens);
    	     * // => [2, 4]
    	     */
    	    function remove(array, predicate) {
    	      var result = [];
    	      if (!(array && array.length)) {
    	        return result;
    	      }
    	      var index = -1,
    	          indexes = [],
    	          length = array.length;

    	      predicate = getIteratee(predicate, 3);
    	      while (++index < length) {
    	        var value = array[index];
    	        if (predicate(value, index, array)) {
    	          result.push(value);
    	          indexes.push(index);
    	        }
    	      }
    	      basePullAt(array, indexes);
    	      return result;
    	    }

    	    /**
    	     * Reverses `array` so that the first element becomes the last, the second
    	     * element becomes the second to last, and so on.
    	     *
    	     * **Note:** This method mutates `array` and is based on
    	     * [`Array#reverse`](https://mdn.io/Array/reverse).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to modify.
    	     * @returns {Array} Returns `array`.
    	     * @example
    	     *
    	     * var array = [1, 2, 3];
    	     *
    	     * _.reverse(array);
    	     * // => [3, 2, 1]
    	     *
    	     * console.log(array);
    	     * // => [3, 2, 1]
    	     */
    	    function reverse(array) {
    	      return array == null ? array : nativeReverse.call(array);
    	    }

    	    /**
    	     * Creates a slice of `array` from `start` up to, but not including, `end`.
    	     *
    	     * **Note:** This method is used instead of
    	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
    	     * returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to slice.
    	     * @param {number} [start=0] The start position.
    	     * @param {number} [end=array.length] The end position.
    	     * @returns {Array} Returns the slice of `array`.
    	     */
    	    function slice(array, start, end) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
    	        start = 0;
    	        end = length;
    	      }
    	      else {
    	        start = start == null ? 0 : toInteger(start);
    	        end = end === undefined$1 ? length : toInteger(end);
    	      }
    	      return baseSlice(array, start, end);
    	    }

    	    /**
    	     * Uses a binary search to determine the lowest index at which `value`
    	     * should be inserted into `array` in order to maintain its sort order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * _.sortedIndex([30, 50], 40);
    	     * // => 1
    	     */
    	    function sortedIndex(array, value) {
    	      return baseSortedIndex(array, value);
    	    }

    	    /**
    	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
    	     * which is invoked for `value` and each element of `array` to compute their
    	     * sort ranking. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
    	     *
    	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
    	     * // => 0
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
    	     * // => 0
    	     */
    	    function sortedIndexBy(array, value, iteratee) {
    	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    	    }

    	    /**
    	     * This method is like `_.indexOf` except that it performs a binary
    	     * search on a sorted `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {*} value The value to search for.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
    	     * // => 1
    	     */
    	    function sortedIndexOf(array, value) {
    	      var length = array == null ? 0 : array.length;
    	      if (length) {
    	        var index = baseSortedIndex(array, value);
    	        if (index < length && eq(array[index], value)) {
    	          return index;
    	        }
    	      }
    	      return -1;
    	    }

    	    /**
    	     * This method is like `_.sortedIndex` except that it returns the highest
    	     * index at which `value` should be inserted into `array` in order to
    	     * maintain its sort order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
    	     * // => 4
    	     */
    	    function sortedLastIndex(array, value) {
    	      return baseSortedIndex(array, value, true);
    	    }

    	    /**
    	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
    	     * which is invoked for `value` and each element of `array` to compute their
    	     * sort ranking. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The sorted array to inspect.
    	     * @param {*} value The value to evaluate.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {number} Returns the index at which `value` should be inserted
    	     *  into `array`.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
    	     *
    	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
    	     * // => 1
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
    	     * // => 1
    	     */
    	    function sortedLastIndexBy(array, value, iteratee) {
    	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    	    }

    	    /**
    	     * This method is like `_.lastIndexOf` except that it performs a binary
    	     * search on a sorted `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {*} value The value to search for.
    	     * @returns {number} Returns the index of the matched value, else `-1`.
    	     * @example
    	     *
    	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
    	     * // => 3
    	     */
    	    function sortedLastIndexOf(array, value) {
    	      var length = array == null ? 0 : array.length;
    	      if (length) {
    	        var index = baseSortedIndex(array, value, true) - 1;
    	        if (eq(array[index], value)) {
    	          return index;
    	        }
    	      }
    	      return -1;
    	    }

    	    /**
    	     * This method is like `_.uniq` except that it's designed and optimized
    	     * for sorted arrays.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.sortedUniq([1, 1, 2]);
    	     * // => [1, 2]
    	     */
    	    function sortedUniq(array) {
    	      return (array && array.length)
    	        ? baseSortedUniq(array)
    	        : [];
    	    }

    	    /**
    	     * This method is like `_.uniqBy` except that it's designed and optimized
    	     * for sorted arrays.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [iteratee] The iteratee invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
    	     * // => [1.1, 2.3]
    	     */
    	    function sortedUniqBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
    	        : [];
    	    }

    	    /**
    	     * Gets all but the first element of `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.tail([1, 2, 3]);
    	     * // => [2, 3]
    	     */
    	    function tail(array) {
    	      var length = array == null ? 0 : array.length;
    	      return length ? baseSlice(array, 1, length) : [];
    	    }

    	    /**
    	     * Creates a slice of `array` with `n` elements taken from the beginning.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to take.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.take([1, 2, 3]);
    	     * // => [1]
    	     *
    	     * _.take([1, 2, 3], 2);
    	     * // => [1, 2]
    	     *
    	     * _.take([1, 2, 3], 5);
    	     * // => [1, 2, 3]
    	     *
    	     * _.take([1, 2, 3], 0);
    	     * // => []
    	     */
    	    function take(array, n, guard) {
    	      if (!(array && array.length)) {
    	        return [];
    	      }
    	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
    	      return baseSlice(array, 0, n < 0 ? 0 : n);
    	    }

    	    /**
    	     * Creates a slice of `array` with `n` elements taken from the end.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {number} [n=1] The number of elements to take.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * _.takeRight([1, 2, 3]);
    	     * // => [3]
    	     *
    	     * _.takeRight([1, 2, 3], 2);
    	     * // => [2, 3]
    	     *
    	     * _.takeRight([1, 2, 3], 5);
    	     * // => [1, 2, 3]
    	     *
    	     * _.takeRight([1, 2, 3], 0);
    	     * // => []
    	     */
    	    function takeRight(array, n, guard) {
    	      var length = array == null ? 0 : array.length;
    	      if (!length) {
    	        return [];
    	      }
    	      n = (guard || n === undefined$1) ? 1 : toInteger(n);
    	      n = length - n;
    	      return baseSlice(array, n < 0 ? 0 : n, length);
    	    }

    	    /**
    	     * Creates a slice of `array` with elements taken from the end. Elements are
    	     * taken until `predicate` returns falsey. The predicate is invoked with
    	     * three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': true },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': false }
    	     * ];
    	     *
    	     * _.takeRightWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['fred', 'pebbles']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
    	     * // => objects for ['pebbles']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.takeRightWhile(users, ['active', false]);
    	     * // => objects for ['fred', 'pebbles']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.takeRightWhile(users, 'active');
    	     * // => []
    	     */
    	    function takeRightWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
    	        : [];
    	    }

    	    /**
    	     * Creates a slice of `array` with elements taken from the beginning. Elements
    	     * are taken until `predicate` returns falsey. The predicate is invoked with
    	     * three arguments: (value, index, array).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Array
    	     * @param {Array} array The array to query.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the slice of `array`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'active': false },
    	     *   { 'user': 'fred',    'active': false },
    	     *   { 'user': 'pebbles', 'active': true }
    	     * ];
    	     *
    	     * _.takeWhile(users, function(o) { return !o.active; });
    	     * // => objects for ['barney', 'fred']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.takeWhile(users, ['active', false]);
    	     * // => objects for ['barney', 'fred']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.takeWhile(users, 'active');
    	     * // => []
    	     */
    	    function takeWhile(array, predicate) {
    	      return (array && array.length)
    	        ? baseWhile(array, getIteratee(predicate, 3))
    	        : [];
    	    }

    	    /**
    	     * Creates an array of unique values, in order, from all given arrays using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @returns {Array} Returns the new array of combined values.
    	     * @example
    	     *
    	     * _.union([2], [1, 2]);
    	     * // => [2, 1]
    	     */
    	    var union = baseRest(function(arrays) {
    	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    	    });

    	    /**
    	     * This method is like `_.union` except that it accepts `iteratee` which is
    	     * invoked for each element of each `arrays` to generate the criterion by
    	     * which uniqueness is computed. Result values are chosen from the first
    	     * array in which the value occurs. The iteratee is invoked with one argument:
    	     * (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of combined values.
    	     * @example
    	     *
    	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
    	     * // => [2.1, 1.2]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 1 }, { 'x': 2 }]
    	     */
    	    var unionBy = baseRest(function(arrays) {
    	      var iteratee = last(arrays);
    	      if (isArrayLikeObject(iteratee)) {
    	        iteratee = undefined$1;
    	      }
    	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    	    });

    	    /**
    	     * This method is like `_.union` except that it accepts `comparator` which
    	     * is invoked to compare elements of `arrays`. Result values are chosen from
    	     * the first array in which the value occurs. The comparator is invoked
    	     * with two arguments: (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of combined values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.unionWith(objects, others, _.isEqual);
    	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
    	     */
    	    var unionWith = baseRest(function(arrays) {
    	      var comparator = last(arrays);
    	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
    	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
    	    });

    	    /**
    	     * Creates a duplicate-free version of an array, using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons, in which only the first occurrence of each element
    	     * is kept. The order of result values is determined by the order they occur
    	     * in the array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.uniq([2, 1, 2]);
    	     * // => [2, 1]
    	     */
    	    function uniq(array) {
    	      return (array && array.length) ? baseUniq(array) : [];
    	    }

    	    /**
    	     * This method is like `_.uniq` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the criterion by which
    	     * uniqueness is computed. The order of result values is determined by the
    	     * order they occur in the array. The iteratee is invoked with one argument:
    	     * (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
    	     * // => [2.1, 1.2]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 1 }, { 'x': 2 }]
    	     */
    	    function uniqBy(array, iteratee) {
    	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    	    }

    	    /**
    	     * This method is like `_.uniq` except that it accepts `comparator` which
    	     * is invoked to compare elements of `array`. The order of result values is
    	     * determined by the order they occur in the array.The comparator is invoked
    	     * with two arguments: (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new duplicate free array.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.uniqWith(objects, _.isEqual);
    	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
    	     */
    	    function uniqWith(array, comparator) {
    	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
    	      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
    	    }

    	    /**
    	     * This method is like `_.zip` except that it accepts an array of grouped
    	     * elements and creates an array regrouping the elements to their pre-zip
    	     * configuration.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.2.0
    	     * @category Array
    	     * @param {Array} array The array of grouped elements to process.
    	     * @returns {Array} Returns the new array of regrouped elements.
    	     * @example
    	     *
    	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
    	     * // => [['a', 1, true], ['b', 2, false]]
    	     *
    	     * _.unzip(zipped);
    	     * // => [['a', 'b'], [1, 2], [true, false]]
    	     */
    	    function unzip(array) {
    	      if (!(array && array.length)) {
    	        return [];
    	      }
    	      var length = 0;
    	      array = arrayFilter(array, function(group) {
    	        if (isArrayLikeObject(group)) {
    	          length = nativeMax(group.length, length);
    	          return true;
    	        }
    	      });
    	      return baseTimes(length, function(index) {
    	        return arrayMap(array, baseProperty(index));
    	      });
    	    }

    	    /**
    	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
    	     * how regrouped values should be combined. The iteratee is invoked with the
    	     * elements of each group: (...group).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.8.0
    	     * @category Array
    	     * @param {Array} array The array of grouped elements to process.
    	     * @param {Function} [iteratee=_.identity] The function to combine
    	     *  regrouped values.
    	     * @returns {Array} Returns the new array of regrouped elements.
    	     * @example
    	     *
    	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
    	     * // => [[1, 10, 100], [2, 20, 200]]
    	     *
    	     * _.unzipWith(zipped, _.add);
    	     * // => [3, 30, 300]
    	     */
    	    function unzipWith(array, iteratee) {
    	      if (!(array && array.length)) {
    	        return [];
    	      }
    	      var result = unzip(array);
    	      if (iteratee == null) {
    	        return result;
    	      }
    	      return arrayMap(result, function(group) {
    	        return apply(iteratee, undefined$1, group);
    	      });
    	    }

    	    /**
    	     * Creates an array excluding all given values using
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * for equality comparisons.
    	     *
    	     * **Note:** Unlike `_.pull`, this method returns a new array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {Array} array The array to inspect.
    	     * @param {...*} [values] The values to exclude.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @see _.difference, _.xor
    	     * @example
    	     *
    	     * _.without([2, 1, 2, 3], 1, 2);
    	     * // => [3]
    	     */
    	    var without = baseRest(function(array, values) {
    	      return isArrayLikeObject(array)
    	        ? baseDifference(array, values)
    	        : [];
    	    });

    	    /**
    	     * Creates an array of unique values that is the
    	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
    	     * of the given arrays. The order of result values is determined by the order
    	     * they occur in the arrays.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @see _.difference, _.without
    	     * @example
    	     *
    	     * _.xor([2, 1], [2, 3]);
    	     * // => [1, 3]
    	     */
    	    var xor = baseRest(function(arrays) {
    	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    	    });

    	    /**
    	     * This method is like `_.xor` except that it accepts `iteratee` which is
    	     * invoked for each element of each `arrays` to generate the criterion by
    	     * which by which they're compared. The order of result values is determined
    	     * by the order they occur in the arrays. The iteratee is invoked with one
    	     * argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
    	     * // => [1.2, 3.4]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
    	     * // => [{ 'x': 2 }]
    	     */
    	    var xorBy = baseRest(function(arrays) {
    	      var iteratee = last(arrays);
    	      if (isArrayLikeObject(iteratee)) {
    	        iteratee = undefined$1;
    	      }
    	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    	    });

    	    /**
    	     * This method is like `_.xor` except that it accepts `comparator` which is
    	     * invoked to compare elements of `arrays`. The order of result values is
    	     * determined by the order they occur in the arrays. The comparator is invoked
    	     * with two arguments: (arrVal, othVal).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to inspect.
    	     * @param {Function} [comparator] The comparator invoked per element.
    	     * @returns {Array} Returns the new array of filtered values.
    	     * @example
    	     *
    	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
    	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
    	     *
    	     * _.xorWith(objects, others, _.isEqual);
    	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
    	     */
    	    var xorWith = baseRest(function(arrays) {
    	      var comparator = last(arrays);
    	      comparator = typeof comparator == 'function' ? comparator : undefined$1;
    	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
    	    });

    	    /**
    	     * Creates an array of grouped elements, the first of which contains the
    	     * first elements of the given arrays, the second of which contains the
    	     * second elements of the given arrays, and so on.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to process.
    	     * @returns {Array} Returns the new array of grouped elements.
    	     * @example
    	     *
    	     * _.zip(['a', 'b'], [1, 2], [true, false]);
    	     * // => [['a', 1, true], ['b', 2, false]]
    	     */
    	    var zip = baseRest(unzip);

    	    /**
    	     * This method is like `_.fromPairs` except that it accepts two arrays,
    	     * one of property identifiers and one of corresponding values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.4.0
    	     * @category Array
    	     * @param {Array} [props=[]] The property identifiers.
    	     * @param {Array} [values=[]] The property values.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * _.zipObject(['a', 'b'], [1, 2]);
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    function zipObject(props, values) {
    	      return baseZipObject(props || [], values || [], assignValue);
    	    }

    	    /**
    	     * This method is like `_.zipObject` except that it supports property paths.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.1.0
    	     * @category Array
    	     * @param {Array} [props=[]] The property identifiers.
    	     * @param {Array} [values=[]] The property values.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
    	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
    	     */
    	    function zipObjectDeep(props, values) {
    	      return baseZipObject(props || [], values || [], baseSet);
    	    }

    	    /**
    	     * This method is like `_.zip` except that it accepts `iteratee` to specify
    	     * how grouped values should be combined. The iteratee is invoked with the
    	     * elements of each group: (...group).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.8.0
    	     * @category Array
    	     * @param {...Array} [arrays] The arrays to process.
    	     * @param {Function} [iteratee=_.identity] The function to combine
    	     *  grouped values.
    	     * @returns {Array} Returns the new array of grouped elements.
    	     * @example
    	     *
    	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
    	     *   return a + b + c;
    	     * });
    	     * // => [111, 222]
    	     */
    	    var zipWith = baseRest(function(arrays) {
    	      var length = arrays.length,
    	          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

    	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
    	      return unzipWith(arrays, iteratee);
    	    });

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
    	     * chain sequences enabled. The result of such sequences must be unwrapped
    	     * with `_#value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.3.0
    	     * @category Seq
    	     * @param {*} value The value to wrap.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'age': 36 },
    	     *   { 'user': 'fred',    'age': 40 },
    	     *   { 'user': 'pebbles', 'age': 1 }
    	     * ];
    	     *
    	     * var youngest = _
    	     *   .chain(users)
    	     *   .sortBy('age')
    	     *   .map(function(o) {
    	     *     return o.user + ' is ' + o.age;
    	     *   })
    	     *   .head()
    	     *   .value();
    	     * // => 'pebbles is 1'
    	     */
    	    function chain(value) {
    	      var result = lodash(value);
    	      result.__chain__ = true;
    	      return result;
    	    }

    	    /**
    	     * This method invokes `interceptor` and returns `value`. The interceptor
    	     * is invoked with one argument; (value). The purpose of this method is to
    	     * "tap into" a method chain sequence in order to modify intermediate results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Seq
    	     * @param {*} value The value to provide to `interceptor`.
    	     * @param {Function} interceptor The function to invoke.
    	     * @returns {*} Returns `value`.
    	     * @example
    	     *
    	     * _([1, 2, 3])
    	     *  .tap(function(array) {
    	     *    // Mutate input array.
    	     *    array.pop();
    	     *  })
    	     *  .reverse()
    	     *  .value();
    	     * // => [2, 1]
    	     */
    	    function tap(value, interceptor) {
    	      interceptor(value);
    	      return value;
    	    }

    	    /**
    	     * This method is like `_.tap` except that it returns the result of `interceptor`.
    	     * The purpose of this method is to "pass thru" values replacing intermediate
    	     * results in a method chain sequence.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Seq
    	     * @param {*} value The value to provide to `interceptor`.
    	     * @param {Function} interceptor The function to invoke.
    	     * @returns {*} Returns the result of `interceptor`.
    	     * @example
    	     *
    	     * _('  abc  ')
    	     *  .chain()
    	     *  .trim()
    	     *  .thru(function(value) {
    	     *    return [value];
    	     *  })
    	     *  .value();
    	     * // => ['abc']
    	     */
    	    function thru(value, interceptor) {
    	      return interceptor(value);
    	    }

    	    /**
    	     * This method is the wrapper version of `_.at`.
    	     *
    	     * @name at
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Seq
    	     * @param {...(string|string[])} [paths] The property paths to pick.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
    	     *
    	     * _(object).at(['a[0].b.c', 'a[1]']).value();
    	     * // => [3, 4]
    	     */
    	    var wrapperAt = flatRest(function(paths) {
    	      var length = paths.length,
    	          start = length ? paths[0] : 0,
    	          value = this.__wrapped__,
    	          interceptor = function(object) { return baseAt(object, paths); };

    	      if (length > 1 || this.__actions__.length ||
    	          !(value instanceof LazyWrapper) || !isIndex(start)) {
    	        return this.thru(interceptor);
    	      }
    	      value = value.slice(start, +start + (length ? 1 : 0));
    	      value.__actions__.push({
    	        'func': thru,
    	        'args': [interceptor],
    	        'thisArg': undefined$1
    	      });
    	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
    	        if (length && !array.length) {
    	          array.push(undefined$1);
    	        }
    	        return array;
    	      });
    	    });

    	    /**
    	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
    	     *
    	     * @name chain
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Seq
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36 },
    	     *   { 'user': 'fred',   'age': 40 }
    	     * ];
    	     *
    	     * // A sequence without explicit chaining.
    	     * _(users).head();
    	     * // => { 'user': 'barney', 'age': 36 }
    	     *
    	     * // A sequence with explicit chaining.
    	     * _(users)
    	     *   .chain()
    	     *   .head()
    	     *   .pick('user')
    	     *   .value();
    	     * // => { 'user': 'barney' }
    	     */
    	    function wrapperChain() {
    	      return chain(this);
    	    }

    	    /**
    	     * Executes the chain sequence and returns the wrapped result.
    	     *
    	     * @name commit
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Seq
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var array = [1, 2];
    	     * var wrapped = _(array).push(3);
    	     *
    	     * console.log(array);
    	     * // => [1, 2]
    	     *
    	     * wrapped = wrapped.commit();
    	     * console.log(array);
    	     * // => [1, 2, 3]
    	     *
    	     * wrapped.last();
    	     * // => 3
    	     *
    	     * console.log(array);
    	     * // => [1, 2, 3]
    	     */
    	    function wrapperCommit() {
    	      return new LodashWrapper(this.value(), this.__chain__);
    	    }

    	    /**
    	     * Gets the next value on a wrapped object following the
    	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
    	     *
    	     * @name next
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Seq
    	     * @returns {Object} Returns the next iterator value.
    	     * @example
    	     *
    	     * var wrapped = _([1, 2]);
    	     *
    	     * wrapped.next();
    	     * // => { 'done': false, 'value': 1 }
    	     *
    	     * wrapped.next();
    	     * // => { 'done': false, 'value': 2 }
    	     *
    	     * wrapped.next();
    	     * // => { 'done': true, 'value': undefined }
    	     */
    	    function wrapperNext() {
    	      if (this.__values__ === undefined$1) {
    	        this.__values__ = toArray(this.value());
    	      }
    	      var done = this.__index__ >= this.__values__.length,
    	          value = done ? undefined$1 : this.__values__[this.__index__++];

    	      return { 'done': done, 'value': value };
    	    }

    	    /**
    	     * Enables the wrapper to be iterable.
    	     *
    	     * @name Symbol.iterator
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Seq
    	     * @returns {Object} Returns the wrapper object.
    	     * @example
    	     *
    	     * var wrapped = _([1, 2]);
    	     *
    	     * wrapped[Symbol.iterator]() === wrapped;
    	     * // => true
    	     *
    	     * Array.from(wrapped);
    	     * // => [1, 2]
    	     */
    	    function wrapperToIterator() {
    	      return this;
    	    }

    	    /**
    	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
    	     *
    	     * @name plant
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Seq
    	     * @param {*} value The value to plant.
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var wrapped = _([1, 2]).map(square);
    	     * var other = wrapped.plant([3, 4]);
    	     *
    	     * other.value();
    	     * // => [9, 16]
    	     *
    	     * wrapped.value();
    	     * // => [1, 4]
    	     */
    	    function wrapperPlant(value) {
    	      var result,
    	          parent = this;

    	      while (parent instanceof baseLodash) {
    	        var clone = wrapperClone(parent);
    	        clone.__index__ = 0;
    	        clone.__values__ = undefined$1;
    	        if (result) {
    	          previous.__wrapped__ = clone;
    	        } else {
    	          result = clone;
    	        }
    	        var previous = clone;
    	        parent = parent.__wrapped__;
    	      }
    	      previous.__wrapped__ = value;
    	      return result;
    	    }

    	    /**
    	     * This method is the wrapper version of `_.reverse`.
    	     *
    	     * **Note:** This method mutates the wrapped array.
    	     *
    	     * @name reverse
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Seq
    	     * @returns {Object} Returns the new `lodash` wrapper instance.
    	     * @example
    	     *
    	     * var array = [1, 2, 3];
    	     *
    	     * _(array).reverse().value()
    	     * // => [3, 2, 1]
    	     *
    	     * console.log(array);
    	     * // => [3, 2, 1]
    	     */
    	    function wrapperReverse() {
    	      var value = this.__wrapped__;
    	      if (value instanceof LazyWrapper) {
    	        var wrapped = value;
    	        if (this.__actions__.length) {
    	          wrapped = new LazyWrapper(this);
    	        }
    	        wrapped = wrapped.reverse();
    	        wrapped.__actions__.push({
    	          'func': thru,
    	          'args': [reverse],
    	          'thisArg': undefined$1
    	        });
    	        return new LodashWrapper(wrapped, this.__chain__);
    	      }
    	      return this.thru(reverse);
    	    }

    	    /**
    	     * Executes the chain sequence to resolve the unwrapped value.
    	     *
    	     * @name value
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @alias toJSON, valueOf
    	     * @category Seq
    	     * @returns {*} Returns the resolved unwrapped value.
    	     * @example
    	     *
    	     * _([1, 2, 3]).value();
    	     * // => [1, 2, 3]
    	     */
    	    function wrapperValue() {
    	      return baseWrapperValue(this.__wrapped__, this.__actions__);
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Creates an object composed of keys generated from the results of running
    	     * each element of `collection` thru `iteratee`. The corresponding value of
    	     * each key is the number of times the key was returned by `iteratee`. The
    	     * iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.5.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
    	     * @returns {Object} Returns the composed aggregate object.
    	     * @example
    	     *
    	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
    	     * // => { '4': 1, '6': 2 }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.countBy(['one', 'two', 'three'], 'length');
    	     * // => { '3': 2, '5': 1 }
    	     */
    	    var countBy = createAggregator(function(result, value, key) {
    	      if (hasOwnProperty.call(result, key)) {
    	        ++result[key];
    	      } else {
    	        baseAssignValue(result, key, 1);
    	      }
    	    });

    	    /**
    	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
    	     * Iteration is stopped once `predicate` returns falsey. The predicate is
    	     * invoked with three arguments: (value, index|key, collection).
    	     *
    	     * **Note:** This method returns `true` for
    	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
    	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
    	     * elements of empty collections.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.every([true, 1, null, 'yes'], Boolean);
    	     * // => false
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': false },
    	     *   { 'user': 'fred',   'age': 40, 'active': false }
    	     * ];
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.every(users, { 'user': 'barney', 'active': false });
    	     * // => false
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.every(users, ['active', false]);
    	     * // => true
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.every(users, 'active');
    	     * // => false
    	     */
    	    function every(collection, predicate, guard) {
    	      var func = isArray(collection) ? arrayEvery : baseEvery;
    	      if (guard && isIterateeCall(collection, predicate, guard)) {
    	        predicate = undefined$1;
    	      }
    	      return func(collection, getIteratee(predicate, 3));
    	    }

    	    /**
    	     * Iterates over elements of `collection`, returning an array of all elements
    	     * `predicate` returns truthy for. The predicate is invoked with three
    	     * arguments: (value, index|key, collection).
    	     *
    	     * **Note:** Unlike `_.remove`, this method returns a new array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new filtered array.
    	     * @see _.reject
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': true },
    	     *   { 'user': 'fred',   'age': 40, 'active': false }
    	     * ];
    	     *
    	     * _.filter(users, function(o) { return !o.active; });
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.filter(users, { 'age': 36, 'active': true });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.filter(users, ['active', false]);
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.filter(users, 'active');
    	     * // => objects for ['barney']
    	     *
    	     * // Combining several predicates using `_.overEvery` or `_.overSome`.
    	     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
    	     * // => objects for ['fred', 'barney']
    	     */
    	    function filter(collection, predicate) {
    	      var func = isArray(collection) ? arrayFilter : baseFilter;
    	      return func(collection, getIteratee(predicate, 3));
    	    }

    	    /**
    	     * Iterates over elements of `collection`, returning the first element
    	     * `predicate` returns truthy for. The predicate is invoked with three
    	     * arguments: (value, index|key, collection).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @returns {*} Returns the matched element, else `undefined`.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'age': 36, 'active': true },
    	     *   { 'user': 'fred',    'age': 40, 'active': false },
    	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
    	     * ];
    	     *
    	     * _.find(users, function(o) { return o.age < 40; });
    	     * // => object for 'barney'
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.find(users, { 'age': 1, 'active': true });
    	     * // => object for 'pebbles'
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.find(users, ['active', false]);
    	     * // => object for 'fred'
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.find(users, 'active');
    	     * // => object for 'barney'
    	     */
    	    var find = createFind(findIndex);

    	    /**
    	     * This method is like `_.find` except that it iterates over elements of
    	     * `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param {number} [fromIndex=collection.length-1] The index to search from.
    	     * @returns {*} Returns the matched element, else `undefined`.
    	     * @example
    	     *
    	     * _.findLast([1, 2, 3, 4], function(n) {
    	     *   return n % 2 == 1;
    	     * });
    	     * // => 3
    	     */
    	    var findLast = createFind(findLastIndex);

    	    /**
    	     * Creates a flattened array of values by running each element in `collection`
    	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
    	     * with three arguments: (value, index|key, collection).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * function duplicate(n) {
    	     *   return [n, n];
    	     * }
    	     *
    	     * _.flatMap([1, 2], duplicate);
    	     * // => [1, 1, 2, 2]
    	     */
    	    function flatMap(collection, iteratee) {
    	      return baseFlatten(map(collection, iteratee), 1);
    	    }

    	    /**
    	     * This method is like `_.flatMap` except that it recursively flattens the
    	     * mapped results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * function duplicate(n) {
    	     *   return [[[n, n]]];
    	     * }
    	     *
    	     * _.flatMapDeep([1, 2], duplicate);
    	     * // => [1, 1, 2, 2]
    	     */
    	    function flatMapDeep(collection, iteratee) {
    	      return baseFlatten(map(collection, iteratee), INFINITY);
    	    }

    	    /**
    	     * This method is like `_.flatMap` except that it recursively flattens the
    	     * mapped results up to `depth` times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @param {number} [depth=1] The maximum recursion depth.
    	     * @returns {Array} Returns the new flattened array.
    	     * @example
    	     *
    	     * function duplicate(n) {
    	     *   return [[[n, n]]];
    	     * }
    	     *
    	     * _.flatMapDepth([1, 2], duplicate, 2);
    	     * // => [[1, 1], [2, 2]]
    	     */
    	    function flatMapDepth(collection, iteratee, depth) {
    	      depth = depth === undefined$1 ? 1 : toInteger(depth);
    	      return baseFlatten(map(collection, iteratee), depth);
    	    }

    	    /**
    	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
    	     * The iteratee is invoked with three arguments: (value, index|key, collection).
    	     * Iteratee functions may exit iteration early by explicitly returning `false`.
    	     *
    	     * **Note:** As with other "Collections" methods, objects with a "length"
    	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
    	     * or `_.forOwn` for object iteration.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @alias each
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     * @see _.forEachRight
    	     * @example
    	     *
    	     * _.forEach([1, 2], function(value) {
    	     *   console.log(value);
    	     * });
    	     * // => Logs `1` then `2`.
    	     *
    	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
    	     */
    	    function forEach(collection, iteratee) {
    	      var func = isArray(collection) ? arrayEach : baseEach;
    	      return func(collection, getIteratee(iteratee, 3));
    	    }

    	    /**
    	     * This method is like `_.forEach` except that it iterates over elements of
    	     * `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @alias eachRight
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array|Object} Returns `collection`.
    	     * @see _.forEach
    	     * @example
    	     *
    	     * _.forEachRight([1, 2], function(value) {
    	     *   console.log(value);
    	     * });
    	     * // => Logs `2` then `1`.
    	     */
    	    function forEachRight(collection, iteratee) {
    	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
    	      return func(collection, getIteratee(iteratee, 3));
    	    }

    	    /**
    	     * Creates an object composed of keys generated from the results of running
    	     * each element of `collection` thru `iteratee`. The order of grouped values
    	     * is determined by the order they occur in `collection`. The corresponding
    	     * value of each key is an array of elements responsible for generating the
    	     * key. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
    	     * @returns {Object} Returns the composed aggregate object.
    	     * @example
    	     *
    	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
    	     * // => { '4': [4.2], '6': [6.1, 6.3] }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.groupBy(['one', 'two', 'three'], 'length');
    	     * // => { '3': ['one', 'two'], '5': ['three'] }
    	     */
    	    var groupBy = createAggregator(function(result, value, key) {
    	      if (hasOwnProperty.call(result, key)) {
    	        result[key].push(value);
    	      } else {
    	        baseAssignValue(result, key, [value]);
    	      }
    	    });

    	    /**
    	     * Checks if `value` is in `collection`. If `collection` is a string, it's
    	     * checked for a substring of `value`, otherwise
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
    	     * the offset from the end of `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object|string} collection The collection to inspect.
    	     * @param {*} value The value to search for.
    	     * @param {number} [fromIndex=0] The index to search from.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
    	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
    	     * @example
    	     *
    	     * _.includes([1, 2, 3], 1);
    	     * // => true
    	     *
    	     * _.includes([1, 2, 3], 1, 2);
    	     * // => false
    	     *
    	     * _.includes({ 'a': 1, 'b': 2 }, 1);
    	     * // => true
    	     *
    	     * _.includes('abcd', 'bc');
    	     * // => true
    	     */
    	    function includes(collection, value, fromIndex, guard) {
    	      collection = isArrayLike(collection) ? collection : values(collection);
    	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

    	      var length = collection.length;
    	      if (fromIndex < 0) {
    	        fromIndex = nativeMax(length + fromIndex, 0);
    	      }
    	      return isString(collection)
    	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
    	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    	    }

    	    /**
    	     * Invokes the method at `path` of each element in `collection`, returning
    	     * an array of the results of each invoked method. Any additional arguments
    	     * are provided to each invoked method. If `path` is a function, it's invoked
    	     * for, and `this` bound to, each element in `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array|Function|string} path The path of the method to invoke or
    	     *  the function invoked per iteration.
    	     * @param {...*} [args] The arguments to invoke each method with.
    	     * @returns {Array} Returns the array of results.
    	     * @example
    	     *
    	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
    	     * // => [[1, 5, 7], [1, 2, 3]]
    	     *
    	     * _.invokeMap([123, 456], String.prototype.split, '');
    	     * // => [['1', '2', '3'], ['4', '5', '6']]
    	     */
    	    var invokeMap = baseRest(function(collection, path, args) {
    	      var index = -1,
    	          isFunc = typeof path == 'function',
    	          result = isArrayLike(collection) ? Array(collection.length) : [];

    	      baseEach(collection, function(value) {
    	        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
    	      });
    	      return result;
    	    });

    	    /**
    	     * Creates an object composed of keys generated from the results of running
    	     * each element of `collection` thru `iteratee`. The corresponding value of
    	     * each key is the last element responsible for generating the key. The
    	     * iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
    	     * @returns {Object} Returns the composed aggregate object.
    	     * @example
    	     *
    	     * var array = [
    	     *   { 'dir': 'left', 'code': 97 },
    	     *   { 'dir': 'right', 'code': 100 }
    	     * ];
    	     *
    	     * _.keyBy(array, function(o) {
    	     *   return String.fromCharCode(o.code);
    	     * });
    	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
    	     *
    	     * _.keyBy(array, 'dir');
    	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
    	     */
    	    var keyBy = createAggregator(function(result, value, key) {
    	      baseAssignValue(result, key, value);
    	    });

    	    /**
    	     * Creates an array of values by running each element in `collection` thru
    	     * `iteratee`. The iteratee is invoked with three arguments:
    	     * (value, index|key, collection).
    	     *
    	     * Many lodash methods are guarded to work as iteratees for methods like
    	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
    	     *
    	     * The guarded methods are:
    	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
    	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
    	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
    	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new mapped array.
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * _.map([4, 8], square);
    	     * // => [16, 64]
    	     *
    	     * _.map({ 'a': 4, 'b': 8 }, square);
    	     * // => [16, 64] (iteration order is not guaranteed)
    	     *
    	     * var users = [
    	     *   { 'user': 'barney' },
    	     *   { 'user': 'fred' }
    	     * ];
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.map(users, 'user');
    	     * // => ['barney', 'fred']
    	     */
    	    function map(collection, iteratee) {
    	      var func = isArray(collection) ? arrayMap : baseMap;
    	      return func(collection, getIteratee(iteratee, 3));
    	    }

    	    /**
    	     * This method is like `_.sortBy` except that it allows specifying the sort
    	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
    	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
    	     * descending or "asc" for ascending sort order of corresponding values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
    	     *  The iteratees to sort by.
    	     * @param {string[]} [orders] The sort orders of `iteratees`.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
    	     * @returns {Array} Returns the new sorted array.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'fred',   'age': 48 },
    	     *   { 'user': 'barney', 'age': 34 },
    	     *   { 'user': 'fred',   'age': 40 },
    	     *   { 'user': 'barney', 'age': 36 }
    	     * ];
    	     *
    	     * // Sort by `user` in ascending order and by `age` in descending order.
    	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
    	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
    	     */
    	    function orderBy(collection, iteratees, orders, guard) {
    	      if (collection == null) {
    	        return [];
    	      }
    	      if (!isArray(iteratees)) {
    	        iteratees = iteratees == null ? [] : [iteratees];
    	      }
    	      orders = guard ? undefined$1 : orders;
    	      if (!isArray(orders)) {
    	        orders = orders == null ? [] : [orders];
    	      }
    	      return baseOrderBy(collection, iteratees, orders);
    	    }

    	    /**
    	     * Creates an array of elements split into two groups, the first of which
    	     * contains elements `predicate` returns truthy for, the second of which
    	     * contains elements `predicate` returns falsey for. The predicate is
    	     * invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the array of grouped elements.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney',  'age': 36, 'active': false },
    	     *   { 'user': 'fred',    'age': 40, 'active': true },
    	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
    	     * ];
    	     *
    	     * _.partition(users, function(o) { return o.active; });
    	     * // => objects for [['fred'], ['barney', 'pebbles']]
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.partition(users, { 'age': 1, 'active': false });
    	     * // => objects for [['pebbles'], ['barney', 'fred']]
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.partition(users, ['active', false]);
    	     * // => objects for [['barney', 'pebbles'], ['fred']]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.partition(users, 'active');
    	     * // => objects for [['fred'], ['barney', 'pebbles']]
    	     */
    	    var partition = createAggregator(function(result, value, key) {
    	      result[key ? 0 : 1].push(value);
    	    }, function() { return [[], []]; });

    	    /**
    	     * Reduces `collection` to a value which is the accumulated result of running
    	     * each element in `collection` thru `iteratee`, where each successive
    	     * invocation is supplied the return value of the previous. If `accumulator`
    	     * is not given, the first element of `collection` is used as the initial
    	     * value. The iteratee is invoked with four arguments:
    	     * (accumulator, value, index|key, collection).
    	     *
    	     * Many lodash methods are guarded to work as iteratees for methods like
    	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
    	     *
    	     * The guarded methods are:
    	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
    	     * and `sortBy`
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @param {*} [accumulator] The initial value.
    	     * @returns {*} Returns the accumulated value.
    	     * @see _.reduceRight
    	     * @example
    	     *
    	     * _.reduce([1, 2], function(sum, n) {
    	     *   return sum + n;
    	     * }, 0);
    	     * // => 3
    	     *
    	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
    	     *   (result[value] || (result[value] = [])).push(key);
    	     *   return result;
    	     * }, {});
    	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
    	     */
    	    function reduce(collection, iteratee, accumulator) {
    	      var func = isArray(collection) ? arrayReduce : baseReduce,
    	          initAccum = arguments.length < 3;

    	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    	    }

    	    /**
    	     * This method is like `_.reduce` except that it iterates over elements of
    	     * `collection` from right to left.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @param {*} [accumulator] The initial value.
    	     * @returns {*} Returns the accumulated value.
    	     * @see _.reduce
    	     * @example
    	     *
    	     * var array = [[0, 1], [2, 3], [4, 5]];
    	     *
    	     * _.reduceRight(array, function(flattened, other) {
    	     *   return flattened.concat(other);
    	     * }, []);
    	     * // => [4, 5, 2, 3, 0, 1]
    	     */
    	    function reduceRight(collection, iteratee, accumulator) {
    	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
    	          initAccum = arguments.length < 3;

    	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    	    }

    	    /**
    	     * The opposite of `_.filter`; this method returns the elements of `collection`
    	     * that `predicate` does **not** return truthy for.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the new filtered array.
    	     * @see _.filter
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': false },
    	     *   { 'user': 'fred',   'age': 40, 'active': true }
    	     * ];
    	     *
    	     * _.reject(users, function(o) { return !o.active; });
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.reject(users, { 'age': 40, 'active': true });
    	     * // => objects for ['barney']
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.reject(users, ['active', false]);
    	     * // => objects for ['fred']
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.reject(users, 'active');
    	     * // => objects for ['barney']
    	     */
    	    function reject(collection, predicate) {
    	      var func = isArray(collection) ? arrayFilter : baseFilter;
    	      return func(collection, negate(getIteratee(predicate, 3)));
    	    }

    	    /**
    	     * Gets a random element from `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to sample.
    	     * @returns {*} Returns the random element.
    	     * @example
    	     *
    	     * _.sample([1, 2, 3, 4]);
    	     * // => 2
    	     */
    	    function sample(collection) {
    	      var func = isArray(collection) ? arraySample : baseSample;
    	      return func(collection);
    	    }

    	    /**
    	     * Gets `n` random elements at unique keys from `collection` up to the
    	     * size of `collection`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to sample.
    	     * @param {number} [n=1] The number of elements to sample.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the random elements.
    	     * @example
    	     *
    	     * _.sampleSize([1, 2, 3], 2);
    	     * // => [3, 1]
    	     *
    	     * _.sampleSize([1, 2, 3], 4);
    	     * // => [2, 3, 1]
    	     */
    	    function sampleSize(collection, n, guard) {
    	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
    	        n = 1;
    	      } else {
    	        n = toInteger(n);
    	      }
    	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
    	      return func(collection, n);
    	    }

    	    /**
    	     * Creates an array of shuffled values, using a version of the
    	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to shuffle.
    	     * @returns {Array} Returns the new shuffled array.
    	     * @example
    	     *
    	     * _.shuffle([1, 2, 3, 4]);
    	     * // => [4, 1, 3, 2]
    	     */
    	    function shuffle(collection) {
    	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
    	      return func(collection);
    	    }

    	    /**
    	     * Gets the size of `collection` by returning its length for array-like
    	     * values or the number of own enumerable string keyed properties for objects.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object|string} collection The collection to inspect.
    	     * @returns {number} Returns the collection size.
    	     * @example
    	     *
    	     * _.size([1, 2, 3]);
    	     * // => 3
    	     *
    	     * _.size({ 'a': 1, 'b': 2 });
    	     * // => 2
    	     *
    	     * _.size('pebbles');
    	     * // => 7
    	     */
    	    function size(collection) {
    	      if (collection == null) {
    	        return 0;
    	      }
    	      if (isArrayLike(collection)) {
    	        return isString(collection) ? stringSize(collection) : collection.length;
    	      }
    	      var tag = getTag(collection);
    	      if (tag == mapTag || tag == setTag) {
    	        return collection.size;
    	      }
    	      return baseKeys(collection).length;
    	    }

    	    /**
    	     * Checks if `predicate` returns truthy for **any** element of `collection`.
    	     * Iteration is stopped once `predicate` returns truthy. The predicate is
    	     * invoked with three arguments: (value, index|key, collection).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {boolean} Returns `true` if any element passes the predicate check,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.some([null, 0, 'yes', false], Boolean);
    	     * // => true
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'active': true },
    	     *   { 'user': 'fred',   'active': false }
    	     * ];
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.some(users, { 'user': 'barney', 'active': false });
    	     * // => false
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.some(users, ['active', false]);
    	     * // => true
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.some(users, 'active');
    	     * // => true
    	     */
    	    function some(collection, predicate, guard) {
    	      var func = isArray(collection) ? arraySome : baseSome;
    	      if (guard && isIterateeCall(collection, predicate, guard)) {
    	        predicate = undefined$1;
    	      }
    	      return func(collection, getIteratee(predicate, 3));
    	    }

    	    /**
    	     * Creates an array of elements, sorted in ascending order by the results of
    	     * running each element in a collection thru each iteratee. This method
    	     * performs a stable sort, that is, it preserves the original sort order of
    	     * equal elements. The iteratees are invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Collection
    	     * @param {Array|Object} collection The collection to iterate over.
    	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
    	     *  The iteratees to sort by.
    	     * @returns {Array} Returns the new sorted array.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'fred',   'age': 48 },
    	     *   { 'user': 'barney', 'age': 36 },
    	     *   { 'user': 'fred',   'age': 30 },
    	     *   { 'user': 'barney', 'age': 34 }
    	     * ];
    	     *
    	     * _.sortBy(users, [function(o) { return o.user; }]);
    	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
    	     *
    	     * _.sortBy(users, ['user', 'age']);
    	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
    	     */
    	    var sortBy = baseRest(function(collection, iteratees) {
    	      if (collection == null) {
    	        return [];
    	      }
    	      var length = iteratees.length;
    	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
    	        iteratees = [];
    	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
    	        iteratees = [iteratees[0]];
    	      }
    	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    	    });

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Gets the timestamp of the number of milliseconds that have elapsed since
    	     * the Unix epoch (1 January 1970 00:00:00 UTC).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Date
    	     * @returns {number} Returns the timestamp.
    	     * @example
    	     *
    	     * _.defer(function(stamp) {
    	     *   console.log(_.now() - stamp);
    	     * }, _.now());
    	     * // => Logs the number of milliseconds it took for the deferred invocation.
    	     */
    	    var now = ctxNow || function() {
    	      return root.Date.now();
    	    };

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * The opposite of `_.before`; this method creates a function that invokes
    	     * `func` once it's called `n` or more times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {number} n The number of calls before `func` is invoked.
    	     * @param {Function} func The function to restrict.
    	     * @returns {Function} Returns the new restricted function.
    	     * @example
    	     *
    	     * var saves = ['profile', 'settings'];
    	     *
    	     * var done = _.after(saves.length, function() {
    	     *   console.log('done saving!');
    	     * });
    	     *
    	     * _.forEach(saves, function(type) {
    	     *   asyncSave({ 'type': type, 'complete': done });
    	     * });
    	     * // => Logs 'done saving!' after the two async saves have completed.
    	     */
    	    function after(n, func) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      n = toInteger(n);
    	      return function() {
    	        if (--n < 1) {
    	          return func.apply(this, arguments);
    	        }
    	      };
    	    }

    	    /**
    	     * Creates a function that invokes `func`, with up to `n` arguments,
    	     * ignoring any additional arguments.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} func The function to cap arguments for.
    	     * @param {number} [n=func.length] The arity cap.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the new capped function.
    	     * @example
    	     *
    	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
    	     * // => [6, 8, 10]
    	     */
    	    function ary(func, n, guard) {
    	      n = guard ? undefined$1 : n;
    	      n = (func && n == null) ? func.length : n;
    	      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
    	    }

    	    /**
    	     * Creates a function that invokes `func`, with the `this` binding and arguments
    	     * of the created function, while it's called less than `n` times. Subsequent
    	     * calls to the created function return the result of the last `func` invocation.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {number} n The number of calls at which `func` is no longer invoked.
    	     * @param {Function} func The function to restrict.
    	     * @returns {Function} Returns the new restricted function.
    	     * @example
    	     *
    	     * jQuery(element).on('click', _.before(5, addContactToList));
    	     * // => Allows adding up to 4 contacts to the list.
    	     */
    	    function before(n, func) {
    	      var result;
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      n = toInteger(n);
    	      return function() {
    	        if (--n > 0) {
    	          result = func.apply(this, arguments);
    	        }
    	        if (n <= 1) {
    	          func = undefined$1;
    	        }
    	        return result;
    	      };
    	    }

    	    /**
    	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
    	     * and `partials` prepended to the arguments it receives.
    	     *
    	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
    	     * may be used as a placeholder for partially applied arguments.
    	     *
    	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
    	     * property of bound functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to bind.
    	     * @param {*} thisArg The `this` binding of `func`.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new bound function.
    	     * @example
    	     *
    	     * function greet(greeting, punctuation) {
    	     *   return greeting + ' ' + this.user + punctuation;
    	     * }
    	     *
    	     * var object = { 'user': 'fred' };
    	     *
    	     * var bound = _.bind(greet, object, 'hi');
    	     * bound('!');
    	     * // => 'hi fred!'
    	     *
    	     * // Bound with placeholders.
    	     * var bound = _.bind(greet, object, _, '!');
    	     * bound('hi');
    	     * // => 'hi fred!'
    	     */
    	    var bind = baseRest(function(func, thisArg, partials) {
    	      var bitmask = WRAP_BIND_FLAG;
    	      if (partials.length) {
    	        var holders = replaceHolders(partials, getHolder(bind));
    	        bitmask |= WRAP_PARTIAL_FLAG;
    	      }
    	      return createWrap(func, bitmask, thisArg, partials, holders);
    	    });

    	    /**
    	     * Creates a function that invokes the method at `object[key]` with `partials`
    	     * prepended to the arguments it receives.
    	     *
    	     * This method differs from `_.bind` by allowing bound functions to reference
    	     * methods that may be redefined or don't yet exist. See
    	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
    	     * for more details.
    	     *
    	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for partially applied arguments.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.10.0
    	     * @category Function
    	     * @param {Object} object The object to invoke the method on.
    	     * @param {string} key The key of the method.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new bound function.
    	     * @example
    	     *
    	     * var object = {
    	     *   'user': 'fred',
    	     *   'greet': function(greeting, punctuation) {
    	     *     return greeting + ' ' + this.user + punctuation;
    	     *   }
    	     * };
    	     *
    	     * var bound = _.bindKey(object, 'greet', 'hi');
    	     * bound('!');
    	     * // => 'hi fred!'
    	     *
    	     * object.greet = function(greeting, punctuation) {
    	     *   return greeting + 'ya ' + this.user + punctuation;
    	     * };
    	     *
    	     * bound('!');
    	     * // => 'hiya fred!'
    	     *
    	     * // Bound with placeholders.
    	     * var bound = _.bindKey(object, 'greet', _, '!');
    	     * bound('hi');
    	     * // => 'hiya fred!'
    	     */
    	    var bindKey = baseRest(function(object, key, partials) {
    	      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
    	      if (partials.length) {
    	        var holders = replaceHolders(partials, getHolder(bindKey));
    	        bitmask |= WRAP_PARTIAL_FLAG;
    	      }
    	      return createWrap(key, bitmask, object, partials, holders);
    	    });

    	    /**
    	     * Creates a function that accepts arguments of `func` and either invokes
    	     * `func` returning its result, if at least `arity` number of arguments have
    	     * been provided, or returns a function that accepts the remaining `func`
    	     * arguments, and so on. The arity of `func` may be specified if `func.length`
    	     * is not sufficient.
    	     *
    	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
    	     * may be used as a placeholder for provided arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of curried functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Function
    	     * @param {Function} func The function to curry.
    	     * @param {number} [arity=func.length] The arity of `func`.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the new curried function.
    	     * @example
    	     *
    	     * var abc = function(a, b, c) {
    	     *   return [a, b, c];
    	     * };
    	     *
    	     * var curried = _.curry(abc);
    	     *
    	     * curried(1)(2)(3);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(1, 2)(3);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(1, 2, 3);
    	     * // => [1, 2, 3]
    	     *
    	     * // Curried with placeholders.
    	     * curried(1)(_, 3)(2);
    	     * // => [1, 2, 3]
    	     */
    	    function curry(func, arity, guard) {
    	      arity = guard ? undefined$1 : arity;
    	      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
    	      result.placeholder = curry.placeholder;
    	      return result;
    	    }

    	    /**
    	     * This method is like `_.curry` except that arguments are applied to `func`
    	     * in the manner of `_.partialRight` instead of `_.partial`.
    	     *
    	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for provided arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of curried functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} func The function to curry.
    	     * @param {number} [arity=func.length] The arity of `func`.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the new curried function.
    	     * @example
    	     *
    	     * var abc = function(a, b, c) {
    	     *   return [a, b, c];
    	     * };
    	     *
    	     * var curried = _.curryRight(abc);
    	     *
    	     * curried(3)(2)(1);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(2, 3)(1);
    	     * // => [1, 2, 3]
    	     *
    	     * curried(1, 2, 3);
    	     * // => [1, 2, 3]
    	     *
    	     * // Curried with placeholders.
    	     * curried(3)(1, _)(2);
    	     * // => [1, 2, 3]
    	     */
    	    function curryRight(func, arity, guard) {
    	      arity = guard ? undefined$1 : arity;
    	      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
    	      result.placeholder = curryRight.placeholder;
    	      return result;
    	    }

    	    /**
    	     * Creates a debounced function that delays invoking `func` until after `wait`
    	     * milliseconds have elapsed since the last time the debounced function was
    	     * invoked. The debounced function comes with a `cancel` method to cancel
    	     * delayed `func` invocations and a `flush` method to immediately invoke them.
    	     * Provide `options` to indicate whether `func` should be invoked on the
    	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
    	     * with the last arguments provided to the debounced function. Subsequent
    	     * calls to the debounced function return the result of the last `func`
    	     * invocation.
    	     *
    	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
    	     * invoked on the trailing edge of the timeout only if the debounced function
    	     * is invoked more than once during the `wait` timeout.
    	     *
    	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
    	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
    	     *
    	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
    	     * for details over the differences between `_.debounce` and `_.throttle`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to debounce.
    	     * @param {number} [wait=0] The number of milliseconds to delay.
    	     * @param {Object} [options={}] The options object.
    	     * @param {boolean} [options.leading=false]
    	     *  Specify invoking on the leading edge of the timeout.
    	     * @param {number} [options.maxWait]
    	     *  The maximum time `func` is allowed to be delayed before it's invoked.
    	     * @param {boolean} [options.trailing=true]
    	     *  Specify invoking on the trailing edge of the timeout.
    	     * @returns {Function} Returns the new debounced function.
    	     * @example
    	     *
    	     * // Avoid costly calculations while the window size is in flux.
    	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
    	     *
    	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
    	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
    	     *   'leading': true,
    	     *   'trailing': false
    	     * }));
    	     *
    	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
    	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
    	     * var source = new EventSource('/stream');
    	     * jQuery(source).on('message', debounced);
    	     *
    	     * // Cancel the trailing debounced invocation.
    	     * jQuery(window).on('popstate', debounced.cancel);
    	     */
    	    function debounce(func, wait, options) {
    	      var lastArgs,
    	          lastThis,
    	          maxWait,
    	          result,
    	          timerId,
    	          lastCallTime,
    	          lastInvokeTime = 0,
    	          leading = false,
    	          maxing = false,
    	          trailing = true;

    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      wait = toNumber(wait) || 0;
    	      if (isObject(options)) {
    	        leading = !!options.leading;
    	        maxing = 'maxWait' in options;
    	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    	        trailing = 'trailing' in options ? !!options.trailing : trailing;
    	      }

    	      function invokeFunc(time) {
    	        var args = lastArgs,
    	            thisArg = lastThis;

    	        lastArgs = lastThis = undefined$1;
    	        lastInvokeTime = time;
    	        result = func.apply(thisArg, args);
    	        return result;
    	      }

    	      function leadingEdge(time) {
    	        // Reset any `maxWait` timer.
    	        lastInvokeTime = time;
    	        // Start the timer for the trailing edge.
    	        timerId = setTimeout(timerExpired, wait);
    	        // Invoke the leading edge.
    	        return leading ? invokeFunc(time) : result;
    	      }

    	      function remainingWait(time) {
    	        var timeSinceLastCall = time - lastCallTime,
    	            timeSinceLastInvoke = time - lastInvokeTime,
    	            timeWaiting = wait - timeSinceLastCall;

    	        return maxing
    	          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
    	          : timeWaiting;
    	      }

    	      function shouldInvoke(time) {
    	        var timeSinceLastCall = time - lastCallTime,
    	            timeSinceLastInvoke = time - lastInvokeTime;

    	        // Either this is the first call, activity has stopped and we're at the
    	        // trailing edge, the system time has gone backwards and we're treating
    	        // it as the trailing edge, or we've hit the `maxWait` limit.
    	        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
    	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    	      }

    	      function timerExpired() {
    	        var time = now();
    	        if (shouldInvoke(time)) {
    	          return trailingEdge(time);
    	        }
    	        // Restart the timer.
    	        timerId = setTimeout(timerExpired, remainingWait(time));
    	      }

    	      function trailingEdge(time) {
    	        timerId = undefined$1;

    	        // Only invoke if we have `lastArgs` which means `func` has been
    	        // debounced at least once.
    	        if (trailing && lastArgs) {
    	          return invokeFunc(time);
    	        }
    	        lastArgs = lastThis = undefined$1;
    	        return result;
    	      }

    	      function cancel() {
    	        if (timerId !== undefined$1) {
    	          clearTimeout(timerId);
    	        }
    	        lastInvokeTime = 0;
    	        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
    	      }

    	      function flush() {
    	        return timerId === undefined$1 ? result : trailingEdge(now());
    	      }

    	      function debounced() {
    	        var time = now(),
    	            isInvoking = shouldInvoke(time);

    	        lastArgs = arguments;
    	        lastThis = this;
    	        lastCallTime = time;

    	        if (isInvoking) {
    	          if (timerId === undefined$1) {
    	            return leadingEdge(lastCallTime);
    	          }
    	          if (maxing) {
    	            // Handle invocations in a tight loop.
    	            clearTimeout(timerId);
    	            timerId = setTimeout(timerExpired, wait);
    	            return invokeFunc(lastCallTime);
    	          }
    	        }
    	        if (timerId === undefined$1) {
    	          timerId = setTimeout(timerExpired, wait);
    	        }
    	        return result;
    	      }
    	      debounced.cancel = cancel;
    	      debounced.flush = flush;
    	      return debounced;
    	    }

    	    /**
    	     * Defers invoking the `func` until the current call stack has cleared. Any
    	     * additional arguments are provided to `func` when it's invoked.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to defer.
    	     * @param {...*} [args] The arguments to invoke `func` with.
    	     * @returns {number} Returns the timer id.
    	     * @example
    	     *
    	     * _.defer(function(text) {
    	     *   console.log(text);
    	     * }, 'deferred');
    	     * // => Logs 'deferred' after one millisecond.
    	     */
    	    var defer = baseRest(function(func, args) {
    	      return baseDelay(func, 1, args);
    	    });

    	    /**
    	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
    	     * provided to `func` when it's invoked.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to delay.
    	     * @param {number} wait The number of milliseconds to delay invocation.
    	     * @param {...*} [args] The arguments to invoke `func` with.
    	     * @returns {number} Returns the timer id.
    	     * @example
    	     *
    	     * _.delay(function(text) {
    	     *   console.log(text);
    	     * }, 1000, 'later');
    	     * // => Logs 'later' after one second.
    	     */
    	    var delay = baseRest(function(func, wait, args) {
    	      return baseDelay(func, toNumber(wait) || 0, args);
    	    });

    	    /**
    	     * Creates a function that invokes `func` with arguments reversed.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Function
    	     * @param {Function} func The function to flip arguments for.
    	     * @returns {Function} Returns the new flipped function.
    	     * @example
    	     *
    	     * var flipped = _.flip(function() {
    	     *   return _.toArray(arguments);
    	     * });
    	     *
    	     * flipped('a', 'b', 'c', 'd');
    	     * // => ['d', 'c', 'b', 'a']
    	     */
    	    function flip(func) {
    	      return createWrap(func, WRAP_FLIP_FLAG);
    	    }

    	    /**
    	     * Creates a function that memoizes the result of `func`. If `resolver` is
    	     * provided, it determines the cache key for storing the result based on the
    	     * arguments provided to the memoized function. By default, the first argument
    	     * provided to the memoized function is used as the map cache key. The `func`
    	     * is invoked with the `this` binding of the memoized function.
    	     *
    	     * **Note:** The cache is exposed as the `cache` property on the memoized
    	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
    	     * constructor with one whose instances implement the
    	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
    	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to have its output memoized.
    	     * @param {Function} [resolver] The function to resolve the cache key.
    	     * @returns {Function} Returns the new memoized function.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2 };
    	     * var other = { 'c': 3, 'd': 4 };
    	     *
    	     * var values = _.memoize(_.values);
    	     * values(object);
    	     * // => [1, 2]
    	     *
    	     * values(other);
    	     * // => [3, 4]
    	     *
    	     * object.a = 2;
    	     * values(object);
    	     * // => [1, 2]
    	     *
    	     * // Modify the result cache.
    	     * values.cache.set(object, ['a', 'b']);
    	     * values(object);
    	     * // => ['a', 'b']
    	     *
    	     * // Replace `_.memoize.Cache`.
    	     * _.memoize.Cache = WeakMap;
    	     */
    	    function memoize(func, resolver) {
    	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      var memoized = function() {
    	        var args = arguments,
    	            key = resolver ? resolver.apply(this, args) : args[0],
    	            cache = memoized.cache;

    	        if (cache.has(key)) {
    	          return cache.get(key);
    	        }
    	        var result = func.apply(this, args);
    	        memoized.cache = cache.set(key, result) || cache;
    	        return result;
    	      };
    	      memoized.cache = new (memoize.Cache || MapCache);
    	      return memoized;
    	    }

    	    // Expose `MapCache`.
    	    memoize.Cache = MapCache;

    	    /**
    	     * Creates a function that negates the result of the predicate `func`. The
    	     * `func` predicate is invoked with the `this` binding and arguments of the
    	     * created function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} predicate The predicate to negate.
    	     * @returns {Function} Returns the new negated function.
    	     * @example
    	     *
    	     * function isEven(n) {
    	     *   return n % 2 == 0;
    	     * }
    	     *
    	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
    	     * // => [1, 3, 5]
    	     */
    	    function negate(predicate) {
    	      if (typeof predicate != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      return function() {
    	        var args = arguments;
    	        switch (args.length) {
    	          case 0: return !predicate.call(this);
    	          case 1: return !predicate.call(this, args[0]);
    	          case 2: return !predicate.call(this, args[0], args[1]);
    	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
    	        }
    	        return !predicate.apply(this, args);
    	      };
    	    }

    	    /**
    	     * Creates a function that is restricted to invoking `func` once. Repeat calls
    	     * to the function return the value of the first invocation. The `func` is
    	     * invoked with the `this` binding and arguments of the created function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to restrict.
    	     * @returns {Function} Returns the new restricted function.
    	     * @example
    	     *
    	     * var initialize = _.once(createApplication);
    	     * initialize();
    	     * initialize();
    	     * // => `createApplication` is invoked once
    	     */
    	    function once(func) {
    	      return before(2, func);
    	    }

    	    /**
    	     * Creates a function that invokes `func` with its arguments transformed.
    	     *
    	     * @static
    	     * @since 4.0.0
    	     * @memberOf _
    	     * @category Function
    	     * @param {Function} func The function to wrap.
    	     * @param {...(Function|Function[])} [transforms=[_.identity]]
    	     *  The argument transforms.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * function doubled(n) {
    	     *   return n * 2;
    	     * }
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var func = _.overArgs(function(x, y) {
    	     *   return [x, y];
    	     * }, [square, doubled]);
    	     *
    	     * func(9, 3);
    	     * // => [81, 6]
    	     *
    	     * func(10, 5);
    	     * // => [100, 10]
    	     */
    	    var overArgs = castRest(function(func, transforms) {
    	      transforms = (transforms.length == 1 && isArray(transforms[0]))
    	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
    	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

    	      var funcsLength = transforms.length;
    	      return baseRest(function(args) {
    	        var index = -1,
    	            length = nativeMin(args.length, funcsLength);

    	        while (++index < length) {
    	          args[index] = transforms[index].call(this, args[index]);
    	        }
    	        return apply(func, this, args);
    	      });
    	    });

    	    /**
    	     * Creates a function that invokes `func` with `partials` prepended to the
    	     * arguments it receives. This method is like `_.bind` except it does **not**
    	     * alter the `this` binding.
    	     *
    	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for partially applied arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of partially
    	     * applied functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.2.0
    	     * @category Function
    	     * @param {Function} func The function to partially apply arguments to.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new partially applied function.
    	     * @example
    	     *
    	     * function greet(greeting, name) {
    	     *   return greeting + ' ' + name;
    	     * }
    	     *
    	     * var sayHelloTo = _.partial(greet, 'hello');
    	     * sayHelloTo('fred');
    	     * // => 'hello fred'
    	     *
    	     * // Partially applied with placeholders.
    	     * var greetFred = _.partial(greet, _, 'fred');
    	     * greetFred('hi');
    	     * // => 'hi fred'
    	     */
    	    var partial = baseRest(function(func, partials) {
    	      var holders = replaceHolders(partials, getHolder(partial));
    	      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
    	    });

    	    /**
    	     * This method is like `_.partial` except that partially applied arguments
    	     * are appended to the arguments it receives.
    	     *
    	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
    	     * builds, may be used as a placeholder for partially applied arguments.
    	     *
    	     * **Note:** This method doesn't set the "length" property of partially
    	     * applied functions.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Function
    	     * @param {Function} func The function to partially apply arguments to.
    	     * @param {...*} [partials] The arguments to be partially applied.
    	     * @returns {Function} Returns the new partially applied function.
    	     * @example
    	     *
    	     * function greet(greeting, name) {
    	     *   return greeting + ' ' + name;
    	     * }
    	     *
    	     * var greetFred = _.partialRight(greet, 'fred');
    	     * greetFred('hi');
    	     * // => 'hi fred'
    	     *
    	     * // Partially applied with placeholders.
    	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
    	     * sayHelloTo('fred');
    	     * // => 'hello fred'
    	     */
    	    var partialRight = baseRest(function(func, partials) {
    	      var holders = replaceHolders(partials, getHolder(partialRight));
    	      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
    	    });

    	    /**
    	     * Creates a function that invokes `func` with arguments arranged according
    	     * to the specified `indexes` where the argument value at the first index is
    	     * provided as the first argument, the argument value at the second index is
    	     * provided as the second argument, and so on.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Function
    	     * @param {Function} func The function to rearrange arguments for.
    	     * @param {...(number|number[])} indexes The arranged argument indexes.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var rearged = _.rearg(function(a, b, c) {
    	     *   return [a, b, c];
    	     * }, [2, 0, 1]);
    	     *
    	     * rearged('b', 'c', 'a')
    	     * // => ['a', 'b', 'c']
    	     */
    	    var rearg = flatRest(function(func, indexes) {
    	      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
    	    });

    	    /**
    	     * Creates a function that invokes `func` with the `this` binding of the
    	     * created function and arguments from `start` and beyond provided as
    	     * an array.
    	     *
    	     * **Note:** This method is based on the
    	     * [rest parameter](https://mdn.io/rest_parameters).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Function
    	     * @param {Function} func The function to apply a rest parameter to.
    	     * @param {number} [start=func.length-1] The start position of the rest parameter.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var say = _.rest(function(what, names) {
    	     *   return what + ' ' + _.initial(names).join(', ') +
    	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
    	     * });
    	     *
    	     * say('hello', 'fred', 'barney', 'pebbles');
    	     * // => 'hello fred, barney, & pebbles'
    	     */
    	    function rest(func, start) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      start = start === undefined$1 ? start : toInteger(start);
    	      return baseRest(func, start);
    	    }

    	    /**
    	     * Creates a function that invokes `func` with the `this` binding of the
    	     * create function and an array of arguments much like
    	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
    	     *
    	     * **Note:** This method is based on the
    	     * [spread operator](https://mdn.io/spread_operator).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Function
    	     * @param {Function} func The function to spread arguments over.
    	     * @param {number} [start=0] The start position of the spread.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var say = _.spread(function(who, what) {
    	     *   return who + ' says ' + what;
    	     * });
    	     *
    	     * say(['fred', 'hello']);
    	     * // => 'fred says hello'
    	     *
    	     * var numbers = Promise.all([
    	     *   Promise.resolve(40),
    	     *   Promise.resolve(36)
    	     * ]);
    	     *
    	     * numbers.then(_.spread(function(x, y) {
    	     *   return x + y;
    	     * }));
    	     * // => a Promise of 76
    	     */
    	    function spread(func, start) {
    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      start = start == null ? 0 : nativeMax(toInteger(start), 0);
    	      return baseRest(function(args) {
    	        var array = args[start],
    	            otherArgs = castSlice(args, 0, start);

    	        if (array) {
    	          arrayPush(otherArgs, array);
    	        }
    	        return apply(func, this, otherArgs);
    	      });
    	    }

    	    /**
    	     * Creates a throttled function that only invokes `func` at most once per
    	     * every `wait` milliseconds. The throttled function comes with a `cancel`
    	     * method to cancel delayed `func` invocations and a `flush` method to
    	     * immediately invoke them. Provide `options` to indicate whether `func`
    	     * should be invoked on the leading and/or trailing edge of the `wait`
    	     * timeout. The `func` is invoked with the last arguments provided to the
    	     * throttled function. Subsequent calls to the throttled function return the
    	     * result of the last `func` invocation.
    	     *
    	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
    	     * invoked on the trailing edge of the timeout only if the throttled function
    	     * is invoked more than once during the `wait` timeout.
    	     *
    	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
    	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
    	     *
    	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
    	     * for details over the differences between `_.throttle` and `_.debounce`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {Function} func The function to throttle.
    	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
    	     * @param {Object} [options={}] The options object.
    	     * @param {boolean} [options.leading=true]
    	     *  Specify invoking on the leading edge of the timeout.
    	     * @param {boolean} [options.trailing=true]
    	     *  Specify invoking on the trailing edge of the timeout.
    	     * @returns {Function} Returns the new throttled function.
    	     * @example
    	     *
    	     * // Avoid excessively updating the position while scrolling.
    	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
    	     *
    	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
    	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
    	     * jQuery(element).on('click', throttled);
    	     *
    	     * // Cancel the trailing throttled invocation.
    	     * jQuery(window).on('popstate', throttled.cancel);
    	     */
    	    function throttle(func, wait, options) {
    	      var leading = true,
    	          trailing = true;

    	      if (typeof func != 'function') {
    	        throw new TypeError(FUNC_ERROR_TEXT);
    	      }
    	      if (isObject(options)) {
    	        leading = 'leading' in options ? !!options.leading : leading;
    	        trailing = 'trailing' in options ? !!options.trailing : trailing;
    	      }
    	      return debounce(func, wait, {
    	        'leading': leading,
    	        'maxWait': wait,
    	        'trailing': trailing
    	      });
    	    }

    	    /**
    	     * Creates a function that accepts up to one argument, ignoring any
    	     * additional arguments.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Function
    	     * @param {Function} func The function to cap arguments for.
    	     * @returns {Function} Returns the new capped function.
    	     * @example
    	     *
    	     * _.map(['6', '8', '10'], _.unary(parseInt));
    	     * // => [6, 8, 10]
    	     */
    	    function unary(func) {
    	      return ary(func, 1);
    	    }

    	    /**
    	     * Creates a function that provides `value` to `wrapper` as its first
    	     * argument. Any additional arguments provided to the function are appended
    	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
    	     * binding of the created function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Function
    	     * @param {*} value The value to wrap.
    	     * @param {Function} [wrapper=identity] The wrapper function.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var p = _.wrap(_.escape, function(func, text) {
    	     *   return '<p>' + func(text) + '</p>';
    	     * });
    	     *
    	     * p('fred, barney, & pebbles');
    	     * // => '<p>fred, barney, &amp; pebbles</p>'
    	     */
    	    function wrap(value, wrapper) {
    	      return partial(castFunction(wrapper), value);
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Casts `value` as an array if it's not one.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.4.0
    	     * @category Lang
    	     * @param {*} value The value to inspect.
    	     * @returns {Array} Returns the cast array.
    	     * @example
    	     *
    	     * _.castArray(1);
    	     * // => [1]
    	     *
    	     * _.castArray({ 'a': 1 });
    	     * // => [{ 'a': 1 }]
    	     *
    	     * _.castArray('abc');
    	     * // => ['abc']
    	     *
    	     * _.castArray(null);
    	     * // => [null]
    	     *
    	     * _.castArray(undefined);
    	     * // => [undefined]
    	     *
    	     * _.castArray();
    	     * // => []
    	     *
    	     * var array = [1, 2, 3];
    	     * console.log(_.castArray(array) === array);
    	     * // => true
    	     */
    	    function castArray() {
    	      if (!arguments.length) {
    	        return [];
    	      }
    	      var value = arguments[0];
    	      return isArray(value) ? value : [value];
    	    }

    	    /**
    	     * Creates a shallow clone of `value`.
    	     *
    	     * **Note:** This method is loosely based on the
    	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
    	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
    	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
    	     * arrays. The own enumerable properties of `arguments` objects are cloned
    	     * as plain objects. An empty object is returned for uncloneable values such
    	     * as error objects, functions, DOM nodes, and WeakMaps.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to clone.
    	     * @returns {*} Returns the cloned value.
    	     * @see _.cloneDeep
    	     * @example
    	     *
    	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
    	     *
    	     * var shallow = _.clone(objects);
    	     * console.log(shallow[0] === objects[0]);
    	     * // => true
    	     */
    	    function clone(value) {
    	      return baseClone(value, CLONE_SYMBOLS_FLAG);
    	    }

    	    /**
    	     * This method is like `_.clone` except that it accepts `customizer` which
    	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
    	     * cloning is handled by the method instead. The `customizer` is invoked with
    	     * up to four arguments; (value [, index|key, object, stack]).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to clone.
    	     * @param {Function} [customizer] The function to customize cloning.
    	     * @returns {*} Returns the cloned value.
    	     * @see _.cloneDeepWith
    	     * @example
    	     *
    	     * function customizer(value) {
    	     *   if (_.isElement(value)) {
    	     *     return value.cloneNode(false);
    	     *   }
    	     * }
    	     *
    	     * var el = _.cloneWith(document.body, customizer);
    	     *
    	     * console.log(el === document.body);
    	     * // => false
    	     * console.log(el.nodeName);
    	     * // => 'BODY'
    	     * console.log(el.childNodes.length);
    	     * // => 0
    	     */
    	    function cloneWith(value, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    	    }

    	    /**
    	     * This method is like `_.clone` except that it recursively clones `value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Lang
    	     * @param {*} value The value to recursively clone.
    	     * @returns {*} Returns the deep cloned value.
    	     * @see _.clone
    	     * @example
    	     *
    	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
    	     *
    	     * var deep = _.cloneDeep(objects);
    	     * console.log(deep[0] === objects[0]);
    	     * // => false
    	     */
    	    function cloneDeep(value) {
    	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    	    }

    	    /**
    	     * This method is like `_.cloneWith` except that it recursively clones `value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to recursively clone.
    	     * @param {Function} [customizer] The function to customize cloning.
    	     * @returns {*} Returns the deep cloned value.
    	     * @see _.cloneWith
    	     * @example
    	     *
    	     * function customizer(value) {
    	     *   if (_.isElement(value)) {
    	     *     return value.cloneNode(true);
    	     *   }
    	     * }
    	     *
    	     * var el = _.cloneDeepWith(document.body, customizer);
    	     *
    	     * console.log(el === document.body);
    	     * // => false
    	     * console.log(el.nodeName);
    	     * // => 'BODY'
    	     * console.log(el.childNodes.length);
    	     * // => 20
    	     */
    	    function cloneDeepWith(value, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    	    }

    	    /**
    	     * Checks if `object` conforms to `source` by invoking the predicate
    	     * properties of `source` with the corresponding property values of `object`.
    	     *
    	     * **Note:** This method is equivalent to `_.conforms` when `source` is
    	     * partially applied.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.14.0
    	     * @category Lang
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property predicates to conform to.
    	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2 };
    	     *
    	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
    	     * // => true
    	     *
    	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
    	     * // => false
    	     */
    	    function conformsTo(object, source) {
    	      return source == null || baseConformsTo(object, source, keys(source));
    	    }

    	    /**
    	     * Performs a
    	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
    	     * comparison between two values to determine if they are equivalent.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': 1 };
    	     * var other = { 'a': 1 };
    	     *
    	     * _.eq(object, object);
    	     * // => true
    	     *
    	     * _.eq(object, other);
    	     * // => false
    	     *
    	     * _.eq('a', 'a');
    	     * // => true
    	     *
    	     * _.eq('a', Object('a'));
    	     * // => false
    	     *
    	     * _.eq(NaN, NaN);
    	     * // => true
    	     */
    	    function eq(value, other) {
    	      return value === other || (value !== value && other !== other);
    	    }

    	    /**
    	     * Checks if `value` is greater than `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
    	     *  else `false`.
    	     * @see _.lt
    	     * @example
    	     *
    	     * _.gt(3, 1);
    	     * // => true
    	     *
    	     * _.gt(3, 3);
    	     * // => false
    	     *
    	     * _.gt(1, 3);
    	     * // => false
    	     */
    	    var gt = createRelationalOperation(baseGt);

    	    /**
    	     * Checks if `value` is greater than or equal to `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
    	     *  `other`, else `false`.
    	     * @see _.lte
    	     * @example
    	     *
    	     * _.gte(3, 1);
    	     * // => true
    	     *
    	     * _.gte(3, 3);
    	     * // => true
    	     *
    	     * _.gte(1, 3);
    	     * // => false
    	     */
    	    var gte = createRelationalOperation(function(value, other) {
    	      return value >= other;
    	    });

    	    /**
    	     * Checks if `value` is likely an `arguments` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isArguments(function() { return arguments; }());
    	     * // => true
    	     *
    	     * _.isArguments([1, 2, 3]);
    	     * // => false
    	     */
    	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    	        !propertyIsEnumerable.call(value, 'callee');
    	    };

    	    /**
    	     * Checks if `value` is classified as an `Array` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
    	     * @example
    	     *
    	     * _.isArray([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isArray(document.body.children);
    	     * // => false
    	     *
    	     * _.isArray('abc');
    	     * // => false
    	     *
    	     * _.isArray(_.noop);
    	     * // => false
    	     */
    	    var isArray = Array.isArray;

    	    /**
    	     * Checks if `value` is classified as an `ArrayBuffer` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
    	     * @example
    	     *
    	     * _.isArrayBuffer(new ArrayBuffer(2));
    	     * // => true
    	     *
    	     * _.isArrayBuffer(new Array(2));
    	     * // => false
    	     */
    	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    	    /**
    	     * Checks if `value` is array-like. A value is considered array-like if it's
    	     * not a function and has a `value.length` that's an integer greater than or
    	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
    	     * @example
    	     *
    	     * _.isArrayLike([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isArrayLike(document.body.children);
    	     * // => true
    	     *
    	     * _.isArrayLike('abc');
    	     * // => true
    	     *
    	     * _.isArrayLike(_.noop);
    	     * // => false
    	     */
    	    function isArrayLike(value) {
    	      return value != null && isLength(value.length) && !isFunction(value);
    	    }

    	    /**
    	     * This method is like `_.isArrayLike` except that it also checks if `value`
    	     * is an object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an array-like object,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isArrayLikeObject([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isArrayLikeObject(document.body.children);
    	     * // => true
    	     *
    	     * _.isArrayLikeObject('abc');
    	     * // => false
    	     *
    	     * _.isArrayLikeObject(_.noop);
    	     * // => false
    	     */
    	    function isArrayLikeObject(value) {
    	      return isObjectLike(value) && isArrayLike(value);
    	    }

    	    /**
    	     * Checks if `value` is classified as a boolean primitive or object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
    	     * @example
    	     *
    	     * _.isBoolean(false);
    	     * // => true
    	     *
    	     * _.isBoolean(null);
    	     * // => false
    	     */
    	    function isBoolean(value) {
    	      return value === true || value === false ||
    	        (isObjectLike(value) && baseGetTag(value) == boolTag);
    	    }

    	    /**
    	     * Checks if `value` is a buffer.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
    	     * @example
    	     *
    	     * _.isBuffer(new Buffer(2));
    	     * // => true
    	     *
    	     * _.isBuffer(new Uint8Array(2));
    	     * // => false
    	     */
    	    var isBuffer = nativeIsBuffer || stubFalse;

    	    /**
    	     * Checks if `value` is classified as a `Date` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
    	     * @example
    	     *
    	     * _.isDate(new Date);
    	     * // => true
    	     *
    	     * _.isDate('Mon April 23 2012');
    	     * // => false
    	     */
    	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    	    /**
    	     * Checks if `value` is likely a DOM element.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
    	     * @example
    	     *
    	     * _.isElement(document.body);
    	     * // => true
    	     *
    	     * _.isElement('<body>');
    	     * // => false
    	     */
    	    function isElement(value) {
    	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    	    }

    	    /**
    	     * Checks if `value` is an empty object, collection, map, or set.
    	     *
    	     * Objects are considered empty if they have no own enumerable string keyed
    	     * properties.
    	     *
    	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
    	     * jQuery-like collections are considered empty if they have a `length` of `0`.
    	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
    	     * @example
    	     *
    	     * _.isEmpty(null);
    	     * // => true
    	     *
    	     * _.isEmpty(true);
    	     * // => true
    	     *
    	     * _.isEmpty(1);
    	     * // => true
    	     *
    	     * _.isEmpty([1, 2, 3]);
    	     * // => false
    	     *
    	     * _.isEmpty({ 'a': 1 });
    	     * // => false
    	     */
    	    function isEmpty(value) {
    	      if (value == null) {
    	        return true;
    	      }
    	      if (isArrayLike(value) &&
    	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
    	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    	        return !value.length;
    	      }
    	      var tag = getTag(value);
    	      if (tag == mapTag || tag == setTag) {
    	        return !value.size;
    	      }
    	      if (isPrototype(value)) {
    	        return !baseKeys(value).length;
    	      }
    	      for (var key in value) {
    	        if (hasOwnProperty.call(value, key)) {
    	          return false;
    	        }
    	      }
    	      return true;
    	    }

    	    /**
    	     * Performs a deep comparison between two values to determine if they are
    	     * equivalent.
    	     *
    	     * **Note:** This method supports comparing arrays, array buffers, booleans,
    	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
    	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
    	     * by their own, not inherited, enumerable properties. Functions and DOM
    	     * nodes are compared by strict equality, i.e. `===`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': 1 };
    	     * var other = { 'a': 1 };
    	     *
    	     * _.isEqual(object, other);
    	     * // => true
    	     *
    	     * object === other;
    	     * // => false
    	     */
    	    function isEqual(value, other) {
    	      return baseIsEqual(value, other);
    	    }

    	    /**
    	     * This method is like `_.isEqual` except that it accepts `customizer` which
    	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
    	     * are handled by the method instead. The `customizer` is invoked with up to
    	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
    	     * @example
    	     *
    	     * function isGreeting(value) {
    	     *   return /^h(?:i|ello)$/.test(value);
    	     * }
    	     *
    	     * function customizer(objValue, othValue) {
    	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
    	     *     return true;
    	     *   }
    	     * }
    	     *
    	     * var array = ['hello', 'goodbye'];
    	     * var other = ['hi', 'goodbye'];
    	     *
    	     * _.isEqualWith(array, other, customizer);
    	     * // => true
    	     */
    	    function isEqualWith(value, other, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      var result = customizer ? customizer(value, other) : undefined$1;
    	      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
    	    }

    	    /**
    	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
    	     * `SyntaxError`, `TypeError`, or `URIError` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
    	     * @example
    	     *
    	     * _.isError(new Error);
    	     * // => true
    	     *
    	     * _.isError(Error);
    	     * // => false
    	     */
    	    function isError(value) {
    	      if (!isObjectLike(value)) {
    	        return false;
    	      }
    	      var tag = baseGetTag(value);
    	      return tag == errorTag || tag == domExcTag ||
    	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    	    }

    	    /**
    	     * Checks if `value` is a finite primitive number.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
    	     * @example
    	     *
    	     * _.isFinite(3);
    	     * // => true
    	     *
    	     * _.isFinite(Number.MIN_VALUE);
    	     * // => true
    	     *
    	     * _.isFinite(Infinity);
    	     * // => false
    	     *
    	     * _.isFinite('3');
    	     * // => false
    	     */
    	    function isFinite(value) {
    	      return typeof value == 'number' && nativeIsFinite(value);
    	    }

    	    /**
    	     * Checks if `value` is classified as a `Function` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
    	     * @example
    	     *
    	     * _.isFunction(_);
    	     * // => true
    	     *
    	     * _.isFunction(/abc/);
    	     * // => false
    	     */
    	    function isFunction(value) {
    	      if (!isObject(value)) {
    	        return false;
    	      }
    	      // The use of `Object#toString` avoids issues with the `typeof` operator
    	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
    	      var tag = baseGetTag(value);
    	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    	    }

    	    /**
    	     * Checks if `value` is an integer.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
    	     * @example
    	     *
    	     * _.isInteger(3);
    	     * // => true
    	     *
    	     * _.isInteger(Number.MIN_VALUE);
    	     * // => false
    	     *
    	     * _.isInteger(Infinity);
    	     * // => false
    	     *
    	     * _.isInteger('3');
    	     * // => false
    	     */
    	    function isInteger(value) {
    	      return typeof value == 'number' && value == toInteger(value);
    	    }

    	    /**
    	     * Checks if `value` is a valid array-like length.
    	     *
    	     * **Note:** This method is loosely based on
    	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
    	     * @example
    	     *
    	     * _.isLength(3);
    	     * // => true
    	     *
    	     * _.isLength(Number.MIN_VALUE);
    	     * // => false
    	     *
    	     * _.isLength(Infinity);
    	     * // => false
    	     *
    	     * _.isLength('3');
    	     * // => false
    	     */
    	    function isLength(value) {
    	      return typeof value == 'number' &&
    	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    	    }

    	    /**
    	     * Checks if `value` is the
    	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
    	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
    	     * @example
    	     *
    	     * _.isObject({});
    	     * // => true
    	     *
    	     * _.isObject([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isObject(_.noop);
    	     * // => true
    	     *
    	     * _.isObject(null);
    	     * // => false
    	     */
    	    function isObject(value) {
    	      var type = typeof value;
    	      return value != null && (type == 'object' || type == 'function');
    	    }

    	    /**
    	     * Checks if `value` is object-like. A value is object-like if it's not `null`
    	     * and has a `typeof` result of "object".
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
    	     * @example
    	     *
    	     * _.isObjectLike({});
    	     * // => true
    	     *
    	     * _.isObjectLike([1, 2, 3]);
    	     * // => true
    	     *
    	     * _.isObjectLike(_.noop);
    	     * // => false
    	     *
    	     * _.isObjectLike(null);
    	     * // => false
    	     */
    	    function isObjectLike(value) {
    	      return value != null && typeof value == 'object';
    	    }

    	    /**
    	     * Checks if `value` is classified as a `Map` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
    	     * @example
    	     *
    	     * _.isMap(new Map);
    	     * // => true
    	     *
    	     * _.isMap(new WeakMap);
    	     * // => false
    	     */
    	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    	    /**
    	     * Performs a partial deep comparison between `object` and `source` to
    	     * determine if `object` contains equivalent property values.
    	     *
    	     * **Note:** This method is equivalent to `_.matches` when `source` is
    	     * partially applied.
    	     *
    	     * Partial comparisons will match empty array and empty object `source`
    	     * values against any array or object value, respectively. See `_.isEqual`
    	     * for a list of supported value comparisons.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property values to match.
    	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2 };
    	     *
    	     * _.isMatch(object, { 'b': 2 });
    	     * // => true
    	     *
    	     * _.isMatch(object, { 'b': 1 });
    	     * // => false
    	     */
    	    function isMatch(object, source) {
    	      return object === source || baseIsMatch(object, source, getMatchData(source));
    	    }

    	    /**
    	     * This method is like `_.isMatch` except that it accepts `customizer` which
    	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
    	     * are handled by the method instead. The `customizer` is invoked with five
    	     * arguments: (objValue, srcValue, index|key, object, source).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {Object} object The object to inspect.
    	     * @param {Object} source The object of property values to match.
    	     * @param {Function} [customizer] The function to customize comparisons.
    	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
    	     * @example
    	     *
    	     * function isGreeting(value) {
    	     *   return /^h(?:i|ello)$/.test(value);
    	     * }
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
    	     *     return true;
    	     *   }
    	     * }
    	     *
    	     * var object = { 'greeting': 'hello' };
    	     * var source = { 'greeting': 'hi' };
    	     *
    	     * _.isMatchWith(object, source, customizer);
    	     * // => true
    	     */
    	    function isMatchWith(object, source, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      return baseIsMatch(object, source, getMatchData(source), customizer);
    	    }

    	    /**
    	     * Checks if `value` is `NaN`.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
    	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
    	     * `undefined` and other non-number values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
    	     * @example
    	     *
    	     * _.isNaN(NaN);
    	     * // => true
    	     *
    	     * _.isNaN(new Number(NaN));
    	     * // => true
    	     *
    	     * isNaN(undefined);
    	     * // => true
    	     *
    	     * _.isNaN(undefined);
    	     * // => false
    	     */
    	    function isNaN(value) {
    	      // An `NaN` primitive is the only value that is not equal to itself.
    	      // Perform the `toStringTag` check first to avoid errors with some
    	      // ActiveX objects in IE.
    	      return isNumber(value) && value != +value;
    	    }

    	    /**
    	     * Checks if `value` is a pristine native function.
    	     *
    	     * **Note:** This method can't reliably detect native functions in the presence
    	     * of the core-js package because core-js circumvents this kind of detection.
    	     * Despite multiple requests, the core-js maintainer has made it clear: any
    	     * attempt to fix the detection will be obstructed. As a result, we're left
    	     * with little choice but to throw an error. Unfortunately, this also affects
    	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
    	     * which rely on core-js.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a native function,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.isNative(Array.prototype.push);
    	     * // => true
    	     *
    	     * _.isNative(_);
    	     * // => false
    	     */
    	    function isNative(value) {
    	      if (isMaskable(value)) {
    	        throw new Error(CORE_ERROR_TEXT);
    	      }
    	      return baseIsNative(value);
    	    }

    	    /**
    	     * Checks if `value` is `null`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
    	     * @example
    	     *
    	     * _.isNull(null);
    	     * // => true
    	     *
    	     * _.isNull(void 0);
    	     * // => false
    	     */
    	    function isNull(value) {
    	      return value === null;
    	    }

    	    /**
    	     * Checks if `value` is `null` or `undefined`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
    	     * @example
    	     *
    	     * _.isNil(null);
    	     * // => true
    	     *
    	     * _.isNil(void 0);
    	     * // => true
    	     *
    	     * _.isNil(NaN);
    	     * // => false
    	     */
    	    function isNil(value) {
    	      return value == null;
    	    }

    	    /**
    	     * Checks if `value` is classified as a `Number` primitive or object.
    	     *
    	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
    	     * classified as numbers, use the `_.isFinite` method.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
    	     * @example
    	     *
    	     * _.isNumber(3);
    	     * // => true
    	     *
    	     * _.isNumber(Number.MIN_VALUE);
    	     * // => true
    	     *
    	     * _.isNumber(Infinity);
    	     * // => true
    	     *
    	     * _.isNumber('3');
    	     * // => false
    	     */
    	    function isNumber(value) {
    	      return typeof value == 'number' ||
    	        (isObjectLike(value) && baseGetTag(value) == numberTag);
    	    }

    	    /**
    	     * Checks if `value` is a plain object, that is, an object created by the
    	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.8.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     * }
    	     *
    	     * _.isPlainObject(new Foo);
    	     * // => false
    	     *
    	     * _.isPlainObject([1, 2, 3]);
    	     * // => false
    	     *
    	     * _.isPlainObject({ 'x': 0, 'y': 0 });
    	     * // => true
    	     *
    	     * _.isPlainObject(Object.create(null));
    	     * // => true
    	     */
    	    function isPlainObject(value) {
    	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    	        return false;
    	      }
    	      var proto = getPrototype(value);
    	      if (proto === null) {
    	        return true;
    	      }
    	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    	        funcToString.call(Ctor) == objectCtorString;
    	    }

    	    /**
    	     * Checks if `value` is classified as a `RegExp` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.1.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
    	     * @example
    	     *
    	     * _.isRegExp(/abc/);
    	     * // => true
    	     *
    	     * _.isRegExp('/abc/');
    	     * // => false
    	     */
    	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    	    /**
    	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
    	     * double precision number which isn't the result of a rounded unsafe integer.
    	     *
    	     * **Note:** This method is based on
    	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
    	     * @example
    	     *
    	     * _.isSafeInteger(3);
    	     * // => true
    	     *
    	     * _.isSafeInteger(Number.MIN_VALUE);
    	     * // => false
    	     *
    	     * _.isSafeInteger(Infinity);
    	     * // => false
    	     *
    	     * _.isSafeInteger('3');
    	     * // => false
    	     */
    	    function isSafeInteger(value) {
    	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    	    }

    	    /**
    	     * Checks if `value` is classified as a `Set` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
    	     * @example
    	     *
    	     * _.isSet(new Set);
    	     * // => true
    	     *
    	     * _.isSet(new WeakSet);
    	     * // => false
    	     */
    	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    	    /**
    	     * Checks if `value` is classified as a `String` primitive or object.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
    	     * @example
    	     *
    	     * _.isString('abc');
    	     * // => true
    	     *
    	     * _.isString(1);
    	     * // => false
    	     */
    	    function isString(value) {
    	      return typeof value == 'string' ||
    	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    	    }

    	    /**
    	     * Checks if `value` is classified as a `Symbol` primitive or object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
    	     * @example
    	     *
    	     * _.isSymbol(Symbol.iterator);
    	     * // => true
    	     *
    	     * _.isSymbol('abc');
    	     * // => false
    	     */
    	    function isSymbol(value) {
    	      return typeof value == 'symbol' ||
    	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    	    }

    	    /**
    	     * Checks if `value` is classified as a typed array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
    	     * @example
    	     *
    	     * _.isTypedArray(new Uint8Array);
    	     * // => true
    	     *
    	     * _.isTypedArray([]);
    	     * // => false
    	     */
    	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    	    /**
    	     * Checks if `value` is `undefined`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
    	     * @example
    	     *
    	     * _.isUndefined(void 0);
    	     * // => true
    	     *
    	     * _.isUndefined(null);
    	     * // => false
    	     */
    	    function isUndefined(value) {
    	      return value === undefined$1;
    	    }

    	    /**
    	     * Checks if `value` is classified as a `WeakMap` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
    	     * @example
    	     *
    	     * _.isWeakMap(new WeakMap);
    	     * // => true
    	     *
    	     * _.isWeakMap(new Map);
    	     * // => false
    	     */
    	    function isWeakMap(value) {
    	      return isObjectLike(value) && getTag(value) == weakMapTag;
    	    }

    	    /**
    	     * Checks if `value` is classified as a `WeakSet` object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.3.0
    	     * @category Lang
    	     * @param {*} value The value to check.
    	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
    	     * @example
    	     *
    	     * _.isWeakSet(new WeakSet);
    	     * // => true
    	     *
    	     * _.isWeakSet(new Set);
    	     * // => false
    	     */
    	    function isWeakSet(value) {
    	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    	    }

    	    /**
    	     * Checks if `value` is less than `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is less than `other`,
    	     *  else `false`.
    	     * @see _.gt
    	     * @example
    	     *
    	     * _.lt(1, 3);
    	     * // => true
    	     *
    	     * _.lt(3, 3);
    	     * // => false
    	     *
    	     * _.lt(3, 1);
    	     * // => false
    	     */
    	    var lt = createRelationalOperation(baseLt);

    	    /**
    	     * Checks if `value` is less than or equal to `other`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.9.0
    	     * @category Lang
    	     * @param {*} value The value to compare.
    	     * @param {*} other The other value to compare.
    	     * @returns {boolean} Returns `true` if `value` is less than or equal to
    	     *  `other`, else `false`.
    	     * @see _.gte
    	     * @example
    	     *
    	     * _.lte(1, 3);
    	     * // => true
    	     *
    	     * _.lte(3, 3);
    	     * // => true
    	     *
    	     * _.lte(3, 1);
    	     * // => false
    	     */
    	    var lte = createRelationalOperation(function(value, other) {
    	      return value <= other;
    	    });

    	    /**
    	     * Converts `value` to an array.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {Array} Returns the converted array.
    	     * @example
    	     *
    	     * _.toArray({ 'a': 1, 'b': 2 });
    	     * // => [1, 2]
    	     *
    	     * _.toArray('abc');
    	     * // => ['a', 'b', 'c']
    	     *
    	     * _.toArray(1);
    	     * // => []
    	     *
    	     * _.toArray(null);
    	     * // => []
    	     */
    	    function toArray(value) {
    	      if (!value) {
    	        return [];
    	      }
    	      if (isArrayLike(value)) {
    	        return isString(value) ? stringToArray(value) : copyArray(value);
    	      }
    	      if (symIterator && value[symIterator]) {
    	        return iteratorToArray(value[symIterator]());
    	      }
    	      var tag = getTag(value),
    	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

    	      return func(value);
    	    }

    	    /**
    	     * Converts `value` to a finite number.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.12.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted number.
    	     * @example
    	     *
    	     * _.toFinite(3.2);
    	     * // => 3.2
    	     *
    	     * _.toFinite(Number.MIN_VALUE);
    	     * // => 5e-324
    	     *
    	     * _.toFinite(Infinity);
    	     * // => 1.7976931348623157e+308
    	     *
    	     * _.toFinite('3.2');
    	     * // => 3.2
    	     */
    	    function toFinite(value) {
    	      if (!value) {
    	        return value === 0 ? value : 0;
    	      }
    	      value = toNumber(value);
    	      if (value === INFINITY || value === -INFINITY) {
    	        var sign = (value < 0 ? -1 : 1);
    	        return sign * MAX_INTEGER;
    	      }
    	      return value === value ? value : 0;
    	    }

    	    /**
    	     * Converts `value` to an integer.
    	     *
    	     * **Note:** This method is loosely based on
    	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.toInteger(3.2);
    	     * // => 3
    	     *
    	     * _.toInteger(Number.MIN_VALUE);
    	     * // => 0
    	     *
    	     * _.toInteger(Infinity);
    	     * // => 1.7976931348623157e+308
    	     *
    	     * _.toInteger('3.2');
    	     * // => 3
    	     */
    	    function toInteger(value) {
    	      var result = toFinite(value),
    	          remainder = result % 1;

    	      return result === result ? (remainder ? result - remainder : result) : 0;
    	    }

    	    /**
    	     * Converts `value` to an integer suitable for use as the length of an
    	     * array-like object.
    	     *
    	     * **Note:** This method is based on
    	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.toLength(3.2);
    	     * // => 3
    	     *
    	     * _.toLength(Number.MIN_VALUE);
    	     * // => 0
    	     *
    	     * _.toLength(Infinity);
    	     * // => 4294967295
    	     *
    	     * _.toLength('3.2');
    	     * // => 3
    	     */
    	    function toLength(value) {
    	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    	    }

    	    /**
    	     * Converts `value` to a number.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to process.
    	     * @returns {number} Returns the number.
    	     * @example
    	     *
    	     * _.toNumber(3.2);
    	     * // => 3.2
    	     *
    	     * _.toNumber(Number.MIN_VALUE);
    	     * // => 5e-324
    	     *
    	     * _.toNumber(Infinity);
    	     * // => Infinity
    	     *
    	     * _.toNumber('3.2');
    	     * // => 3.2
    	     */
    	    function toNumber(value) {
    	      if (typeof value == 'number') {
    	        return value;
    	      }
    	      if (isSymbol(value)) {
    	        return NAN;
    	      }
    	      if (isObject(value)) {
    	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    	        value = isObject(other) ? (other + '') : other;
    	      }
    	      if (typeof value != 'string') {
    	        return value === 0 ? value : +value;
    	      }
    	      value = baseTrim(value);
    	      var isBinary = reIsBinary.test(value);
    	      return (isBinary || reIsOctal.test(value))
    	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    	        : (reIsBadHex.test(value) ? NAN : +value);
    	    }

    	    /**
    	     * Converts `value` to a plain object flattening inherited enumerable string
    	     * keyed properties of `value` to own properties of the plain object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {Object} Returns the converted plain object.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.assign({ 'a': 1 }, new Foo);
    	     * // => { 'a': 1, 'b': 2 }
    	     *
    	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
    	     * // => { 'a': 1, 'b': 2, 'c': 3 }
    	     */
    	    function toPlainObject(value) {
    	      return copyObject(value, keysIn(value));
    	    }

    	    /**
    	     * Converts `value` to a safe integer. A safe integer can be compared and
    	     * represented correctly.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.toSafeInteger(3.2);
    	     * // => 3
    	     *
    	     * _.toSafeInteger(Number.MIN_VALUE);
    	     * // => 0
    	     *
    	     * _.toSafeInteger(Infinity);
    	     * // => 9007199254740991
    	     *
    	     * _.toSafeInteger('3.2');
    	     * // => 3
    	     */
    	    function toSafeInteger(value) {
    	      return value
    	        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
    	        : (value === 0 ? value : 0);
    	    }

    	    /**
    	     * Converts `value` to a string. An empty string is returned for `null`
    	     * and `undefined` values. The sign of `-0` is preserved.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Lang
    	     * @param {*} value The value to convert.
    	     * @returns {string} Returns the converted string.
    	     * @example
    	     *
    	     * _.toString(null);
    	     * // => ''
    	     *
    	     * _.toString(-0);
    	     * // => '-0'
    	     *
    	     * _.toString([1, 2, 3]);
    	     * // => '1,2,3'
    	     */
    	    function toString(value) {
    	      return value == null ? '' : baseToString(value);
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Assigns own enumerable string keyed properties of source objects to the
    	     * destination object. Source objects are applied from left to right.
    	     * Subsequent sources overwrite property assignments of previous sources.
    	     *
    	     * **Note:** This method mutates `object` and is loosely based on
    	     * [`Object.assign`](https://mdn.io/Object/assign).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.10.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assignIn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     * }
    	     *
    	     * function Bar() {
    	     *   this.c = 3;
    	     * }
    	     *
    	     * Foo.prototype.b = 2;
    	     * Bar.prototype.d = 4;
    	     *
    	     * _.assign({ 'a': 0 }, new Foo, new Bar);
    	     * // => { 'a': 1, 'c': 3 }
    	     */
    	    var assign = createAssigner(function(object, source) {
    	      if (isPrototype(source) || isArrayLike(source)) {
    	        copyObject(source, keys(source), object);
    	        return;
    	      }
    	      for (var key in source) {
    	        if (hasOwnProperty.call(source, key)) {
    	          assignValue(object, key, source[key]);
    	        }
    	      }
    	    });

    	    /**
    	     * This method is like `_.assign` except that it iterates over own and
    	     * inherited source properties.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias extend
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assign
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     * }
    	     *
    	     * function Bar() {
    	     *   this.c = 3;
    	     * }
    	     *
    	     * Foo.prototype.b = 2;
    	     * Bar.prototype.d = 4;
    	     *
    	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
    	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
    	     */
    	    var assignIn = createAssigner(function(object, source) {
    	      copyObject(source, keysIn(source), object);
    	    });

    	    /**
    	     * This method is like `_.assignIn` except that it accepts `customizer`
    	     * which is invoked to produce the assigned values. If `customizer` returns
    	     * `undefined`, assignment is handled by the method instead. The `customizer`
    	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias extendWith
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} sources The source objects.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assignWith
    	     * @example
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   return _.isUndefined(objValue) ? srcValue : objValue;
    	     * }
    	     *
    	     * var defaults = _.partialRight(_.assignInWith, customizer);
    	     *
    	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
    	      copyObject(source, keysIn(source), object, customizer);
    	    });

    	    /**
    	     * This method is like `_.assign` except that it accepts `customizer`
    	     * which is invoked to produce the assigned values. If `customizer` returns
    	     * `undefined`, assignment is handled by the method instead. The `customizer`
    	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} sources The source objects.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @see _.assignInWith
    	     * @example
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   return _.isUndefined(objValue) ? srcValue : objValue;
    	     * }
    	     *
    	     * var defaults = _.partialRight(_.assignWith, customizer);
    	     *
    	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
    	      copyObject(source, keys(source), object, customizer);
    	    });

    	    /**
    	     * Creates an array of values corresponding to `paths` of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.0.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {...(string|string[])} [paths] The property paths to pick.
    	     * @returns {Array} Returns the picked values.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
    	     *
    	     * _.at(object, ['a[0].b.c', 'a[1]']);
    	     * // => [3, 4]
    	     */
    	    var at = flatRest(baseAt);

    	    /**
    	     * Creates an object that inherits from the `prototype` object. If a
    	     * `properties` object is given, its own enumerable string keyed properties
    	     * are assigned to the created object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.3.0
    	     * @category Object
    	     * @param {Object} prototype The object to inherit from.
    	     * @param {Object} [properties] The properties to assign to the object.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * function Shape() {
    	     *   this.x = 0;
    	     *   this.y = 0;
    	     * }
    	     *
    	     * function Circle() {
    	     *   Shape.call(this);
    	     * }
    	     *
    	     * Circle.prototype = _.create(Shape.prototype, {
    	     *   'constructor': Circle
    	     * });
    	     *
    	     * var circle = new Circle;
    	     * circle instanceof Circle;
    	     * // => true
    	     *
    	     * circle instanceof Shape;
    	     * // => true
    	     */
    	    function create(prototype, properties) {
    	      var result = baseCreate(prototype);
    	      return properties == null ? result : baseAssign(result, properties);
    	    }

    	    /**
    	     * Assigns own and inherited enumerable string keyed properties of source
    	     * objects to the destination object for all destination properties that
    	     * resolve to `undefined`. Source objects are applied from left to right.
    	     * Once a property is set, additional values of the same property are ignored.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.defaultsDeep
    	     * @example
    	     *
    	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
    	     * // => { 'a': 1, 'b': 2 }
    	     */
    	    var defaults = baseRest(function(object, sources) {
    	      object = Object(object);

    	      var index = -1;
    	      var length = sources.length;
    	      var guard = length > 2 ? sources[2] : undefined$1;

    	      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
    	        length = 1;
    	      }

    	      while (++index < length) {
    	        var source = sources[index];
    	        var props = keysIn(source);
    	        var propsIndex = -1;
    	        var propsLength = props.length;

    	        while (++propsIndex < propsLength) {
    	          var key = props[propsIndex];
    	          var value = object[key];

    	          if (value === undefined$1 ||
    	              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
    	            object[key] = source[key];
    	          }
    	        }
    	      }

    	      return object;
    	    });

    	    /**
    	     * This method is like `_.defaults` except that it recursively assigns
    	     * default properties.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @see _.defaults
    	     * @example
    	     *
    	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
    	     * // => { 'a': { 'b': 2, 'c': 3 } }
    	     */
    	    var defaultsDeep = baseRest(function(args) {
    	      args.push(undefined$1, customDefaultsMerge);
    	      return apply(mergeWith, undefined$1, args);
    	    });

    	    /**
    	     * This method is like `_.find` except that it returns the key of the first
    	     * element `predicate` returns truthy for instead of the element itself.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.1.0
    	     * @category Object
    	     * @param {Object} object The object to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {string|undefined} Returns the key of the matched element,
    	     *  else `undefined`.
    	     * @example
    	     *
    	     * var users = {
    	     *   'barney':  { 'age': 36, 'active': true },
    	     *   'fred':    { 'age': 40, 'active': false },
    	     *   'pebbles': { 'age': 1,  'active': true }
    	     * };
    	     *
    	     * _.findKey(users, function(o) { return o.age < 40; });
    	     * // => 'barney' (iteration order is not guaranteed)
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findKey(users, { 'age': 1, 'active': true });
    	     * // => 'pebbles'
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findKey(users, ['active', false]);
    	     * // => 'fred'
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findKey(users, 'active');
    	     * // => 'barney'
    	     */
    	    function findKey(object, predicate) {
    	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    	    }

    	    /**
    	     * This method is like `_.findKey` except that it iterates over elements of
    	     * a collection in the opposite order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Object
    	     * @param {Object} object The object to inspect.
    	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
    	     * @returns {string|undefined} Returns the key of the matched element,
    	     *  else `undefined`.
    	     * @example
    	     *
    	     * var users = {
    	     *   'barney':  { 'age': 36, 'active': true },
    	     *   'fred':    { 'age': 40, 'active': false },
    	     *   'pebbles': { 'age': 1,  'active': true }
    	     * };
    	     *
    	     * _.findLastKey(users, function(o) { return o.age < 40; });
    	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.findLastKey(users, { 'age': 36, 'active': true });
    	     * // => 'barney'
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.findLastKey(users, ['active', false]);
    	     * // => 'fred'
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.findLastKey(users, 'active');
    	     * // => 'pebbles'
    	     */
    	    function findLastKey(object, predicate) {
    	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    	    }

    	    /**
    	     * Iterates over own and inherited enumerable string keyed properties of an
    	     * object and invokes `iteratee` for each property. The iteratee is invoked
    	     * with three arguments: (value, key, object). Iteratee functions may exit
    	     * iteration early by explicitly returning `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.3.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forInRight
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forIn(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
    	     */
    	    function forIn(object, iteratee) {
    	      return object == null
    	        ? object
    	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    	    }

    	    /**
    	     * This method is like `_.forIn` except that it iterates over properties of
    	     * `object` in the opposite order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forIn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forInRight(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
    	     */
    	    function forInRight(object, iteratee) {
    	      return object == null
    	        ? object
    	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    	    }

    	    /**
    	     * Iterates over own enumerable string keyed properties of an object and
    	     * invokes `iteratee` for each property. The iteratee is invoked with three
    	     * arguments: (value, key, object). Iteratee functions may exit iteration
    	     * early by explicitly returning `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.3.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forOwnRight
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forOwn(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
    	     */
    	    function forOwn(object, iteratee) {
    	      return object && baseForOwn(object, getIteratee(iteratee, 3));
    	    }

    	    /**
    	     * This method is like `_.forOwn` except that it iterates over properties of
    	     * `object` in the opposite order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.0.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns `object`.
    	     * @see _.forOwn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.forOwnRight(new Foo, function(value, key) {
    	     *   console.log(key);
    	     * });
    	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
    	     */
    	    function forOwnRight(object, iteratee) {
    	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    	    }

    	    /**
    	     * Creates an array of function property names from own enumerable properties
    	     * of `object`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to inspect.
    	     * @returns {Array} Returns the function names.
    	     * @see _.functionsIn
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = _.constant('a');
    	     *   this.b = _.constant('b');
    	     * }
    	     *
    	     * Foo.prototype.c = _.constant('c');
    	     *
    	     * _.functions(new Foo);
    	     * // => ['a', 'b']
    	     */
    	    function functions(object) {
    	      return object == null ? [] : baseFunctions(object, keys(object));
    	    }

    	    /**
    	     * Creates an array of function property names from own and inherited
    	     * enumerable properties of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to inspect.
    	     * @returns {Array} Returns the function names.
    	     * @see _.functions
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = _.constant('a');
    	     *   this.b = _.constant('b');
    	     * }
    	     *
    	     * Foo.prototype.c = _.constant('c');
    	     *
    	     * _.functionsIn(new Foo);
    	     * // => ['a', 'b', 'c']
    	     */
    	    function functionsIn(object) {
    	      return object == null ? [] : baseFunctions(object, keysIn(object));
    	    }

    	    /**
    	     * Gets the value at `path` of `object`. If the resolved value is
    	     * `undefined`, the `defaultValue` is returned in its place.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the property to get.
    	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
    	     * @returns {*} Returns the resolved value.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
    	     *
    	     * _.get(object, 'a[0].b.c');
    	     * // => 3
    	     *
    	     * _.get(object, ['a', '0', 'b', 'c']);
    	     * // => 3
    	     *
    	     * _.get(object, 'a.b.c', 'default');
    	     * // => 'default'
    	     */
    	    function get(object, path, defaultValue) {
    	      var result = object == null ? undefined$1 : baseGet(object, path);
    	      return result === undefined$1 ? defaultValue : result;
    	    }

    	    /**
    	     * Checks if `path` is a direct property of `object`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path to check.
    	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': { 'b': 2 } };
    	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
    	     *
    	     * _.has(object, 'a');
    	     * // => true
    	     *
    	     * _.has(object, 'a.b');
    	     * // => true
    	     *
    	     * _.has(object, ['a', 'b']);
    	     * // => true
    	     *
    	     * _.has(other, 'a');
    	     * // => false
    	     */
    	    function has(object, path) {
    	      return object != null && hasPath(object, path, baseHas);
    	    }

    	    /**
    	     * Checks if `path` is a direct or inherited property of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path to check.
    	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
    	     * @example
    	     *
    	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
    	     *
    	     * _.hasIn(object, 'a');
    	     * // => true
    	     *
    	     * _.hasIn(object, 'a.b');
    	     * // => true
    	     *
    	     * _.hasIn(object, ['a', 'b']);
    	     * // => true
    	     *
    	     * _.hasIn(object, 'b');
    	     * // => false
    	     */
    	    function hasIn(object, path) {
    	      return object != null && hasPath(object, path, baseHasIn);
    	    }

    	    /**
    	     * Creates an object composed of the inverted keys and values of `object`.
    	     * If `object` contains duplicate values, subsequent values overwrite
    	     * property assignments of previous values.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.7.0
    	     * @category Object
    	     * @param {Object} object The object to invert.
    	     * @returns {Object} Returns the new inverted object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
    	     *
    	     * _.invert(object);
    	     * // => { '1': 'c', '2': 'b' }
    	     */
    	    var invert = createInverter(function(result, value, key) {
    	      if (value != null &&
    	          typeof value.toString != 'function') {
    	        value = nativeObjectToString.call(value);
    	      }

    	      result[value] = key;
    	    }, constant(identity));

    	    /**
    	     * This method is like `_.invert` except that the inverted object is generated
    	     * from the results of running each element of `object` thru `iteratee`. The
    	     * corresponding inverted value of each inverted key is an array of keys
    	     * responsible for generating the inverted value. The iteratee is invoked
    	     * with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.1.0
    	     * @category Object
    	     * @param {Object} object The object to invert.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {Object} Returns the new inverted object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
    	     *
    	     * _.invertBy(object);
    	     * // => { '1': ['a', 'c'], '2': ['b'] }
    	     *
    	     * _.invertBy(object, function(value) {
    	     *   return 'group' + value;
    	     * });
    	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
    	     */
    	    var invertBy = createInverter(function(result, value, key) {
    	      if (value != null &&
    	          typeof value.toString != 'function') {
    	        value = nativeObjectToString.call(value);
    	      }

    	      if (hasOwnProperty.call(result, value)) {
    	        result[value].push(key);
    	      } else {
    	        result[value] = [key];
    	      }
    	    }, getIteratee);

    	    /**
    	     * Invokes the method at `path` of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the method to invoke.
    	     * @param {...*} [args] The arguments to invoke the method with.
    	     * @returns {*} Returns the result of the invoked method.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
    	     *
    	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
    	     * // => [2, 3]
    	     */
    	    var invoke = baseRest(baseInvoke);

    	    /**
    	     * Creates an array of the own enumerable property names of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects. See the
    	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
    	     * for more details.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.keys(new Foo);
    	     * // => ['a', 'b'] (iteration order is not guaranteed)
    	     *
    	     * _.keys('hi');
    	     * // => ['0', '1']
    	     */
    	    function keys(object) {
    	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    	    }

    	    /**
    	     * Creates an array of the own and inherited enumerable property names of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property names.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.keysIn(new Foo);
    	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
    	     */
    	    function keysIn(object) {
    	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    	    }

    	    /**
    	     * The opposite of `_.mapValues`; this method creates an object with the
    	     * same values as `object` and keys generated by running each own enumerable
    	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
    	     * with three arguments: (value, key, object).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.8.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns the new mapped object.
    	     * @see _.mapValues
    	     * @example
    	     *
    	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
    	     *   return key + value;
    	     * });
    	     * // => { 'a1': 1, 'b2': 2 }
    	     */
    	    function mapKeys(object, iteratee) {
    	      var result = {};
    	      iteratee = getIteratee(iteratee, 3);

    	      baseForOwn(object, function(value, key, object) {
    	        baseAssignValue(result, iteratee(value, key, object), value);
    	      });
    	      return result;
    	    }

    	    /**
    	     * Creates an object with the same keys as `object` and values generated
    	     * by running each own enumerable string keyed property of `object` thru
    	     * `iteratee`. The iteratee is invoked with three arguments:
    	     * (value, key, object).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Object} Returns the new mapped object.
    	     * @see _.mapKeys
    	     * @example
    	     *
    	     * var users = {
    	     *   'fred':    { 'user': 'fred',    'age': 40 },
    	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
    	     * };
    	     *
    	     * _.mapValues(users, function(o) { return o.age; });
    	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.mapValues(users, 'age');
    	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
    	     */
    	    function mapValues(object, iteratee) {
    	      var result = {};
    	      iteratee = getIteratee(iteratee, 3);

    	      baseForOwn(object, function(value, key, object) {
    	        baseAssignValue(result, key, iteratee(value, key, object));
    	      });
    	      return result;
    	    }

    	    /**
    	     * This method is like `_.assign` except that it recursively merges own and
    	     * inherited enumerable string keyed properties of source objects into the
    	     * destination object. Source properties that resolve to `undefined` are
    	     * skipped if a destination value exists. Array and plain object properties
    	     * are merged recursively. Other objects and value types are overridden by
    	     * assignment. Source objects are applied from left to right. Subsequent
    	     * sources overwrite property assignments of previous sources.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.5.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} [sources] The source objects.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = {
    	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
    	     * };
    	     *
    	     * var other = {
    	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
    	     * };
    	     *
    	     * _.merge(object, other);
    	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
    	     */
    	    var merge = createAssigner(function(object, source, srcIndex) {
    	      baseMerge(object, source, srcIndex);
    	    });

    	    /**
    	     * This method is like `_.merge` except that it accepts `customizer` which
    	     * is invoked to produce the merged values of the destination and source
    	     * properties. If `customizer` returns `undefined`, merging is handled by the
    	     * method instead. The `customizer` is invoked with six arguments:
    	     * (objValue, srcValue, key, object, source, stack).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The destination object.
    	     * @param {...Object} sources The source objects.
    	     * @param {Function} customizer The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * function customizer(objValue, srcValue) {
    	     *   if (_.isArray(objValue)) {
    	     *     return objValue.concat(srcValue);
    	     *   }
    	     * }
    	     *
    	     * var object = { 'a': [1], 'b': [2] };
    	     * var other = { 'a': [3], 'b': [4] };
    	     *
    	     * _.mergeWith(object, other, customizer);
    	     * // => { 'a': [1, 3], 'b': [2, 4] }
    	     */
    	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
    	      baseMerge(object, source, srcIndex, customizer);
    	    });

    	    /**
    	     * The opposite of `_.pick`; this method creates an object composed of the
    	     * own and inherited enumerable property paths of `object` that are not omitted.
    	     *
    	     * **Note:** This method is considerably slower than `_.pick`.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {...(string|string[])} [paths] The property paths to omit.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.omit(object, ['a', 'c']);
    	     * // => { 'b': '2' }
    	     */
    	    var omit = flatRest(function(object, paths) {
    	      var result = {};
    	      if (object == null) {
    	        return result;
    	      }
    	      var isDeep = false;
    	      paths = arrayMap(paths, function(path) {
    	        path = castPath(path, object);
    	        isDeep || (isDeep = path.length > 1);
    	        return path;
    	      });
    	      copyObject(object, getAllKeysIn(object), result);
    	      if (isDeep) {
    	        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
    	      }
    	      var length = paths.length;
    	      while (length--) {
    	        baseUnset(result, paths[length]);
    	      }
    	      return result;
    	    });

    	    /**
    	     * The opposite of `_.pickBy`; this method creates an object composed of
    	     * the own and inherited enumerable string keyed properties of `object` that
    	     * `predicate` doesn't return truthy for. The predicate is invoked with two
    	     * arguments: (value, key).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {Function} [predicate=_.identity] The function invoked per property.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.omitBy(object, _.isNumber);
    	     * // => { 'b': '2' }
    	     */
    	    function omitBy(object, predicate) {
    	      return pickBy(object, negate(getIteratee(predicate)));
    	    }

    	    /**
    	     * Creates an object composed of the picked `object` properties.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {...(string|string[])} [paths] The property paths to pick.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.pick(object, ['a', 'c']);
    	     * // => { 'a': 1, 'c': 3 }
    	     */
    	    var pick = flatRest(function(object, paths) {
    	      return object == null ? {} : basePick(object, paths);
    	    });

    	    /**
    	     * Creates an object composed of the `object` properties `predicate` returns
    	     * truthy for. The predicate is invoked with two arguments: (value, key).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The source object.
    	     * @param {Function} [predicate=_.identity] The function invoked per property.
    	     * @returns {Object} Returns the new object.
    	     * @example
    	     *
    	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
    	     *
    	     * _.pickBy(object, _.isNumber);
    	     * // => { 'a': 1, 'c': 3 }
    	     */
    	    function pickBy(object, predicate) {
    	      if (object == null) {
    	        return {};
    	      }
    	      var props = arrayMap(getAllKeysIn(object), function(prop) {
    	        return [prop];
    	      });
    	      predicate = getIteratee(predicate);
    	      return basePickBy(object, props, function(value, path) {
    	        return predicate(value, path[0]);
    	      });
    	    }

    	    /**
    	     * This method is like `_.get` except that if the resolved value is a
    	     * function it's invoked with the `this` binding of its parent object and
    	     * its result is returned.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @param {Array|string} path The path of the property to resolve.
    	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
    	     * @returns {*} Returns the resolved value.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
    	     *
    	     * _.result(object, 'a[0].b.c1');
    	     * // => 3
    	     *
    	     * _.result(object, 'a[0].b.c2');
    	     * // => 4
    	     *
    	     * _.result(object, 'a[0].b.c3', 'default');
    	     * // => 'default'
    	     *
    	     * _.result(object, 'a[0].b.c3', _.constant('default'));
    	     * // => 'default'
    	     */
    	    function result(object, path, defaultValue) {
    	      path = castPath(path, object);

    	      var index = -1,
    	          length = path.length;

    	      // Ensure the loop is entered when path is empty.
    	      if (!length) {
    	        length = 1;
    	        object = undefined$1;
    	      }
    	      while (++index < length) {
    	        var value = object == null ? undefined$1 : object[toKey(path[index])];
    	        if (value === undefined$1) {
    	          index = length;
    	          value = defaultValue;
    	        }
    	        object = isFunction(value) ? value.call(object) : value;
    	      }
    	      return object;
    	    }

    	    /**
    	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
    	     * it's created. Arrays are created for missing index properties while objects
    	     * are created for all other missing properties. Use `_.setWith` to customize
    	     * `path` creation.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {*} value The value to set.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
    	     *
    	     * _.set(object, 'a[0].b.c', 4);
    	     * console.log(object.a[0].b.c);
    	     * // => 4
    	     *
    	     * _.set(object, ['x', '0', 'y', 'z'], 5);
    	     * console.log(object.x[0].y.z);
    	     * // => 5
    	     */
    	    function set(object, path, value) {
    	      return object == null ? object : baseSet(object, path, value);
    	    }

    	    /**
    	     * This method is like `_.set` except that it accepts `customizer` which is
    	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
    	     * path creation is handled by the method instead. The `customizer` is invoked
    	     * with three arguments: (nsValue, key, nsObject).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {*} value The value to set.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = {};
    	     *
    	     * _.setWith(object, '[0][1]', 'a', Object);
    	     * // => { '0': { '1': 'a' } }
    	     */
    	    function setWith(object, path, value, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      return object == null ? object : baseSet(object, path, value, customizer);
    	    }

    	    /**
    	     * Creates an array of own enumerable string keyed-value pairs for `object`
    	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
    	     * entries are returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias entries
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the key-value pairs.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.toPairs(new Foo);
    	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
    	     */
    	    var toPairs = createToPairs(keys);

    	    /**
    	     * Creates an array of own and inherited enumerable string keyed-value pairs
    	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
    	     * or set, its entries are returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @alias entriesIn
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the key-value pairs.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.toPairsIn(new Foo);
    	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
    	     */
    	    var toPairsIn = createToPairs(keysIn);

    	    /**
    	     * An alternative to `_.reduce`; this method transforms `object` to a new
    	     * `accumulator` object which is the result of running each of its own
    	     * enumerable string keyed properties thru `iteratee`, with each invocation
    	     * potentially mutating the `accumulator` object. If `accumulator` is not
    	     * provided, a new object with the same `[[Prototype]]` will be used. The
    	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
    	     * Iteratee functions may exit iteration early by explicitly returning `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.3.0
    	     * @category Object
    	     * @param {Object} object The object to iterate over.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @param {*} [accumulator] The custom accumulator value.
    	     * @returns {*} Returns the accumulated value.
    	     * @example
    	     *
    	     * _.transform([2, 3, 4], function(result, n) {
    	     *   result.push(n *= n);
    	     *   return n % 2 == 0;
    	     * }, []);
    	     * // => [4, 9]
    	     *
    	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
    	     *   (result[value] || (result[value] = [])).push(key);
    	     * }, {});
    	     * // => { '1': ['a', 'c'], '2': ['b'] }
    	     */
    	    function transform(object, iteratee, accumulator) {
    	      var isArr = isArray(object),
    	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

    	      iteratee = getIteratee(iteratee, 4);
    	      if (accumulator == null) {
    	        var Ctor = object && object.constructor;
    	        if (isArrLike) {
    	          accumulator = isArr ? new Ctor : [];
    	        }
    	        else if (isObject(object)) {
    	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
    	        }
    	        else {
    	          accumulator = {};
    	        }
    	      }
    	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
    	        return iteratee(accumulator, value, index, object);
    	      });
    	      return accumulator;
    	    }

    	    /**
    	     * Removes the property at `path` of `object`.
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to unset.
    	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
    	     * _.unset(object, 'a[0].b.c');
    	     * // => true
    	     *
    	     * console.log(object);
    	     * // => { 'a': [{ 'b': {} }] };
    	     *
    	     * _.unset(object, ['a', '0', 'b', 'c']);
    	     * // => true
    	     *
    	     * console.log(object);
    	     * // => { 'a': [{ 'b': {} }] };
    	     */
    	    function unset(object, path) {
    	      return object == null ? true : baseUnset(object, path);
    	    }

    	    /**
    	     * This method is like `_.set` except that accepts `updater` to produce the
    	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
    	     * is invoked with one argument: (value).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.6.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {Function} updater The function to produce the updated value.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
    	     *
    	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
    	     * console.log(object.a[0].b.c);
    	     * // => 9
    	     *
    	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
    	     * console.log(object.x[0].y.z);
    	     * // => 0
    	     */
    	    function update(object, path, updater) {
    	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    	    }

    	    /**
    	     * This method is like `_.update` except that it accepts `customizer` which is
    	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
    	     * path creation is handled by the method instead. The `customizer` is invoked
    	     * with three arguments: (nsValue, key, nsObject).
    	     *
    	     * **Note:** This method mutates `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.6.0
    	     * @category Object
    	     * @param {Object} object The object to modify.
    	     * @param {Array|string} path The path of the property to set.
    	     * @param {Function} updater The function to produce the updated value.
    	     * @param {Function} [customizer] The function to customize assigned values.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var object = {};
    	     *
    	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
    	     * // => { '0': { '1': 'a' } }
    	     */
    	    function updateWith(object, path, updater, customizer) {
    	      customizer = typeof customizer == 'function' ? customizer : undefined$1;
    	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    	    }

    	    /**
    	     * Creates an array of the own enumerable string keyed property values of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property values.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.values(new Foo);
    	     * // => [1, 2] (iteration order is not guaranteed)
    	     *
    	     * _.values('hi');
    	     * // => ['h', 'i']
    	     */
    	    function values(object) {
    	      return object == null ? [] : baseValues(object, keys(object));
    	    }

    	    /**
    	     * Creates an array of the own and inherited enumerable string keyed property
    	     * values of `object`.
    	     *
    	     * **Note:** Non-object values are coerced to objects.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Object
    	     * @param {Object} object The object to query.
    	     * @returns {Array} Returns the array of property values.
    	     * @example
    	     *
    	     * function Foo() {
    	     *   this.a = 1;
    	     *   this.b = 2;
    	     * }
    	     *
    	     * Foo.prototype.c = 3;
    	     *
    	     * _.valuesIn(new Foo);
    	     * // => [1, 2, 3] (iteration order is not guaranteed)
    	     */
    	    function valuesIn(object) {
    	      return object == null ? [] : baseValues(object, keysIn(object));
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Number
    	     * @param {number} number The number to clamp.
    	     * @param {number} [lower] The lower bound.
    	     * @param {number} upper The upper bound.
    	     * @returns {number} Returns the clamped number.
    	     * @example
    	     *
    	     * _.clamp(-10, -5, 5);
    	     * // => -5
    	     *
    	     * _.clamp(10, -5, 5);
    	     * // => 5
    	     */
    	    function clamp(number, lower, upper) {
    	      if (upper === undefined$1) {
    	        upper = lower;
    	        lower = undefined$1;
    	      }
    	      if (upper !== undefined$1) {
    	        upper = toNumber(upper);
    	        upper = upper === upper ? upper : 0;
    	      }
    	      if (lower !== undefined$1) {
    	        lower = toNumber(lower);
    	        lower = lower === lower ? lower : 0;
    	      }
    	      return baseClamp(toNumber(number), lower, upper);
    	    }

    	    /**
    	     * Checks if `n` is between `start` and up to, but not including, `end`. If
    	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
    	     * If `start` is greater than `end` the params are swapped to support
    	     * negative ranges.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.3.0
    	     * @category Number
    	     * @param {number} number The number to check.
    	     * @param {number} [start=0] The start of the range.
    	     * @param {number} end The end of the range.
    	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
    	     * @see _.range, _.rangeRight
    	     * @example
    	     *
    	     * _.inRange(3, 2, 4);
    	     * // => true
    	     *
    	     * _.inRange(4, 8);
    	     * // => true
    	     *
    	     * _.inRange(4, 2);
    	     * // => false
    	     *
    	     * _.inRange(2, 2);
    	     * // => false
    	     *
    	     * _.inRange(1.2, 2);
    	     * // => true
    	     *
    	     * _.inRange(5.2, 4);
    	     * // => false
    	     *
    	     * _.inRange(-3, -2, -6);
    	     * // => true
    	     */
    	    function inRange(number, start, end) {
    	      start = toFinite(start);
    	      if (end === undefined$1) {
    	        end = start;
    	        start = 0;
    	      } else {
    	        end = toFinite(end);
    	      }
    	      number = toNumber(number);
    	      return baseInRange(number, start, end);
    	    }

    	    /**
    	     * Produces a random number between the inclusive `lower` and `upper` bounds.
    	     * If only one argument is provided a number between `0` and the given number
    	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
    	     * floats, a floating-point number is returned instead of an integer.
    	     *
    	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
    	     * floating-point values which can produce unexpected results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.7.0
    	     * @category Number
    	     * @param {number} [lower=0] The lower bound.
    	     * @param {number} [upper=1] The upper bound.
    	     * @param {boolean} [floating] Specify returning a floating-point number.
    	     * @returns {number} Returns the random number.
    	     * @example
    	     *
    	     * _.random(0, 5);
    	     * // => an integer between 0 and 5
    	     *
    	     * _.random(5);
    	     * // => also an integer between 0 and 5
    	     *
    	     * _.random(5, true);
    	     * // => a floating-point number between 0 and 5
    	     *
    	     * _.random(1.2, 5.2);
    	     * // => a floating-point number between 1.2 and 5.2
    	     */
    	    function random(lower, upper, floating) {
    	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
    	        upper = floating = undefined$1;
    	      }
    	      if (floating === undefined$1) {
    	        if (typeof upper == 'boolean') {
    	          floating = upper;
    	          upper = undefined$1;
    	        }
    	        else if (typeof lower == 'boolean') {
    	          floating = lower;
    	          lower = undefined$1;
    	        }
    	      }
    	      if (lower === undefined$1 && upper === undefined$1) {
    	        lower = 0;
    	        upper = 1;
    	      }
    	      else {
    	        lower = toFinite(lower);
    	        if (upper === undefined$1) {
    	          upper = lower;
    	          lower = 0;
    	        } else {
    	          upper = toFinite(upper);
    	        }
    	      }
    	      if (lower > upper) {
    	        var temp = lower;
    	        lower = upper;
    	        upper = temp;
    	      }
    	      if (floating || lower % 1 || upper % 1) {
    	        var rand = nativeRandom();
    	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
    	      }
    	      return baseRandom(lower, upper);
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the camel cased string.
    	     * @example
    	     *
    	     * _.camelCase('Foo Bar');
    	     * // => 'fooBar'
    	     *
    	     * _.camelCase('--foo-bar--');
    	     * // => 'fooBar'
    	     *
    	     * _.camelCase('__FOO_BAR__');
    	     * // => 'fooBar'
    	     */
    	    var camelCase = createCompounder(function(result, word, index) {
    	      word = word.toLowerCase();
    	      return result + (index ? capitalize(word) : word);
    	    });

    	    /**
    	     * Converts the first character of `string` to upper case and the remaining
    	     * to lower case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to capitalize.
    	     * @returns {string} Returns the capitalized string.
    	     * @example
    	     *
    	     * _.capitalize('FRED');
    	     * // => 'Fred'
    	     */
    	    function capitalize(string) {
    	      return upperFirst(toString(string).toLowerCase());
    	    }

    	    /**
    	     * Deburrs `string` by converting
    	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
    	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
    	     * letters to basic Latin letters and removing
    	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to deburr.
    	     * @returns {string} Returns the deburred string.
    	     * @example
    	     *
    	     * _.deburr('déjà vu');
    	     * // => 'deja vu'
    	     */
    	    function deburr(string) {
    	      string = toString(string);
    	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    	    }

    	    /**
    	     * Checks if `string` ends with the given target string.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to inspect.
    	     * @param {string} [target] The string to search for.
    	     * @param {number} [position=string.length] The position to search up to.
    	     * @returns {boolean} Returns `true` if `string` ends with `target`,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.endsWith('abc', 'c');
    	     * // => true
    	     *
    	     * _.endsWith('abc', 'b');
    	     * // => false
    	     *
    	     * _.endsWith('abc', 'b', 2);
    	     * // => true
    	     */
    	    function endsWith(string, target, position) {
    	      string = toString(string);
    	      target = baseToString(target);

    	      var length = string.length;
    	      position = position === undefined$1
    	        ? length
    	        : baseClamp(toInteger(position), 0, length);

    	      var end = position;
    	      position -= target.length;
    	      return position >= 0 && string.slice(position, end) == target;
    	    }

    	    /**
    	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
    	     * corresponding HTML entities.
    	     *
    	     * **Note:** No other characters are escaped. To escape additional
    	     * characters use a third-party library like [_he_](https://mths.be/he).
    	     *
    	     * Though the ">" character is escaped for symmetry, characters like
    	     * ">" and "/" don't need escaping in HTML and have no special meaning
    	     * unless they're part of a tag or unquoted attribute value. See
    	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
    	     * (under "semi-related fun fact") for more details.
    	     *
    	     * When working with HTML you should always
    	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
    	     * XSS vectors.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category String
    	     * @param {string} [string=''] The string to escape.
    	     * @returns {string} Returns the escaped string.
    	     * @example
    	     *
    	     * _.escape('fred, barney, & pebbles');
    	     * // => 'fred, barney, &amp; pebbles'
    	     */
    	    function escape(string) {
    	      string = toString(string);
    	      return (string && reHasUnescapedHtml.test(string))
    	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
    	        : string;
    	    }

    	    /**
    	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
    	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to escape.
    	     * @returns {string} Returns the escaped string.
    	     * @example
    	     *
    	     * _.escapeRegExp('[lodash](https://lodash.com/)');
    	     * // => '\[lodash\]\(https://lodash\.com/\)'
    	     */
    	    function escapeRegExp(string) {
    	      string = toString(string);
    	      return (string && reHasRegExpChar.test(string))
    	        ? string.replace(reRegExpChar, '\\$&')
    	        : string;
    	    }

    	    /**
    	     * Converts `string` to
    	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the kebab cased string.
    	     * @example
    	     *
    	     * _.kebabCase('Foo Bar');
    	     * // => 'foo-bar'
    	     *
    	     * _.kebabCase('fooBar');
    	     * // => 'foo-bar'
    	     *
    	     * _.kebabCase('__FOO_BAR__');
    	     * // => 'foo-bar'
    	     */
    	    var kebabCase = createCompounder(function(result, word, index) {
    	      return result + (index ? '-' : '') + word.toLowerCase();
    	    });

    	    /**
    	     * Converts `string`, as space separated words, to lower case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the lower cased string.
    	     * @example
    	     *
    	     * _.lowerCase('--Foo-Bar--');
    	     * // => 'foo bar'
    	     *
    	     * _.lowerCase('fooBar');
    	     * // => 'foo bar'
    	     *
    	     * _.lowerCase('__FOO_BAR__');
    	     * // => 'foo bar'
    	     */
    	    var lowerCase = createCompounder(function(result, word, index) {
    	      return result + (index ? ' ' : '') + word.toLowerCase();
    	    });

    	    /**
    	     * Converts the first character of `string` to lower case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the converted string.
    	     * @example
    	     *
    	     * _.lowerFirst('Fred');
    	     * // => 'fred'
    	     *
    	     * _.lowerFirst('FRED');
    	     * // => 'fRED'
    	     */
    	    var lowerFirst = createCaseFirst('toLowerCase');

    	    /**
    	     * Pads `string` on the left and right sides if it's shorter than `length`.
    	     * Padding characters are truncated if they can't be evenly divided by `length`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to pad.
    	     * @param {number} [length=0] The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padded string.
    	     * @example
    	     *
    	     * _.pad('abc', 8);
    	     * // => '  abc   '
    	     *
    	     * _.pad('abc', 8, '_-');
    	     * // => '_-abc_-_'
    	     *
    	     * _.pad('abc', 3);
    	     * // => 'abc'
    	     */
    	    function pad(string, length, chars) {
    	      string = toString(string);
    	      length = toInteger(length);

    	      var strLength = length ? stringSize(string) : 0;
    	      if (!length || strLength >= length) {
    	        return string;
    	      }
    	      var mid = (length - strLength) / 2;
    	      return (
    	        createPadding(nativeFloor(mid), chars) +
    	        string +
    	        createPadding(nativeCeil(mid), chars)
    	      );
    	    }

    	    /**
    	     * Pads `string` on the right side if it's shorter than `length`. Padding
    	     * characters are truncated if they exceed `length`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to pad.
    	     * @param {number} [length=0] The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padded string.
    	     * @example
    	     *
    	     * _.padEnd('abc', 6);
    	     * // => 'abc   '
    	     *
    	     * _.padEnd('abc', 6, '_-');
    	     * // => 'abc_-_'
    	     *
    	     * _.padEnd('abc', 3);
    	     * // => 'abc'
    	     */
    	    function padEnd(string, length, chars) {
    	      string = toString(string);
    	      length = toInteger(length);

    	      var strLength = length ? stringSize(string) : 0;
    	      return (length && strLength < length)
    	        ? (string + createPadding(length - strLength, chars))
    	        : string;
    	    }

    	    /**
    	     * Pads `string` on the left side if it's shorter than `length`. Padding
    	     * characters are truncated if they exceed `length`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to pad.
    	     * @param {number} [length=0] The padding length.
    	     * @param {string} [chars=' '] The string used as padding.
    	     * @returns {string} Returns the padded string.
    	     * @example
    	     *
    	     * _.padStart('abc', 6);
    	     * // => '   abc'
    	     *
    	     * _.padStart('abc', 6, '_-');
    	     * // => '_-_abc'
    	     *
    	     * _.padStart('abc', 3);
    	     * // => 'abc'
    	     */
    	    function padStart(string, length, chars) {
    	      string = toString(string);
    	      length = toInteger(length);

    	      var strLength = length ? stringSize(string) : 0;
    	      return (length && strLength < length)
    	        ? (createPadding(length - strLength, chars) + string)
    	        : string;
    	    }

    	    /**
    	     * Converts `string` to an integer of the specified radix. If `radix` is
    	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
    	     * hexadecimal, in which case a `radix` of `16` is used.
    	     *
    	     * **Note:** This method aligns with the
    	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 1.1.0
    	     * @category String
    	     * @param {string} string The string to convert.
    	     * @param {number} [radix=10] The radix to interpret `value` by.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {number} Returns the converted integer.
    	     * @example
    	     *
    	     * _.parseInt('08');
    	     * // => 8
    	     *
    	     * _.map(['6', '08', '10'], _.parseInt);
    	     * // => [6, 8, 10]
    	     */
    	    function parseInt(string, radix, guard) {
    	      if (guard || radix == null) {
    	        radix = 0;
    	      } else if (radix) {
    	        radix = +radix;
    	      }
    	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    	    }

    	    /**
    	     * Repeats the given string `n` times.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to repeat.
    	     * @param {number} [n=1] The number of times to repeat the string.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the repeated string.
    	     * @example
    	     *
    	     * _.repeat('*', 3);
    	     * // => '***'
    	     *
    	     * _.repeat('abc', 2);
    	     * // => 'abcabc'
    	     *
    	     * _.repeat('abc', 0);
    	     * // => ''
    	     */
    	    function repeat(string, n, guard) {
    	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
    	        n = 1;
    	      } else {
    	        n = toInteger(n);
    	      }
    	      return baseRepeat(toString(string), n);
    	    }

    	    /**
    	     * Replaces matches for `pattern` in `string` with `replacement`.
    	     *
    	     * **Note:** This method is based on
    	     * [`String#replace`](https://mdn.io/String/replace).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to modify.
    	     * @param {RegExp|string} pattern The pattern to replace.
    	     * @param {Function|string} replacement The match replacement.
    	     * @returns {string} Returns the modified string.
    	     * @example
    	     *
    	     * _.replace('Hi Fred', 'Fred', 'Barney');
    	     * // => 'Hi Barney'
    	     */
    	    function replace() {
    	      var args = arguments,
    	          string = toString(args[0]);

    	      return args.length < 3 ? string : string.replace(args[1], args[2]);
    	    }

    	    /**
    	     * Converts `string` to
    	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the snake cased string.
    	     * @example
    	     *
    	     * _.snakeCase('Foo Bar');
    	     * // => 'foo_bar'
    	     *
    	     * _.snakeCase('fooBar');
    	     * // => 'foo_bar'
    	     *
    	     * _.snakeCase('--FOO-BAR--');
    	     * // => 'foo_bar'
    	     */
    	    var snakeCase = createCompounder(function(result, word, index) {
    	      return result + (index ? '_' : '') + word.toLowerCase();
    	    });

    	    /**
    	     * Splits `string` by `separator`.
    	     *
    	     * **Note:** This method is based on
    	     * [`String#split`](https://mdn.io/String/split).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to split.
    	     * @param {RegExp|string} separator The separator pattern to split by.
    	     * @param {number} [limit] The length to truncate results to.
    	     * @returns {Array} Returns the string segments.
    	     * @example
    	     *
    	     * _.split('a-b-c', '-', 2);
    	     * // => ['a', 'b']
    	     */
    	    function split(string, separator, limit) {
    	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
    	        separator = limit = undefined$1;
    	      }
    	      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
    	      if (!limit) {
    	        return [];
    	      }
    	      string = toString(string);
    	      if (string && (
    	            typeof separator == 'string' ||
    	            (separator != null && !isRegExp(separator))
    	          )) {
    	        separator = baseToString(separator);
    	        if (!separator && hasUnicode(string)) {
    	          return castSlice(stringToArray(string), 0, limit);
    	        }
    	      }
    	      return string.split(separator, limit);
    	    }

    	    /**
    	     * Converts `string` to
    	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.1.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the start cased string.
    	     * @example
    	     *
    	     * _.startCase('--foo-bar--');
    	     * // => 'Foo Bar'
    	     *
    	     * _.startCase('fooBar');
    	     * // => 'Foo Bar'
    	     *
    	     * _.startCase('__FOO_BAR__');
    	     * // => 'FOO BAR'
    	     */
    	    var startCase = createCompounder(function(result, word, index) {
    	      return result + (index ? ' ' : '') + upperFirst(word);
    	    });

    	    /**
    	     * Checks if `string` starts with the given target string.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to inspect.
    	     * @param {string} [target] The string to search for.
    	     * @param {number} [position=0] The position to search from.
    	     * @returns {boolean} Returns `true` if `string` starts with `target`,
    	     *  else `false`.
    	     * @example
    	     *
    	     * _.startsWith('abc', 'a');
    	     * // => true
    	     *
    	     * _.startsWith('abc', 'b');
    	     * // => false
    	     *
    	     * _.startsWith('abc', 'b', 1);
    	     * // => true
    	     */
    	    function startsWith(string, target, position) {
    	      string = toString(string);
    	      position = position == null
    	        ? 0
    	        : baseClamp(toInteger(position), 0, string.length);

    	      target = baseToString(target);
    	      return string.slice(position, position + target.length) == target;
    	    }

    	    /**
    	     * Creates a compiled template function that can interpolate data properties
    	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
    	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
    	     * properties may be accessed as free variables in the template. If a setting
    	     * object is given, it takes precedence over `_.templateSettings` values.
    	     *
    	     * **Note:** In the development build `_.template` utilizes
    	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
    	     * for easier debugging.
    	     *
    	     * For more information on precompiling templates see
    	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
    	     *
    	     * For more information on Chrome extension sandboxes see
    	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category String
    	     * @param {string} [string=''] The template string.
    	     * @param {Object} [options={}] The options object.
    	     * @param {RegExp} [options.escape=_.templateSettings.escape]
    	     *  The HTML "escape" delimiter.
    	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
    	     *  The "evaluate" delimiter.
    	     * @param {Object} [options.imports=_.templateSettings.imports]
    	     *  An object to import into the template as free variables.
    	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
    	     *  The "interpolate" delimiter.
    	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
    	     *  The sourceURL of the compiled template.
    	     * @param {string} [options.variable='obj']
    	     *  The data object variable name.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Function} Returns the compiled template function.
    	     * @example
    	     *
    	     * // Use the "interpolate" delimiter to create a compiled template.
    	     * var compiled = _.template('hello <%= user %>!');
    	     * compiled({ 'user': 'fred' });
    	     * // => 'hello fred!'
    	     *
    	     * // Use the HTML "escape" delimiter to escape data property values.
    	     * var compiled = _.template('<b><%- value %></b>');
    	     * compiled({ 'value': '<script>' });
    	     * // => '<b>&lt;script&gt;</b>'
    	     *
    	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
    	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
    	     * compiled({ 'users': ['fred', 'barney'] });
    	     * // => '<li>fred</li><li>barney</li>'
    	     *
    	     * // Use the internal `print` function in "evaluate" delimiters.
    	     * var compiled = _.template('<% print("hello " + user); %>!');
    	     * compiled({ 'user': 'barney' });
    	     * // => 'hello barney!'
    	     *
    	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
    	     * // Disable support by replacing the "interpolate" delimiter.
    	     * var compiled = _.template('hello ${ user }!');
    	     * compiled({ 'user': 'pebbles' });
    	     * // => 'hello pebbles!'
    	     *
    	     * // Use backslashes to treat delimiters as plain text.
    	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
    	     * compiled({ 'value': 'ignored' });
    	     * // => '<%- value %>'
    	     *
    	     * // Use the `imports` option to import `jQuery` as `jq`.
    	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
    	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
    	     * compiled({ 'users': ['fred', 'barney'] });
    	     * // => '<li>fred</li><li>barney</li>'
    	     *
    	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
    	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
    	     * compiled(data);
    	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
    	     *
    	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
    	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
    	     * compiled.source;
    	     * // => function(data) {
    	     * //   var __t, __p = '';
    	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
    	     * //   return __p;
    	     * // }
    	     *
    	     * // Use custom template delimiters.
    	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
    	     * var compiled = _.template('hello {{ user }}!');
    	     * compiled({ 'user': 'mustache' });
    	     * // => 'hello mustache!'
    	     *
    	     * // Use the `source` property to inline compiled templates for meaningful
    	     * // line numbers in error messages and stack traces.
    	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
    	     *   var JST = {\
    	     *     "main": ' + _.template(mainText).source + '\
    	     *   };\
    	     * ');
    	     */
    	    function template(string, options, guard) {
    	      // Based on John Resig's `tmpl` implementation
    	      // (http://ejohn.org/blog/javascript-micro-templating/)
    	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
    	      var settings = lodash.templateSettings;

    	      if (guard && isIterateeCall(string, options, guard)) {
    	        options = undefined$1;
    	      }
    	      string = toString(string);
    	      options = assignInWith({}, options, settings, customDefaultsAssignIn);

    	      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
    	          importsKeys = keys(imports),
    	          importsValues = baseValues(imports, importsKeys);

    	      var isEscaping,
    	          isEvaluating,
    	          index = 0,
    	          interpolate = options.interpolate || reNoMatch,
    	          source = "__p += '";

    	      // Compile the regexp to match each delimiter.
    	      var reDelimiters = RegExp(
    	        (options.escape || reNoMatch).source + '|' +
    	        interpolate.source + '|' +
    	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
    	        (options.evaluate || reNoMatch).source + '|$'
    	      , 'g');

    	      // Use a sourceURL for easier debugging.
    	      // The sourceURL gets injected into the source that's eval-ed, so be careful
    	      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
    	      // and escape the comment, thus injecting code that gets evaled.
    	      var sourceURL = '//# sourceURL=' +
    	        (hasOwnProperty.call(options, 'sourceURL')
    	          ? (options.sourceURL + '').replace(/\s/g, ' ')
    	          : ('lodash.templateSources[' + (++templateCounter) + ']')
    	        ) + '\n';

    	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
    	        interpolateValue || (interpolateValue = esTemplateValue);

    	        // Escape characters that can't be included in string literals.
    	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

    	        // Replace delimiters with snippets.
    	        if (escapeValue) {
    	          isEscaping = true;
    	          source += "' +\n__e(" + escapeValue + ") +\n'";
    	        }
    	        if (evaluateValue) {
    	          isEvaluating = true;
    	          source += "';\n" + evaluateValue + ";\n__p += '";
    	        }
    	        if (interpolateValue) {
    	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
    	        }
    	        index = offset + match.length;

    	        // The JS engine embedded in Adobe products needs `match` returned in
    	        // order to produce the correct `offset` value.
    	        return match;
    	      });

    	      source += "';\n";

    	      // If `variable` is not specified wrap a with-statement around the generated
    	      // code to add the data object to the top of the scope chain.
    	      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
    	      if (!variable) {
    	        source = 'with (obj) {\n' + source + '\n}\n';
    	      }
    	      // Throw an error if a forbidden character was found in `variable`, to prevent
    	      // potential command injection attacks.
    	      else if (reForbiddenIdentifierChars.test(variable)) {
    	        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
    	      }

    	      // Cleanup code by stripping empty strings.
    	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
    	        .replace(reEmptyStringMiddle, '$1')
    	        .replace(reEmptyStringTrailing, '$1;');

    	      // Frame code as the function body.
    	      source = 'function(' + (variable || 'obj') + ') {\n' +
    	        (variable
    	          ? ''
    	          : 'obj || (obj = {});\n'
    	        ) +
    	        "var __t, __p = ''" +
    	        (isEscaping
    	           ? ', __e = _.escape'
    	           : ''
    	        ) +
    	        (isEvaluating
    	          ? ', __j = Array.prototype.join;\n' +
    	            "function print() { __p += __j.call(arguments, '') }\n"
    	          : ';\n'
    	        ) +
    	        source +
    	        'return __p\n}';

    	      var result = attempt(function() {
    	        return Function(importsKeys, sourceURL + 'return ' + source)
    	          .apply(undefined$1, importsValues);
    	      });

    	      // Provide the compiled function's source by its `toString` method or
    	      // the `source` property as a convenience for inlining compiled templates.
    	      result.source = source;
    	      if (isError(result)) {
    	        throw result;
    	      }
    	      return result;
    	    }

    	    /**
    	     * Converts `string`, as a whole, to lower case just like
    	     * [String#toLowerCase](https://mdn.io/toLowerCase).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the lower cased string.
    	     * @example
    	     *
    	     * _.toLower('--Foo-Bar--');
    	     * // => '--foo-bar--'
    	     *
    	     * _.toLower('fooBar');
    	     * // => 'foobar'
    	     *
    	     * _.toLower('__FOO_BAR__');
    	     * // => '__foo_bar__'
    	     */
    	    function toLower(value) {
    	      return toString(value).toLowerCase();
    	    }

    	    /**
    	     * Converts `string`, as a whole, to upper case just like
    	     * [String#toUpperCase](https://mdn.io/toUpperCase).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the upper cased string.
    	     * @example
    	     *
    	     * _.toUpper('--foo-bar--');
    	     * // => '--FOO-BAR--'
    	     *
    	     * _.toUpper('fooBar');
    	     * // => 'FOOBAR'
    	     *
    	     * _.toUpper('__foo_bar__');
    	     * // => '__FOO_BAR__'
    	     */
    	    function toUpper(value) {
    	      return toString(value).toUpperCase();
    	    }

    	    /**
    	     * Removes leading and trailing whitespace or specified characters from `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to trim.
    	     * @param {string} [chars=whitespace] The characters to trim.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the trimmed string.
    	     * @example
    	     *
    	     * _.trim('  abc  ');
    	     * // => 'abc'
    	     *
    	     * _.trim('-_-abc-_-', '_-');
    	     * // => 'abc'
    	     *
    	     * _.map(['  foo  ', '  bar  '], _.trim);
    	     * // => ['foo', 'bar']
    	     */
    	    function trim(string, chars, guard) {
    	      string = toString(string);
    	      if (string && (guard || chars === undefined$1)) {
    	        return baseTrim(string);
    	      }
    	      if (!string || !(chars = baseToString(chars))) {
    	        return string;
    	      }
    	      var strSymbols = stringToArray(string),
    	          chrSymbols = stringToArray(chars),
    	          start = charsStartIndex(strSymbols, chrSymbols),
    	          end = charsEndIndex(strSymbols, chrSymbols) + 1;

    	      return castSlice(strSymbols, start, end).join('');
    	    }

    	    /**
    	     * Removes trailing whitespace or specified characters from `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to trim.
    	     * @param {string} [chars=whitespace] The characters to trim.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the trimmed string.
    	     * @example
    	     *
    	     * _.trimEnd('  abc  ');
    	     * // => '  abc'
    	     *
    	     * _.trimEnd('-_-abc-_-', '_-');
    	     * // => '-_-abc'
    	     */
    	    function trimEnd(string, chars, guard) {
    	      string = toString(string);
    	      if (string && (guard || chars === undefined$1)) {
    	        return string.slice(0, trimmedEndIndex(string) + 1);
    	      }
    	      if (!string || !(chars = baseToString(chars))) {
    	        return string;
    	      }
    	      var strSymbols = stringToArray(string),
    	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

    	      return castSlice(strSymbols, 0, end).join('');
    	    }

    	    /**
    	     * Removes leading whitespace or specified characters from `string`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to trim.
    	     * @param {string} [chars=whitespace] The characters to trim.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {string} Returns the trimmed string.
    	     * @example
    	     *
    	     * _.trimStart('  abc  ');
    	     * // => 'abc  '
    	     *
    	     * _.trimStart('-_-abc-_-', '_-');
    	     * // => 'abc-_-'
    	     */
    	    function trimStart(string, chars, guard) {
    	      string = toString(string);
    	      if (string && (guard || chars === undefined$1)) {
    	        return string.replace(reTrimStart, '');
    	      }
    	      if (!string || !(chars = baseToString(chars))) {
    	        return string;
    	      }
    	      var strSymbols = stringToArray(string),
    	          start = charsStartIndex(strSymbols, stringToArray(chars));

    	      return castSlice(strSymbols, start).join('');
    	    }

    	    /**
    	     * Truncates `string` if it's longer than the given maximum string length.
    	     * The last characters of the truncated string are replaced with the omission
    	     * string which defaults to "...".
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to truncate.
    	     * @param {Object} [options={}] The options object.
    	     * @param {number} [options.length=30] The maximum string length.
    	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
    	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
    	     * @returns {string} Returns the truncated string.
    	     * @example
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino');
    	     * // => 'hi-diddly-ho there, neighbo...'
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino', {
    	     *   'length': 24,
    	     *   'separator': ' '
    	     * });
    	     * // => 'hi-diddly-ho there,...'
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino', {
    	     *   'length': 24,
    	     *   'separator': /,? +/
    	     * });
    	     * // => 'hi-diddly-ho there...'
    	     *
    	     * _.truncate('hi-diddly-ho there, neighborino', {
    	     *   'omission': ' [...]'
    	     * });
    	     * // => 'hi-diddly-ho there, neig [...]'
    	     */
    	    function truncate(string, options) {
    	      var length = DEFAULT_TRUNC_LENGTH,
    	          omission = DEFAULT_TRUNC_OMISSION;

    	      if (isObject(options)) {
    	        var separator = 'separator' in options ? options.separator : separator;
    	        length = 'length' in options ? toInteger(options.length) : length;
    	        omission = 'omission' in options ? baseToString(options.omission) : omission;
    	      }
    	      string = toString(string);

    	      var strLength = string.length;
    	      if (hasUnicode(string)) {
    	        var strSymbols = stringToArray(string);
    	        strLength = strSymbols.length;
    	      }
    	      if (length >= strLength) {
    	        return string;
    	      }
    	      var end = length - stringSize(omission);
    	      if (end < 1) {
    	        return omission;
    	      }
    	      var result = strSymbols
    	        ? castSlice(strSymbols, 0, end).join('')
    	        : string.slice(0, end);

    	      if (separator === undefined$1) {
    	        return result + omission;
    	      }
    	      if (strSymbols) {
    	        end += (result.length - end);
    	      }
    	      if (isRegExp(separator)) {
    	        if (string.slice(end).search(separator)) {
    	          var match,
    	              substring = result;

    	          if (!separator.global) {
    	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
    	          }
    	          separator.lastIndex = 0;
    	          while ((match = separator.exec(substring))) {
    	            var newEnd = match.index;
    	          }
    	          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
    	        }
    	      } else if (string.indexOf(baseToString(separator), end) != end) {
    	        var index = result.lastIndexOf(separator);
    	        if (index > -1) {
    	          result = result.slice(0, index);
    	        }
    	      }
    	      return result + omission;
    	    }

    	    /**
    	     * The inverse of `_.escape`; this method converts the HTML entities
    	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
    	     * their corresponding characters.
    	     *
    	     * **Note:** No other HTML entities are unescaped. To unescape additional
    	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 0.6.0
    	     * @category String
    	     * @param {string} [string=''] The string to unescape.
    	     * @returns {string} Returns the unescaped string.
    	     * @example
    	     *
    	     * _.unescape('fred, barney, &amp; pebbles');
    	     * // => 'fred, barney, & pebbles'
    	     */
    	    function unescape(string) {
    	      string = toString(string);
    	      return (string && reHasEscapedHtml.test(string))
    	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
    	        : string;
    	    }

    	    /**
    	     * Converts `string`, as space separated words, to upper case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the upper cased string.
    	     * @example
    	     *
    	     * _.upperCase('--foo-bar');
    	     * // => 'FOO BAR'
    	     *
    	     * _.upperCase('fooBar');
    	     * // => 'FOO BAR'
    	     *
    	     * _.upperCase('__foo_bar__');
    	     * // => 'FOO BAR'
    	     */
    	    var upperCase = createCompounder(function(result, word, index) {
    	      return result + (index ? ' ' : '') + word.toUpperCase();
    	    });

    	    /**
    	     * Converts the first character of `string` to upper case.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to convert.
    	     * @returns {string} Returns the converted string.
    	     * @example
    	     *
    	     * _.upperFirst('fred');
    	     * // => 'Fred'
    	     *
    	     * _.upperFirst('FRED');
    	     * // => 'FRED'
    	     */
    	    var upperFirst = createCaseFirst('toUpperCase');

    	    /**
    	     * Splits `string` into an array of its words.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category String
    	     * @param {string} [string=''] The string to inspect.
    	     * @param {RegExp|string} [pattern] The pattern to match words.
    	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
    	     * @returns {Array} Returns the words of `string`.
    	     * @example
    	     *
    	     * _.words('fred, barney, & pebbles');
    	     * // => ['fred', 'barney', 'pebbles']
    	     *
    	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
    	     * // => ['fred', 'barney', '&', 'pebbles']
    	     */
    	    function words(string, pattern, guard) {
    	      string = toString(string);
    	      pattern = guard ? undefined$1 : pattern;

    	      if (pattern === undefined$1) {
    	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    	      }
    	      return string.match(pattern) || [];
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Attempts to invoke `func`, returning either the result or the caught error
    	     * object. Any additional arguments are provided to `func` when it's invoked.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {Function} func The function to attempt.
    	     * @param {...*} [args] The arguments to invoke `func` with.
    	     * @returns {*} Returns the `func` result or error object.
    	     * @example
    	     *
    	     * // Avoid throwing errors for invalid selectors.
    	     * var elements = _.attempt(function(selector) {
    	     *   return document.querySelectorAll(selector);
    	     * }, '>_>');
    	     *
    	     * if (_.isError(elements)) {
    	     *   elements = [];
    	     * }
    	     */
    	    var attempt = baseRest(function(func, args) {
    	      try {
    	        return apply(func, undefined$1, args);
    	      } catch (e) {
    	        return isError(e) ? e : new Error(e);
    	      }
    	    });

    	    /**
    	     * Binds methods of an object to the object itself, overwriting the existing
    	     * method.
    	     *
    	     * **Note:** This method doesn't set the "length" property of bound functions.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {Object} object The object to bind and assign the bound methods to.
    	     * @param {...(string|string[])} methodNames The object method names to bind.
    	     * @returns {Object} Returns `object`.
    	     * @example
    	     *
    	     * var view = {
    	     *   'label': 'docs',
    	     *   'click': function() {
    	     *     console.log('clicked ' + this.label);
    	     *   }
    	     * };
    	     *
    	     * _.bindAll(view, ['click']);
    	     * jQuery(element).on('click', view.click);
    	     * // => Logs 'clicked docs' when clicked.
    	     */
    	    var bindAll = flatRest(function(object, methodNames) {
    	      arrayEach(methodNames, function(key) {
    	        key = toKey(key);
    	        baseAssignValue(object, key, bind(object[key], object));
    	      });
    	      return object;
    	    });

    	    /**
    	     * Creates a function that iterates over `pairs` and invokes the corresponding
    	     * function of the first predicate to return truthy. The predicate-function
    	     * pairs are invoked with the `this` binding and arguments of the created
    	     * function.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {Array} pairs The predicate-function pairs.
    	     * @returns {Function} Returns the new composite function.
    	     * @example
    	     *
    	     * var func = _.cond([
    	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
    	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
    	     *   [_.stubTrue,                      _.constant('no match')]
    	     * ]);
    	     *
    	     * func({ 'a': 1, 'b': 2 });
    	     * // => 'matches A'
    	     *
    	     * func({ 'a': 0, 'b': 1 });
    	     * // => 'matches B'
    	     *
    	     * func({ 'a': '1', 'b': '2' });
    	     * // => 'no match'
    	     */
    	    function cond(pairs) {
    	      var length = pairs == null ? 0 : pairs.length,
    	          toIteratee = getIteratee();

    	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
    	        if (typeof pair[1] != 'function') {
    	          throw new TypeError(FUNC_ERROR_TEXT);
    	        }
    	        return [toIteratee(pair[0]), pair[1]];
    	      });

    	      return baseRest(function(args) {
    	        var index = -1;
    	        while (++index < length) {
    	          var pair = pairs[index];
    	          if (apply(pair[0], this, args)) {
    	            return apply(pair[1], this, args);
    	          }
    	        }
    	      });
    	    }

    	    /**
    	     * Creates a function that invokes the predicate properties of `source` with
    	     * the corresponding property values of a given object, returning `true` if
    	     * all predicates return truthy, else `false`.
    	     *
    	     * **Note:** The created function is equivalent to `_.conformsTo` with
    	     * `source` partially applied.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {Object} source The object of property predicates to conform to.
    	     * @returns {Function} Returns the new spec function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': 2, 'b': 1 },
    	     *   { 'a': 1, 'b': 2 }
    	     * ];
    	     *
    	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
    	     * // => [{ 'a': 1, 'b': 2 }]
    	     */
    	    function conforms(source) {
    	      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    	    }

    	    /**
    	     * Creates a function that returns `value`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Util
    	     * @param {*} value The value to return from the new function.
    	     * @returns {Function} Returns the new constant function.
    	     * @example
    	     *
    	     * var objects = _.times(2, _.constant({ 'a': 1 }));
    	     *
    	     * console.log(objects);
    	     * // => [{ 'a': 1 }, { 'a': 1 }]
    	     *
    	     * console.log(objects[0] === objects[1]);
    	     * // => true
    	     */
    	    function constant(value) {
    	      return function() {
    	        return value;
    	      };
    	    }

    	    /**
    	     * Checks `value` to determine whether a default value should be returned in
    	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
    	     * or `undefined`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.14.0
    	     * @category Util
    	     * @param {*} value The value to check.
    	     * @param {*} defaultValue The default value.
    	     * @returns {*} Returns the resolved value.
    	     * @example
    	     *
    	     * _.defaultTo(1, 10);
    	     * // => 1
    	     *
    	     * _.defaultTo(undefined, 10);
    	     * // => 10
    	     */
    	    function defaultTo(value, defaultValue) {
    	      return (value == null || value !== value) ? defaultValue : value;
    	    }

    	    /**
    	     * Creates a function that returns the result of invoking the given functions
    	     * with the `this` binding of the created function, where each successive
    	     * invocation is supplied the return value of the previous.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
    	     * @returns {Function} Returns the new composite function.
    	     * @see _.flowRight
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var addSquare = _.flow([_.add, square]);
    	     * addSquare(1, 2);
    	     * // => 9
    	     */
    	    var flow = createFlow();

    	    /**
    	     * This method is like `_.flow` except that it creates a function that
    	     * invokes the given functions from right to left.
    	     *
    	     * @static
    	     * @since 3.0.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
    	     * @returns {Function} Returns the new composite function.
    	     * @see _.flow
    	     * @example
    	     *
    	     * function square(n) {
    	     *   return n * n;
    	     * }
    	     *
    	     * var addSquare = _.flowRight([square, _.add]);
    	     * addSquare(1, 2);
    	     * // => 9
    	     */
    	    var flowRight = createFlow(true);

    	    /**
    	     * This method returns the first argument it receives.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {*} value Any value.
    	     * @returns {*} Returns `value`.
    	     * @example
    	     *
    	     * var object = { 'a': 1 };
    	     *
    	     * console.log(_.identity(object) === object);
    	     * // => true
    	     */
    	    function identity(value) {
    	      return value;
    	    }

    	    /**
    	     * Creates a function that invokes `func` with the arguments of the created
    	     * function. If `func` is a property name, the created function returns the
    	     * property value for a given element. If `func` is an array or object, the
    	     * created function returns `true` for elements that contain the equivalent
    	     * source properties, otherwise it returns `false`.
    	     *
    	     * @static
    	     * @since 4.0.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {*} [func=_.identity] The value to convert to a callback.
    	     * @returns {Function} Returns the callback.
    	     * @example
    	     *
    	     * var users = [
    	     *   { 'user': 'barney', 'age': 36, 'active': true },
    	     *   { 'user': 'fred',   'age': 40, 'active': false }
    	     * ];
    	     *
    	     * // The `_.matches` iteratee shorthand.
    	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
    	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
    	     *
    	     * // The `_.matchesProperty` iteratee shorthand.
    	     * _.filter(users, _.iteratee(['user', 'fred']));
    	     * // => [{ 'user': 'fred', 'age': 40 }]
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.map(users, _.iteratee('user'));
    	     * // => ['barney', 'fred']
    	     *
    	     * // Create custom iteratee shorthands.
    	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
    	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
    	     *     return func.test(string);
    	     *   };
    	     * });
    	     *
    	     * _.filter(['abc', 'def'], /ef/);
    	     * // => ['def']
    	     */
    	    function iteratee(func) {
    	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    	    }

    	    /**
    	     * Creates a function that performs a partial deep comparison between a given
    	     * object and `source`, returning `true` if the given object has equivalent
    	     * property values, else `false`.
    	     *
    	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
    	     * partially applied.
    	     *
    	     * Partial comparisons will match empty array and empty object `source`
    	     * values against any array or object value, respectively. See `_.isEqual`
    	     * for a list of supported value comparisons.
    	     *
    	     * **Note:** Multiple values can be checked by combining several matchers
    	     * using `_.overSome`
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {Object} source The object of property values to match.
    	     * @returns {Function} Returns the new spec function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': 1, 'b': 2, 'c': 3 },
    	     *   { 'a': 4, 'b': 5, 'c': 6 }
    	     * ];
    	     *
    	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
    	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
    	     *
    	     * // Checking for several possible values
    	     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
    	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
    	     */
    	    function matches(source) {
    	      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    	    }

    	    /**
    	     * Creates a function that performs a partial deep comparison between the
    	     * value at `path` of a given object to `srcValue`, returning `true` if the
    	     * object value is equivalent, else `false`.
    	     *
    	     * **Note:** Partial comparisons will match empty array and empty object
    	     * `srcValue` values against any array or object value, respectively. See
    	     * `_.isEqual` for a list of supported value comparisons.
    	     *
    	     * **Note:** Multiple values can be checked by combining several matchers
    	     * using `_.overSome`
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.2.0
    	     * @category Util
    	     * @param {Array|string} path The path of the property to get.
    	     * @param {*} srcValue The value to match.
    	     * @returns {Function} Returns the new spec function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': 1, 'b': 2, 'c': 3 },
    	     *   { 'a': 4, 'b': 5, 'c': 6 }
    	     * ];
    	     *
    	     * _.find(objects, _.matchesProperty('a', 4));
    	     * // => { 'a': 4, 'b': 5, 'c': 6 }
    	     *
    	     * // Checking for several possible values
    	     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
    	     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
    	     */
    	    function matchesProperty(path, srcValue) {
    	      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    	    }

    	    /**
    	     * Creates a function that invokes the method at `path` of a given object.
    	     * Any additional arguments are provided to the invoked method.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Util
    	     * @param {Array|string} path The path of the method to invoke.
    	     * @param {...*} [args] The arguments to invoke the method with.
    	     * @returns {Function} Returns the new invoker function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': { 'b': _.constant(2) } },
    	     *   { 'a': { 'b': _.constant(1) } }
    	     * ];
    	     *
    	     * _.map(objects, _.method('a.b'));
    	     * // => [2, 1]
    	     *
    	     * _.map(objects, _.method(['a', 'b']));
    	     * // => [2, 1]
    	     */
    	    var method = baseRest(function(path, args) {
    	      return function(object) {
    	        return baseInvoke(object, path, args);
    	      };
    	    });

    	    /**
    	     * The opposite of `_.method`; this method creates a function that invokes
    	     * the method at a given path of `object`. Any additional arguments are
    	     * provided to the invoked method.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.7.0
    	     * @category Util
    	     * @param {Object} object The object to query.
    	     * @param {...*} [args] The arguments to invoke the method with.
    	     * @returns {Function} Returns the new invoker function.
    	     * @example
    	     *
    	     * var array = _.times(3, _.constant),
    	     *     object = { 'a': array, 'b': array, 'c': array };
    	     *
    	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
    	     * // => [2, 0]
    	     *
    	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
    	     * // => [2, 0]
    	     */
    	    var methodOf = baseRest(function(object, args) {
    	      return function(path) {
    	        return baseInvoke(object, path, args);
    	      };
    	    });

    	    /**
    	     * Adds all own enumerable string keyed function properties of a source
    	     * object to the destination object. If `object` is a function, then methods
    	     * are added to its prototype as well.
    	     *
    	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
    	     * avoid conflicts caused by modifying the original.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {Function|Object} [object=lodash] The destination object.
    	     * @param {Object} source The object of functions to add.
    	     * @param {Object} [options={}] The options object.
    	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
    	     * @returns {Function|Object} Returns `object`.
    	     * @example
    	     *
    	     * function vowels(string) {
    	     *   return _.filter(string, function(v) {
    	     *     return /[aeiou]/i.test(v);
    	     *   });
    	     * }
    	     *
    	     * _.mixin({ 'vowels': vowels });
    	     * _.vowels('fred');
    	     * // => ['e']
    	     *
    	     * _('fred').vowels().value();
    	     * // => ['e']
    	     *
    	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
    	     * _('fred').vowels();
    	     * // => ['e']
    	     */
    	    function mixin(object, source, options) {
    	      var props = keys(source),
    	          methodNames = baseFunctions(source, props);

    	      if (options == null &&
    	          !(isObject(source) && (methodNames.length || !props.length))) {
    	        options = source;
    	        source = object;
    	        object = this;
    	        methodNames = baseFunctions(source, keys(source));
    	      }
    	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
    	          isFunc = isFunction(object);

    	      arrayEach(methodNames, function(methodName) {
    	        var func = source[methodName];
    	        object[methodName] = func;
    	        if (isFunc) {
    	          object.prototype[methodName] = function() {
    	            var chainAll = this.__chain__;
    	            if (chain || chainAll) {
    	              var result = object(this.__wrapped__),
    	                  actions = result.__actions__ = copyArray(this.__actions__);

    	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
    	              result.__chain__ = chainAll;
    	              return result;
    	            }
    	            return func.apply(object, arrayPush([this.value()], arguments));
    	          };
    	        }
    	      });

    	      return object;
    	    }

    	    /**
    	     * Reverts the `_` variable to its previous value and returns a reference to
    	     * the `lodash` function.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @returns {Function} Returns the `lodash` function.
    	     * @example
    	     *
    	     * var lodash = _.noConflict();
    	     */
    	    function noConflict() {
    	      if (root._ === this) {
    	        root._ = oldDash;
    	      }
    	      return this;
    	    }

    	    /**
    	     * This method returns `undefined`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.3.0
    	     * @category Util
    	     * @example
    	     *
    	     * _.times(2, _.noop);
    	     * // => [undefined, undefined]
    	     */
    	    function noop() {
    	      // No operation performed.
    	    }

    	    /**
    	     * Creates a function that gets the argument at index `n`. If `n` is negative,
    	     * the nth argument from the end is returned.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {number} [n=0] The index of the argument to return.
    	     * @returns {Function} Returns the new pass-thru function.
    	     * @example
    	     *
    	     * var func = _.nthArg(1);
    	     * func('a', 'b', 'c', 'd');
    	     * // => 'b'
    	     *
    	     * var func = _.nthArg(-2);
    	     * func('a', 'b', 'c', 'd');
    	     * // => 'c'
    	     */
    	    function nthArg(n) {
    	      n = toInteger(n);
    	      return baseRest(function(args) {
    	        return baseNth(args, n);
    	      });
    	    }

    	    /**
    	     * Creates a function that invokes `iteratees` with the arguments it receives
    	     * and returns their results.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
    	     *  The iteratees to invoke.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var func = _.over([Math.max, Math.min]);
    	     *
    	     * func(1, 2, 3, 4);
    	     * // => [4, 1]
    	     */
    	    var over = createOver(arrayMap);

    	    /**
    	     * Creates a function that checks if **all** of the `predicates` return
    	     * truthy when invoked with the arguments it receives.
    	     *
    	     * Following shorthands are possible for providing predicates.
    	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
    	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {...(Function|Function[])} [predicates=[_.identity]]
    	     *  The predicates to check.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var func = _.overEvery([Boolean, isFinite]);
    	     *
    	     * func('1');
    	     * // => true
    	     *
    	     * func(null);
    	     * // => false
    	     *
    	     * func(NaN);
    	     * // => false
    	     */
    	    var overEvery = createOver(arrayEvery);

    	    /**
    	     * Creates a function that checks if **any** of the `predicates` return
    	     * truthy when invoked with the arguments it receives.
    	     *
    	     * Following shorthands are possible for providing predicates.
    	     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
    	     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {...(Function|Function[])} [predicates=[_.identity]]
    	     *  The predicates to check.
    	     * @returns {Function} Returns the new function.
    	     * @example
    	     *
    	     * var func = _.overSome([Boolean, isFinite]);
    	     *
    	     * func('1');
    	     * // => true
    	     *
    	     * func(null);
    	     * // => true
    	     *
    	     * func(NaN);
    	     * // => false
    	     *
    	     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
    	     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
    	     */
    	    var overSome = createOver(arraySome);

    	    /**
    	     * Creates a function that returns the value at `path` of a given object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 2.4.0
    	     * @category Util
    	     * @param {Array|string} path The path of the property to get.
    	     * @returns {Function} Returns the new accessor function.
    	     * @example
    	     *
    	     * var objects = [
    	     *   { 'a': { 'b': 2 } },
    	     *   { 'a': { 'b': 1 } }
    	     * ];
    	     *
    	     * _.map(objects, _.property('a.b'));
    	     * // => [2, 1]
    	     *
    	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
    	     * // => [1, 2]
    	     */
    	    function property(path) {
    	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    	    }

    	    /**
    	     * The opposite of `_.property`; this method creates a function that returns
    	     * the value at a given path of `object`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.0.0
    	     * @category Util
    	     * @param {Object} object The object to query.
    	     * @returns {Function} Returns the new accessor function.
    	     * @example
    	     *
    	     * var array = [0, 1, 2],
    	     *     object = { 'a': array, 'b': array, 'c': array };
    	     *
    	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
    	     * // => [2, 0]
    	     *
    	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
    	     * // => [2, 0]
    	     */
    	    function propertyOf(object) {
    	      return function(path) {
    	        return object == null ? undefined$1 : baseGet(object, path);
    	      };
    	    }

    	    /**
    	     * Creates an array of numbers (positive and/or negative) progressing from
    	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
    	     * `start` is specified without an `end` or `step`. If `end` is not specified,
    	     * it's set to `start` with `start` then set to `0`.
    	     *
    	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
    	     * floating-point values which can produce unexpected results.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {number} [start=0] The start of the range.
    	     * @param {number} end The end of the range.
    	     * @param {number} [step=1] The value to increment or decrement by.
    	     * @returns {Array} Returns the range of numbers.
    	     * @see _.inRange, _.rangeRight
    	     * @example
    	     *
    	     * _.range(4);
    	     * // => [0, 1, 2, 3]
    	     *
    	     * _.range(-4);
    	     * // => [0, -1, -2, -3]
    	     *
    	     * _.range(1, 5);
    	     * // => [1, 2, 3, 4]
    	     *
    	     * _.range(0, 20, 5);
    	     * // => [0, 5, 10, 15]
    	     *
    	     * _.range(0, -4, -1);
    	     * // => [0, -1, -2, -3]
    	     *
    	     * _.range(1, 4, 0);
    	     * // => [1, 1, 1]
    	     *
    	     * _.range(0);
    	     * // => []
    	     */
    	    var range = createRange();

    	    /**
    	     * This method is like `_.range` except that it populates values in
    	     * descending order.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {number} [start=0] The start of the range.
    	     * @param {number} end The end of the range.
    	     * @param {number} [step=1] The value to increment or decrement by.
    	     * @returns {Array} Returns the range of numbers.
    	     * @see _.inRange, _.range
    	     * @example
    	     *
    	     * _.rangeRight(4);
    	     * // => [3, 2, 1, 0]
    	     *
    	     * _.rangeRight(-4);
    	     * // => [-3, -2, -1, 0]
    	     *
    	     * _.rangeRight(1, 5);
    	     * // => [4, 3, 2, 1]
    	     *
    	     * _.rangeRight(0, 20, 5);
    	     * // => [15, 10, 5, 0]
    	     *
    	     * _.rangeRight(0, -4, -1);
    	     * // => [-3, -2, -1, 0]
    	     *
    	     * _.rangeRight(1, 4, 0);
    	     * // => [1, 1, 1]
    	     *
    	     * _.rangeRight(0);
    	     * // => []
    	     */
    	    var rangeRight = createRange(true);

    	    /**
    	     * This method returns a new empty array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {Array} Returns the new empty array.
    	     * @example
    	     *
    	     * var arrays = _.times(2, _.stubArray);
    	     *
    	     * console.log(arrays);
    	     * // => [[], []]
    	     *
    	     * console.log(arrays[0] === arrays[1]);
    	     * // => false
    	     */
    	    function stubArray() {
    	      return [];
    	    }

    	    /**
    	     * This method returns `false`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {boolean} Returns `false`.
    	     * @example
    	     *
    	     * _.times(2, _.stubFalse);
    	     * // => [false, false]
    	     */
    	    function stubFalse() {
    	      return false;
    	    }

    	    /**
    	     * This method returns a new empty object.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {Object} Returns the new empty object.
    	     * @example
    	     *
    	     * var objects = _.times(2, _.stubObject);
    	     *
    	     * console.log(objects);
    	     * // => [{}, {}]
    	     *
    	     * console.log(objects[0] === objects[1]);
    	     * // => false
    	     */
    	    function stubObject() {
    	      return {};
    	    }

    	    /**
    	     * This method returns an empty string.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {string} Returns the empty string.
    	     * @example
    	     *
    	     * _.times(2, _.stubString);
    	     * // => ['', '']
    	     */
    	    function stubString() {
    	      return '';
    	    }

    	    /**
    	     * This method returns `true`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.13.0
    	     * @category Util
    	     * @returns {boolean} Returns `true`.
    	     * @example
    	     *
    	     * _.times(2, _.stubTrue);
    	     * // => [true, true]
    	     */
    	    function stubTrue() {
    	      return true;
    	    }

    	    /**
    	     * Invokes the iteratee `n` times, returning an array of the results of
    	     * each invocation. The iteratee is invoked with one argument; (index).
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {number} n The number of times to invoke `iteratee`.
    	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
    	     * @returns {Array} Returns the array of results.
    	     * @example
    	     *
    	     * _.times(3, String);
    	     * // => ['0', '1', '2']
    	     *
    	     *  _.times(4, _.constant(0));
    	     * // => [0, 0, 0, 0]
    	     */
    	    function times(n, iteratee) {
    	      n = toInteger(n);
    	      if (n < 1 || n > MAX_SAFE_INTEGER) {
    	        return [];
    	      }
    	      var index = MAX_ARRAY_LENGTH,
    	          length = nativeMin(n, MAX_ARRAY_LENGTH);

    	      iteratee = getIteratee(iteratee);
    	      n -= MAX_ARRAY_LENGTH;

    	      var result = baseTimes(length, iteratee);
    	      while (++index < n) {
    	        iteratee(index);
    	      }
    	      return result;
    	    }

    	    /**
    	     * Converts `value` to a property path array.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Util
    	     * @param {*} value The value to convert.
    	     * @returns {Array} Returns the new property path array.
    	     * @example
    	     *
    	     * _.toPath('a.b.c');
    	     * // => ['a', 'b', 'c']
    	     *
    	     * _.toPath('a[0].b.c');
    	     * // => ['a', '0', 'b', 'c']
    	     */
    	    function toPath(value) {
    	      if (isArray(value)) {
    	        return arrayMap(value, toKey);
    	      }
    	      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    	    }

    	    /**
    	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Util
    	     * @param {string} [prefix=''] The value to prefix the ID with.
    	     * @returns {string} Returns the unique ID.
    	     * @example
    	     *
    	     * _.uniqueId('contact_');
    	     * // => 'contact_104'
    	     *
    	     * _.uniqueId();
    	     * // => '105'
    	     */
    	    function uniqueId(prefix) {
    	      var id = ++idCounter;
    	      return toString(prefix) + id;
    	    }

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * Adds two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.4.0
    	     * @category Math
    	     * @param {number} augend The first number in an addition.
    	     * @param {number} addend The second number in an addition.
    	     * @returns {number} Returns the total.
    	     * @example
    	     *
    	     * _.add(6, 4);
    	     * // => 10
    	     */
    	    var add = createMathOperation(function(augend, addend) {
    	      return augend + addend;
    	    }, 0);

    	    /**
    	     * Computes `number` rounded up to `precision`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Math
    	     * @param {number} number The number to round up.
    	     * @param {number} [precision=0] The precision to round up to.
    	     * @returns {number} Returns the rounded up number.
    	     * @example
    	     *
    	     * _.ceil(4.006);
    	     * // => 5
    	     *
    	     * _.ceil(6.004, 2);
    	     * // => 6.01
    	     *
    	     * _.ceil(6040, -2);
    	     * // => 6100
    	     */
    	    var ceil = createRound('ceil');

    	    /**
    	     * Divide two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Math
    	     * @param {number} dividend The first number in a division.
    	     * @param {number} divisor The second number in a division.
    	     * @returns {number} Returns the quotient.
    	     * @example
    	     *
    	     * _.divide(6, 4);
    	     * // => 1.5
    	     */
    	    var divide = createMathOperation(function(dividend, divisor) {
    	      return dividend / divisor;
    	    }, 1);

    	    /**
    	     * Computes `number` rounded down to `precision`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Math
    	     * @param {number} number The number to round down.
    	     * @param {number} [precision=0] The precision to round down to.
    	     * @returns {number} Returns the rounded down number.
    	     * @example
    	     *
    	     * _.floor(4.006);
    	     * // => 4
    	     *
    	     * _.floor(0.046, 2);
    	     * // => 0.04
    	     *
    	     * _.floor(4060, -2);
    	     * // => 4000
    	     */
    	    var floor = createRound('floor');

    	    /**
    	     * Computes the maximum value of `array`. If `array` is empty or falsey,
    	     * `undefined` is returned.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {*} Returns the maximum value.
    	     * @example
    	     *
    	     * _.max([4, 2, 8, 6]);
    	     * // => 8
    	     *
    	     * _.max([]);
    	     * // => undefined
    	     */
    	    function max(array) {
    	      return (array && array.length)
    	        ? baseExtremum(array, identity, baseGt)
    	        : undefined$1;
    	    }

    	    /**
    	     * This method is like `_.max` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the criterion by which
    	     * the value is ranked. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {*} Returns the maximum value.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
    	     *
    	     * _.maxBy(objects, function(o) { return o.n; });
    	     * // => { 'n': 2 }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.maxBy(objects, 'n');
    	     * // => { 'n': 2 }
    	     */
    	    function maxBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
    	        : undefined$1;
    	    }

    	    /**
    	     * Computes the mean of the values in `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {number} Returns the mean.
    	     * @example
    	     *
    	     * _.mean([4, 2, 8, 6]);
    	     * // => 5
    	     */
    	    function mean(array) {
    	      return baseMean(array, identity);
    	    }

    	    /**
    	     * This method is like `_.mean` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the value to be averaged.
    	     * The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {number} Returns the mean.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
    	     *
    	     * _.meanBy(objects, function(o) { return o.n; });
    	     * // => 5
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.meanBy(objects, 'n');
    	     * // => 5
    	     */
    	    function meanBy(array, iteratee) {
    	      return baseMean(array, getIteratee(iteratee, 2));
    	    }

    	    /**
    	     * Computes the minimum value of `array`. If `array` is empty or falsey,
    	     * `undefined` is returned.
    	     *
    	     * @static
    	     * @since 0.1.0
    	     * @memberOf _
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {*} Returns the minimum value.
    	     * @example
    	     *
    	     * _.min([4, 2, 8, 6]);
    	     * // => 2
    	     *
    	     * _.min([]);
    	     * // => undefined
    	     */
    	    function min(array) {
    	      return (array && array.length)
    	        ? baseExtremum(array, identity, baseLt)
    	        : undefined$1;
    	    }

    	    /**
    	     * This method is like `_.min` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the criterion by which
    	     * the value is ranked. The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {*} Returns the minimum value.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
    	     *
    	     * _.minBy(objects, function(o) { return o.n; });
    	     * // => { 'n': 1 }
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.minBy(objects, 'n');
    	     * // => { 'n': 1 }
    	     */
    	    function minBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
    	        : undefined$1;
    	    }

    	    /**
    	     * Multiply two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.7.0
    	     * @category Math
    	     * @param {number} multiplier The first number in a multiplication.
    	     * @param {number} multiplicand The second number in a multiplication.
    	     * @returns {number} Returns the product.
    	     * @example
    	     *
    	     * _.multiply(6, 4);
    	     * // => 24
    	     */
    	    var multiply = createMathOperation(function(multiplier, multiplicand) {
    	      return multiplier * multiplicand;
    	    }, 1);

    	    /**
    	     * Computes `number` rounded to `precision`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.10.0
    	     * @category Math
    	     * @param {number} number The number to round.
    	     * @param {number} [precision=0] The precision to round to.
    	     * @returns {number} Returns the rounded number.
    	     * @example
    	     *
    	     * _.round(4.006);
    	     * // => 4
    	     *
    	     * _.round(4.006, 2);
    	     * // => 4.01
    	     *
    	     * _.round(4060, -2);
    	     * // => 4100
    	     */
    	    var round = createRound('round');

    	    /**
    	     * Subtract two numbers.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {number} minuend The first number in a subtraction.
    	     * @param {number} subtrahend The second number in a subtraction.
    	     * @returns {number} Returns the difference.
    	     * @example
    	     *
    	     * _.subtract(6, 4);
    	     * // => 2
    	     */
    	    var subtract = createMathOperation(function(minuend, subtrahend) {
    	      return minuend - subtrahend;
    	    }, 0);

    	    /**
    	     * Computes the sum of the values in `array`.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 3.4.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @returns {number} Returns the sum.
    	     * @example
    	     *
    	     * _.sum([4, 2, 8, 6]);
    	     * // => 20
    	     */
    	    function sum(array) {
    	      return (array && array.length)
    	        ? baseSum(array, identity)
    	        : 0;
    	    }

    	    /**
    	     * This method is like `_.sum` except that it accepts `iteratee` which is
    	     * invoked for each element in `array` to generate the value to be summed.
    	     * The iteratee is invoked with one argument: (value).
    	     *
    	     * @static
    	     * @memberOf _
    	     * @since 4.0.0
    	     * @category Math
    	     * @param {Array} array The array to iterate over.
    	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
    	     * @returns {number} Returns the sum.
    	     * @example
    	     *
    	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
    	     *
    	     * _.sumBy(objects, function(o) { return o.n; });
    	     * // => 20
    	     *
    	     * // The `_.property` iteratee shorthand.
    	     * _.sumBy(objects, 'n');
    	     * // => 20
    	     */
    	    function sumBy(array, iteratee) {
    	      return (array && array.length)
    	        ? baseSum(array, getIteratee(iteratee, 2))
    	        : 0;
    	    }

    	    /*------------------------------------------------------------------------*/

    	    // Add methods that return wrapped values in chain sequences.
    	    lodash.after = after;
    	    lodash.ary = ary;
    	    lodash.assign = assign;
    	    lodash.assignIn = assignIn;
    	    lodash.assignInWith = assignInWith;
    	    lodash.assignWith = assignWith;
    	    lodash.at = at;
    	    lodash.before = before;
    	    lodash.bind = bind;
    	    lodash.bindAll = bindAll;
    	    lodash.bindKey = bindKey;
    	    lodash.castArray = castArray;
    	    lodash.chain = chain;
    	    lodash.chunk = chunk;
    	    lodash.compact = compact;
    	    lodash.concat = concat;
    	    lodash.cond = cond;
    	    lodash.conforms = conforms;
    	    lodash.constant = constant;
    	    lodash.countBy = countBy;
    	    lodash.create = create;
    	    lodash.curry = curry;
    	    lodash.curryRight = curryRight;
    	    lodash.debounce = debounce;
    	    lodash.defaults = defaults;
    	    lodash.defaultsDeep = defaultsDeep;
    	    lodash.defer = defer;
    	    lodash.delay = delay;
    	    lodash.difference = difference;
    	    lodash.differenceBy = differenceBy;
    	    lodash.differenceWith = differenceWith;
    	    lodash.drop = drop;
    	    lodash.dropRight = dropRight;
    	    lodash.dropRightWhile = dropRightWhile;
    	    lodash.dropWhile = dropWhile;
    	    lodash.fill = fill;
    	    lodash.filter = filter;
    	    lodash.flatMap = flatMap;
    	    lodash.flatMapDeep = flatMapDeep;
    	    lodash.flatMapDepth = flatMapDepth;
    	    lodash.flatten = flatten;
    	    lodash.flattenDeep = flattenDeep;
    	    lodash.flattenDepth = flattenDepth;
    	    lodash.flip = flip;
    	    lodash.flow = flow;
    	    lodash.flowRight = flowRight;
    	    lodash.fromPairs = fromPairs;
    	    lodash.functions = functions;
    	    lodash.functionsIn = functionsIn;
    	    lodash.groupBy = groupBy;
    	    lodash.initial = initial;
    	    lodash.intersection = intersection;
    	    lodash.intersectionBy = intersectionBy;
    	    lodash.intersectionWith = intersectionWith;
    	    lodash.invert = invert;
    	    lodash.invertBy = invertBy;
    	    lodash.invokeMap = invokeMap;
    	    lodash.iteratee = iteratee;
    	    lodash.keyBy = keyBy;
    	    lodash.keys = keys;
    	    lodash.keysIn = keysIn;
    	    lodash.map = map;
    	    lodash.mapKeys = mapKeys;
    	    lodash.mapValues = mapValues;
    	    lodash.matches = matches;
    	    lodash.matchesProperty = matchesProperty;
    	    lodash.memoize = memoize;
    	    lodash.merge = merge;
    	    lodash.mergeWith = mergeWith;
    	    lodash.method = method;
    	    lodash.methodOf = methodOf;
    	    lodash.mixin = mixin;
    	    lodash.negate = negate;
    	    lodash.nthArg = nthArg;
    	    lodash.omit = omit;
    	    lodash.omitBy = omitBy;
    	    lodash.once = once;
    	    lodash.orderBy = orderBy;
    	    lodash.over = over;
    	    lodash.overArgs = overArgs;
    	    lodash.overEvery = overEvery;
    	    lodash.overSome = overSome;
    	    lodash.partial = partial;
    	    lodash.partialRight = partialRight;
    	    lodash.partition = partition;
    	    lodash.pick = pick;
    	    lodash.pickBy = pickBy;
    	    lodash.property = property;
    	    lodash.propertyOf = propertyOf;
    	    lodash.pull = pull;
    	    lodash.pullAll = pullAll;
    	    lodash.pullAllBy = pullAllBy;
    	    lodash.pullAllWith = pullAllWith;
    	    lodash.pullAt = pullAt;
    	    lodash.range = range;
    	    lodash.rangeRight = rangeRight;
    	    lodash.rearg = rearg;
    	    lodash.reject = reject;
    	    lodash.remove = remove;
    	    lodash.rest = rest;
    	    lodash.reverse = reverse;
    	    lodash.sampleSize = sampleSize;
    	    lodash.set = set;
    	    lodash.setWith = setWith;
    	    lodash.shuffle = shuffle;
    	    lodash.slice = slice;
    	    lodash.sortBy = sortBy;
    	    lodash.sortedUniq = sortedUniq;
    	    lodash.sortedUniqBy = sortedUniqBy;
    	    lodash.split = split;
    	    lodash.spread = spread;
    	    lodash.tail = tail;
    	    lodash.take = take;
    	    lodash.takeRight = takeRight;
    	    lodash.takeRightWhile = takeRightWhile;
    	    lodash.takeWhile = takeWhile;
    	    lodash.tap = tap;
    	    lodash.throttle = throttle;
    	    lodash.thru = thru;
    	    lodash.toArray = toArray;
    	    lodash.toPairs = toPairs;
    	    lodash.toPairsIn = toPairsIn;
    	    lodash.toPath = toPath;
    	    lodash.toPlainObject = toPlainObject;
    	    lodash.transform = transform;
    	    lodash.unary = unary;
    	    lodash.union = union;
    	    lodash.unionBy = unionBy;
    	    lodash.unionWith = unionWith;
    	    lodash.uniq = uniq;
    	    lodash.uniqBy = uniqBy;
    	    lodash.uniqWith = uniqWith;
    	    lodash.unset = unset;
    	    lodash.unzip = unzip;
    	    lodash.unzipWith = unzipWith;
    	    lodash.update = update;
    	    lodash.updateWith = updateWith;
    	    lodash.values = values;
    	    lodash.valuesIn = valuesIn;
    	    lodash.without = without;
    	    lodash.words = words;
    	    lodash.wrap = wrap;
    	    lodash.xor = xor;
    	    lodash.xorBy = xorBy;
    	    lodash.xorWith = xorWith;
    	    lodash.zip = zip;
    	    lodash.zipObject = zipObject;
    	    lodash.zipObjectDeep = zipObjectDeep;
    	    lodash.zipWith = zipWith;

    	    // Add aliases.
    	    lodash.entries = toPairs;
    	    lodash.entriesIn = toPairsIn;
    	    lodash.extend = assignIn;
    	    lodash.extendWith = assignInWith;

    	    // Add methods to `lodash.prototype`.
    	    mixin(lodash, lodash);

    	    /*------------------------------------------------------------------------*/

    	    // Add methods that return unwrapped values in chain sequences.
    	    lodash.add = add;
    	    lodash.attempt = attempt;
    	    lodash.camelCase = camelCase;
    	    lodash.capitalize = capitalize;
    	    lodash.ceil = ceil;
    	    lodash.clamp = clamp;
    	    lodash.clone = clone;
    	    lodash.cloneDeep = cloneDeep;
    	    lodash.cloneDeepWith = cloneDeepWith;
    	    lodash.cloneWith = cloneWith;
    	    lodash.conformsTo = conformsTo;
    	    lodash.deburr = deburr;
    	    lodash.defaultTo = defaultTo;
    	    lodash.divide = divide;
    	    lodash.endsWith = endsWith;
    	    lodash.eq = eq;
    	    lodash.escape = escape;
    	    lodash.escapeRegExp = escapeRegExp;
    	    lodash.every = every;
    	    lodash.find = find;
    	    lodash.findIndex = findIndex;
    	    lodash.findKey = findKey;
    	    lodash.findLast = findLast;
    	    lodash.findLastIndex = findLastIndex;
    	    lodash.findLastKey = findLastKey;
    	    lodash.floor = floor;
    	    lodash.forEach = forEach;
    	    lodash.forEachRight = forEachRight;
    	    lodash.forIn = forIn;
    	    lodash.forInRight = forInRight;
    	    lodash.forOwn = forOwn;
    	    lodash.forOwnRight = forOwnRight;
    	    lodash.get = get;
    	    lodash.gt = gt;
    	    lodash.gte = gte;
    	    lodash.has = has;
    	    lodash.hasIn = hasIn;
    	    lodash.head = head;
    	    lodash.identity = identity;
    	    lodash.includes = includes;
    	    lodash.indexOf = indexOf;
    	    lodash.inRange = inRange;
    	    lodash.invoke = invoke;
    	    lodash.isArguments = isArguments;
    	    lodash.isArray = isArray;
    	    lodash.isArrayBuffer = isArrayBuffer;
    	    lodash.isArrayLike = isArrayLike;
    	    lodash.isArrayLikeObject = isArrayLikeObject;
    	    lodash.isBoolean = isBoolean;
    	    lodash.isBuffer = isBuffer;
    	    lodash.isDate = isDate;
    	    lodash.isElement = isElement;
    	    lodash.isEmpty = isEmpty;
    	    lodash.isEqual = isEqual;
    	    lodash.isEqualWith = isEqualWith;
    	    lodash.isError = isError;
    	    lodash.isFinite = isFinite;
    	    lodash.isFunction = isFunction;
    	    lodash.isInteger = isInteger;
    	    lodash.isLength = isLength;
    	    lodash.isMap = isMap;
    	    lodash.isMatch = isMatch;
    	    lodash.isMatchWith = isMatchWith;
    	    lodash.isNaN = isNaN;
    	    lodash.isNative = isNative;
    	    lodash.isNil = isNil;
    	    lodash.isNull = isNull;
    	    lodash.isNumber = isNumber;
    	    lodash.isObject = isObject;
    	    lodash.isObjectLike = isObjectLike;
    	    lodash.isPlainObject = isPlainObject;
    	    lodash.isRegExp = isRegExp;
    	    lodash.isSafeInteger = isSafeInteger;
    	    lodash.isSet = isSet;
    	    lodash.isString = isString;
    	    lodash.isSymbol = isSymbol;
    	    lodash.isTypedArray = isTypedArray;
    	    lodash.isUndefined = isUndefined;
    	    lodash.isWeakMap = isWeakMap;
    	    lodash.isWeakSet = isWeakSet;
    	    lodash.join = join;
    	    lodash.kebabCase = kebabCase;
    	    lodash.last = last;
    	    lodash.lastIndexOf = lastIndexOf;
    	    lodash.lowerCase = lowerCase;
    	    lodash.lowerFirst = lowerFirst;
    	    lodash.lt = lt;
    	    lodash.lte = lte;
    	    lodash.max = max;
    	    lodash.maxBy = maxBy;
    	    lodash.mean = mean;
    	    lodash.meanBy = meanBy;
    	    lodash.min = min;
    	    lodash.minBy = minBy;
    	    lodash.stubArray = stubArray;
    	    lodash.stubFalse = stubFalse;
    	    lodash.stubObject = stubObject;
    	    lodash.stubString = stubString;
    	    lodash.stubTrue = stubTrue;
    	    lodash.multiply = multiply;
    	    lodash.nth = nth;
    	    lodash.noConflict = noConflict;
    	    lodash.noop = noop;
    	    lodash.now = now;
    	    lodash.pad = pad;
    	    lodash.padEnd = padEnd;
    	    lodash.padStart = padStart;
    	    lodash.parseInt = parseInt;
    	    lodash.random = random;
    	    lodash.reduce = reduce;
    	    lodash.reduceRight = reduceRight;
    	    lodash.repeat = repeat;
    	    lodash.replace = replace;
    	    lodash.result = result;
    	    lodash.round = round;
    	    lodash.runInContext = runInContext;
    	    lodash.sample = sample;
    	    lodash.size = size;
    	    lodash.snakeCase = snakeCase;
    	    lodash.some = some;
    	    lodash.sortedIndex = sortedIndex;
    	    lodash.sortedIndexBy = sortedIndexBy;
    	    lodash.sortedIndexOf = sortedIndexOf;
    	    lodash.sortedLastIndex = sortedLastIndex;
    	    lodash.sortedLastIndexBy = sortedLastIndexBy;
    	    lodash.sortedLastIndexOf = sortedLastIndexOf;
    	    lodash.startCase = startCase;
    	    lodash.startsWith = startsWith;
    	    lodash.subtract = subtract;
    	    lodash.sum = sum;
    	    lodash.sumBy = sumBy;
    	    lodash.template = template;
    	    lodash.times = times;
    	    lodash.toFinite = toFinite;
    	    lodash.toInteger = toInteger;
    	    lodash.toLength = toLength;
    	    lodash.toLower = toLower;
    	    lodash.toNumber = toNumber;
    	    lodash.toSafeInteger = toSafeInteger;
    	    lodash.toString = toString;
    	    lodash.toUpper = toUpper;
    	    lodash.trim = trim;
    	    lodash.trimEnd = trimEnd;
    	    lodash.trimStart = trimStart;
    	    lodash.truncate = truncate;
    	    lodash.unescape = unescape;
    	    lodash.uniqueId = uniqueId;
    	    lodash.upperCase = upperCase;
    	    lodash.upperFirst = upperFirst;

    	    // Add aliases.
    	    lodash.each = forEach;
    	    lodash.eachRight = forEachRight;
    	    lodash.first = head;

    	    mixin(lodash, (function() {
    	      var source = {};
    	      baseForOwn(lodash, function(func, methodName) {
    	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
    	          source[methodName] = func;
    	        }
    	      });
    	      return source;
    	    }()), { 'chain': false });

    	    /*------------------------------------------------------------------------*/

    	    /**
    	     * The semantic version number.
    	     *
    	     * @static
    	     * @memberOf _
    	     * @type {string}
    	     */
    	    lodash.VERSION = VERSION;

    	    // Assign default placeholders.
    	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
    	      lodash[methodName].placeholder = lodash;
    	    });

    	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    	    arrayEach(['drop', 'take'], function(methodName, index) {
    	      LazyWrapper.prototype[methodName] = function(n) {
    	        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

    	        var result = (this.__filtered__ && !index)
    	          ? new LazyWrapper(this)
    	          : this.clone();

    	        if (result.__filtered__) {
    	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
    	        } else {
    	          result.__views__.push({
    	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
    	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
    	          });
    	        }
    	        return result;
    	      };

    	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
    	        return this.reverse()[methodName](n).reverse();
    	      };
    	    });

    	    // Add `LazyWrapper` methods that accept an `iteratee` value.
    	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
    	      var type = index + 1,
    	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

    	      LazyWrapper.prototype[methodName] = function(iteratee) {
    	        var result = this.clone();
    	        result.__iteratees__.push({
    	          'iteratee': getIteratee(iteratee, 3),
    	          'type': type
    	        });
    	        result.__filtered__ = result.__filtered__ || isFilter;
    	        return result;
    	      };
    	    });

    	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    	    arrayEach(['head', 'last'], function(methodName, index) {
    	      var takeName = 'take' + (index ? 'Right' : '');

    	      LazyWrapper.prototype[methodName] = function() {
    	        return this[takeName](1).value()[0];
    	      };
    	    });

    	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    	    arrayEach(['initial', 'tail'], function(methodName, index) {
    	      var dropName = 'drop' + (index ? '' : 'Right');

    	      LazyWrapper.prototype[methodName] = function() {
    	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
    	      };
    	    });

    	    LazyWrapper.prototype.compact = function() {
    	      return this.filter(identity);
    	    };

    	    LazyWrapper.prototype.find = function(predicate) {
    	      return this.filter(predicate).head();
    	    };

    	    LazyWrapper.prototype.findLast = function(predicate) {
    	      return this.reverse().find(predicate);
    	    };

    	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
    	      if (typeof path == 'function') {
    	        return new LazyWrapper(this);
    	      }
    	      return this.map(function(value) {
    	        return baseInvoke(value, path, args);
    	      });
    	    });

    	    LazyWrapper.prototype.reject = function(predicate) {
    	      return this.filter(negate(getIteratee(predicate)));
    	    };

    	    LazyWrapper.prototype.slice = function(start, end) {
    	      start = toInteger(start);

    	      var result = this;
    	      if (result.__filtered__ && (start > 0 || end < 0)) {
    	        return new LazyWrapper(result);
    	      }
    	      if (start < 0) {
    	        result = result.takeRight(-start);
    	      } else if (start) {
    	        result = result.drop(start);
    	      }
    	      if (end !== undefined$1) {
    	        end = toInteger(end);
    	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
    	      }
    	      return result;
    	    };

    	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
    	      return this.reverse().takeWhile(predicate).reverse();
    	    };

    	    LazyWrapper.prototype.toArray = function() {
    	      return this.take(MAX_ARRAY_LENGTH);
    	    };

    	    // Add `LazyWrapper` methods to `lodash.prototype`.
    	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
    	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
    	          isTaker = /^(?:head|last)$/.test(methodName),
    	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
    	          retUnwrapped = isTaker || /^find/.test(methodName);

    	      if (!lodashFunc) {
    	        return;
    	      }
    	      lodash.prototype[methodName] = function() {
    	        var value = this.__wrapped__,
    	            args = isTaker ? [1] : arguments,
    	            isLazy = value instanceof LazyWrapper,
    	            iteratee = args[0],
    	            useLazy = isLazy || isArray(value);

    	        var interceptor = function(value) {
    	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
    	          return (isTaker && chainAll) ? result[0] : result;
    	        };

    	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
    	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
    	          isLazy = useLazy = false;
    	        }
    	        var chainAll = this.__chain__,
    	            isHybrid = !!this.__actions__.length,
    	            isUnwrapped = retUnwrapped && !chainAll,
    	            onlyLazy = isLazy && !isHybrid;

    	        if (!retUnwrapped && useLazy) {
    	          value = onlyLazy ? value : new LazyWrapper(this);
    	          var result = func.apply(value, args);
    	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
    	          return new LodashWrapper(result, chainAll);
    	        }
    	        if (isUnwrapped && onlyLazy) {
    	          return func.apply(this, args);
    	        }
    	        result = this.thru(interceptor);
    	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
    	      };
    	    });

    	    // Add `Array` methods to `lodash.prototype`.
    	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
    	      var func = arrayProto[methodName],
    	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
    	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

    	      lodash.prototype[methodName] = function() {
    	        var args = arguments;
    	        if (retUnwrapped && !this.__chain__) {
    	          var value = this.value();
    	          return func.apply(isArray(value) ? value : [], args);
    	        }
    	        return this[chainName](function(value) {
    	          return func.apply(isArray(value) ? value : [], args);
    	        });
    	      };
    	    });

    	    // Map minified method names to their real names.
    	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
    	      var lodashFunc = lodash[methodName];
    	      if (lodashFunc) {
    	        var key = lodashFunc.name + '';
    	        if (!hasOwnProperty.call(realNames, key)) {
    	          realNames[key] = [];
    	        }
    	        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
    	      }
    	    });

    	    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
    	      'name': 'wrapper',
    	      'func': undefined$1
    	    }];

    	    // Add methods to `LazyWrapper`.
    	    LazyWrapper.prototype.clone = lazyClone;
    	    LazyWrapper.prototype.reverse = lazyReverse;
    	    LazyWrapper.prototype.value = lazyValue;

    	    // Add chain sequence methods to the `lodash` wrapper.
    	    lodash.prototype.at = wrapperAt;
    	    lodash.prototype.chain = wrapperChain;
    	    lodash.prototype.commit = wrapperCommit;
    	    lodash.prototype.next = wrapperNext;
    	    lodash.prototype.plant = wrapperPlant;
    	    lodash.prototype.reverse = wrapperReverse;
    	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    	    // Add lazy aliases.
    	    lodash.prototype.first = lodash.prototype.head;

    	    if (symIterator) {
    	      lodash.prototype[symIterator] = wrapperToIterator;
    	    }
    	    return lodash;
    	  });

    	  /*--------------------------------------------------------------------------*/

    	  // Export lodash.
    	  var _ = runInContext();

    	  // Some AMD build optimizers, like r.js, check for condition patterns like:
    	  if (freeModule) {
    	    // Export for Node.js.
    	    (freeModule.exports = _)._ = _;
    	    // Export for CommonJS support.
    	    freeExports._ = _;
    	  }
    	  else {
    	    // Export to the global object.
    	    root._ = _;
    	  }
    	}.call(commonjsGlobal)); 
    } (lodash, lodash.exports));

    var lodashExports = lodash.exports;
    var _ = /*@__PURE__*/getDefaultExportFromCjs(lodashExports);

    var css_248z$5 = "";
    styleInject(css_248z$5);

    /* src\Tabs.svelte generated by Svelte v3.59.2 */

    const { console: console_1$3 } = globals;
    const file$5 = "src\\Tabs.svelte";
    const get_content_slot_changes = dirty => ({});
    const get_content_slot_context = ctx => ({});

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	child_ctx[25] = i;
    	return child_ctx;
    }

    // (171:8) {#each tabs as tab, index}
    function create_each_block$2(ctx) {
    	let div;
    	let t0_value = /*tab*/ ctx[23] + "";
    	let t0;
    	let t1;
    	let div_class_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[14](/*index*/ ctx[25]);
    	}

    	function keydown_handler(...args) {
    		return /*keydown_handler*/ ctx[15](/*index*/ ctx[25], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text(t0_value);
    			t1 = space();

    			attr_dev(div, "class", div_class_value = "tab " + (/*index*/ ctx[25] === /*$activeTab*/ ctx[4]
    			? 'active'
    			: '') + " svelte-10016yo");

    			attr_dev(div, "role", "tab");
    			attr_dev(div, "tabindex", "0");
    			add_location(div, file$5, 171, 12, 5027);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, t1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "click", click_handler, false, false, false, false),
    					listen_dev(div, "keydown", keydown_handler, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*tabs*/ 1 && t0_value !== (t0_value = /*tab*/ ctx[23] + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*$activeTab*/ 16 && div_class_value !== (div_class_value = "tab " + (/*index*/ ctx[25] === /*$activeTab*/ ctx[4]
    			? 'active'
    			: '') + " svelte-10016yo")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(171:8) {#each tabs as tab, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let div3;
    	let div0;
    	let fontawesomeicon0;
    	let div0_class_value;
    	let t0;
    	let div1;
    	let t1;
    	let div2;
    	let fontawesomeicon1;
    	let div2_class_value;
    	let t2;
    	let div4;
    	let current;
    	let mounted;
    	let dispose;

    	fontawesomeicon0 = new FontAwesomeIcon({
    			props: { icon: faChevronLeft },
    			$$inline: true
    		});

    	let each_value = /*tabs*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	fontawesomeicon1 = new FontAwesomeIcon({
    			props: { icon: faChevronRight },
    			$$inline: true
    		});

    	const content_slot_template = /*#slots*/ ctx[13].content;
    	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[12], get_content_slot_context);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			create_component(fontawesomeicon0.$$.fragment);
    			t0 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t1 = space();
    			div2 = element("div");
    			create_component(fontawesomeicon1.$$.fragment);
    			t2 = space();
    			div4 = element("div");
    			if (content_slot) content_slot.c();
    			attr_dev(div0, "class", div0_class_value = "arrow left " + (/*showLeftArrow*/ ctx[2] ? '' : 'hidden') + " svelte-10016yo");
    			attr_dev(div0, "role", "presentation");
    			attr_dev(div0, "tabindex", "0");
    			add_location(div0, file$5, 166, 4, 4651);
    			attr_dev(div1, "class", "tabs svelte-10016yo");
    			add_location(div1, file$5, 169, 4, 4830);
    			attr_dev(div2, "class", div2_class_value = "arrow right " + (/*showRightArrow*/ ctx[3] ? '' : 'hidden') + " svelte-10016yo");
    			attr_dev(div2, "role", "presentation");
    			attr_dev(div2, "tabindex", "0");
    			add_location(div2, file$5, 176, 4, 5263);
    			attr_dev(div3, "class", "tabs-container svelte-10016yo");
    			add_location(div3, file$5, 165, 0, 4617);
    			attr_dev(div4, "class", "tab-content svelte-10016yo");
    			add_location(div4, file$5, 181, 0, 5452);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			mount_component(fontawesomeicon0, div0, null);
    			append_dev(div3, t0);
    			append_dev(div3, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div1, null);
    				}
    			}

    			/*div1_binding*/ ctx[16](div1);
    			append_dev(div3, t1);
    			append_dev(div3, div2);
    			mount_component(fontawesomeicon1, div2, null);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div4, anchor);

    			if (content_slot) {
    				content_slot.m(div4, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*scrollLeft*/ ctx[6], false, false, false, false),
    					listen_dev(div1, "mousedown", /*onMouseDown*/ ctx[8], false, false, false, false),
    					listen_dev(div1, "mousemove", /*onMouseMove*/ ctx[9], false, false, false, false),
    					listen_dev(div1, "mouseup", /*onMouseUp*/ ctx[10], false, false, false, false),
    					listen_dev(div1, "mouseleave", /*onMouseUp*/ ctx[10], false, false, false, false),
    					listen_dev(div2, "click", /*scrollRight*/ ctx[7], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*showLeftArrow*/ 4 && div0_class_value !== (div0_class_value = "arrow left " + (/*showLeftArrow*/ ctx[2] ? '' : 'hidden') + " svelte-10016yo")) {
    				attr_dev(div0, "class", div0_class_value);
    			}

    			if (dirty & /*$activeTab, selectTab, handleKeyDown, tabs*/ 2097) {
    				each_value = /*tabs*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (!current || dirty & /*showRightArrow*/ 8 && div2_class_value !== (div2_class_value = "arrow right " + (/*showRightArrow*/ ctx[3] ? '' : 'hidden') + " svelte-10016yo")) {
    				attr_dev(div2, "class", div2_class_value);
    			}

    			if (content_slot) {
    				if (content_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot_base(
    						content_slot,
    						content_slot_template,
    						ctx,
    						/*$$scope*/ ctx[12],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
    						: get_slot_changes(content_slot_template, /*$$scope*/ ctx[12], dirty, get_content_slot_changes),
    						get_content_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon0.$$.fragment, local);
    			transition_in(fontawesomeicon1.$$.fragment, local);
    			transition_in(content_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon0.$$.fragment, local);
    			transition_out(fontawesomeicon1.$$.fragment, local);
    			transition_out(content_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(fontawesomeicon0);
    			destroy_each(each_blocks, detaching);
    			/*div1_binding*/ ctx[16](null);
    			destroy_component(fontawesomeicon1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div4);
    			if (content_slot) content_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let $activeTab;
    	validate_store(activeTab, 'activeTab');
    	component_subscribe($$self, activeTab, $$value => $$invalidate(4, $activeTab = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tabs', slots, ['content']);
    	let { tabs = [] } = $$props;

    	function selectTab(index) {
    		if (!isDragging && movedDistance < dragThreshold) {
    			activeTab.set(index);
    		}

    		movedDistance = 0; // Reset after attempting to select
    	}

    	let tabsContainer;
    	let showLeftArrow = false;
    	let showRightArrow = false;
    	let isDragging = false;
    	let startX;
    	let scrollLeftStart;
    	let dragThreshold = 5; // Threshold in pixels to differentiate drag from click
    	let movedDistance = 0;

    	function updateArrows() {
    		if (tabsContainer) {
    			$$invalidate(2, showLeftArrow = tabsContainer.scrollLeft > 0);
    			$$invalidate(3, showRightArrow = tabsContainer.scrollWidth > tabsContainer.clientWidth && tabsContainer.scrollLeft < tabsContainer.scrollWidth - tabsContainer.clientWidth);
    		}
    	}

    	function scrollLeft() {
    		tabsContainer.scrollBy({ left: -250, behavior: 'smooth' });
    		setTimeout(updateArrows, 300); // Update arrows after scrolling
    	}

    	function scrollRight() {
    		tabsContainer.scrollBy({ left: 250, behavior: 'smooth' });
    		setTimeout(updateArrows, 300); // Update arrows after scrolling
    	}

    	function onMouseDown(e) {
    		isDragging = true;
    		startX = e.pageX - tabsContainer.offsetLeft;
    		scrollLeftStart = tabsContainer.scrollLeft;
    		movedDistance = 0; // Reset moved distance on mouse down
    	}

    	function onMouseMove(e) {
    		if (!isDragging) return;
    		e.preventDefault();
    		const x = e.pageX - tabsContainer.offsetLeft;
    		const walk = x - startX; // 1:1 movement
    		$$invalidate(1, tabsContainer.scrollLeft = scrollLeftStart - walk, tabsContainer);
    		movedDistance = Math.abs(walk); // Calculate moved distance
    		updateArrows();
    	}

    	function onMouseUp() {
    		isDragging = false;
    	}

    	function handleKeyDown(event, index) {
    		if (event.key === 'Enter') {
    			selectTab(index);
    		}
    	}

    	const writable_props = ['tabs'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<Tabs> was created with unknown prop '${key}'`);
    	});

    	const click_handler = index => selectTab(index);
    	const keydown_handler = (index, e) => handleKeyDown(e, index);

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			tabsContainer = $$value;
    			$$invalidate(1, tabsContainer);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('tabs' in $$props) $$invalidate(0, tabs = $$props.tabs);
    		if ('$$scope' in $$props) $$invalidate(12, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		activeTab,
    		get: get_store_value,
    		faChevronLeft,
    		faChevronRight,
    		FontAwesomeIcon,
    		tabs,
    		selectTab,
    		tabsContainer,
    		showLeftArrow,
    		showRightArrow,
    		isDragging,
    		startX,
    		scrollLeftStart,
    		dragThreshold,
    		movedDistance,
    		updateArrows,
    		scrollLeft,
    		scrollRight,
    		onMouseDown,
    		onMouseMove,
    		onMouseUp,
    		handleKeyDown,
    		$activeTab
    	});

    	$$self.$inject_state = $$props => {
    		if ('tabs' in $$props) $$invalidate(0, tabs = $$props.tabs);
    		if ('tabsContainer' in $$props) $$invalidate(1, tabsContainer = $$props.tabsContainer);
    		if ('showLeftArrow' in $$props) $$invalidate(2, showLeftArrow = $$props.showLeftArrow);
    		if ('showRightArrow' in $$props) $$invalidate(3, showRightArrow = $$props.showRightArrow);
    		if ('isDragging' in $$props) isDragging = $$props.isDragging;
    		if ('startX' in $$props) startX = $$props.startX;
    		if ('scrollLeftStart' in $$props) scrollLeftStart = $$props.scrollLeftStart;
    		if ('dragThreshold' in $$props) dragThreshold = $$props.dragThreshold;
    		if ('movedDistance' in $$props) movedDistance = $$props.movedDistance;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*tabsContainer*/ 2) {
    			{
    				if (tabsContainer) {
    					updateArrows();
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*tabsContainer, tabs*/ 3) {
    			//the problem is using tabcontainer vs just tabs div. might be including arrow buttons
    			//causing it to be off by about 60px ish
    			{
    				if (tabsContainer && tabs.length) {
    					const totalTabsWidth = Array.from(tabsContainer.children).reduce((acc, tab) => acc + tab.offsetWidth, 0);
    					console.log('Total Tabs Width:', totalTabsWidth);
    					console.log('Tabs Container Width:', tabsContainer.clientWidth);
    					$$invalidate(3, showRightArrow = totalTabsWidth > tabsContainer.clientWidth);
    				}
    			}
    		}
    	};

    	return [
    		tabs,
    		tabsContainer,
    		showLeftArrow,
    		showRightArrow,
    		$activeTab,
    		selectTab,
    		scrollLeft,
    		scrollRight,
    		onMouseDown,
    		onMouseMove,
    		onMouseUp,
    		handleKeyDown,
    		$$scope,
    		slots,
    		click_handler,
    		keydown_handler,
    		div1_binding
    	];
    }

    class Tabs extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { tabs: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tabs",
    			options,
    			id: create_fragment$5.name
    		});
    	}

    	get tabs() {
    		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tabs(value) {
    		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var css_248z$4 = "";
    styleInject(css_248z$4);

    /* src\Calculation.svelte generated by Svelte v3.59.2 */

    const { Error: Error_1, Object: Object_1, console: console_1$2 } = globals;
    const file$4 = "src\\Calculation.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[56] = list[i].id;
    	child_ctx[57] = list[i].node;
    	child_ctx[59] = i;
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[60] = list[i];
    	child_ctx[62] = i;
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[63] = list[i];
    	return child_ctx;
    }

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[66] = list[i];
    	child_ctx[68] = i;
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[66] = list[i];
    	child_ctx[68] = i;
    	return child_ctx;
    }

    // (2345:4) {#if hasOutput}
    function create_if_block_6(ctx) {
    	let p;
    	let i;
    	let t1;
    	let popover;
    	let updating_show;
    	let current;

    	function popover_show_binding(value) {
    		/*popover_show_binding*/ ctx[25](value);
    	}

    	let popover_props = {
    		placement: "top",
    		$$slots: {
    			content: [create_content_slot_1],
    			trigger: [create_trigger_slot$1]
    		},
    		$$scope: { ctx }
    	};

    	if (/*showPopover*/ ctx[11] !== void 0) {
    		popover_props.show = /*showPopover*/ ctx[11];
    	}

    	popover = new Popover({ props: popover_props, $$inline: true });
    	binding_callbacks.push(() => bind(popover, 'show', popover_show_binding));

    	const block = {
    		c: function create() {
    			p = element("p");
    			i = element("i");
    			i.textContent = "Each column of stacked cards represents a separate opening hand and subsequent draws.";
    			t1 = space();
    			create_component(popover.$$.fragment);
    			add_location(i, file$4, 2345, 80, 99947);
    			set_style(p, "padding", "0.5rem");
    			set_style(p, "text-align", "center");
    			set_style(p, "max-width", "500px");
    			set_style(p, "margin", "auto");
    			add_location(p, file$4, 2345, 4, 99871);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, i);
    			append_dev(p, t1);
    			mount_component(popover, p, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const popover_changes = {};

    			if (dirty[0] & /*showPopover*/ 2048 | dirty[2] & /*$$scope*/ 256) {
    				popover_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_show && dirty[0] & /*showPopover*/ 2048) {
    				updating_show = true;
    				popover_changes.show = /*showPopover*/ ctx[11];
    				add_flush_callback(() => updating_show = false);
    			}

    			popover.$set(popover_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(popover.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(popover.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			destroy_component(popover);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(2345:4) {#if hasOutput}",
    		ctx
    	});

    	return block;
    }

    // (2348:12) 
    function create_trigger_slot$1(ctx) {
    	let button;
    	let fontawesomeicon;
    	let current;
    	let mounted;
    	let dispose;

    	fontawesomeicon = new FontAwesomeIcon({
    			props: {
    				style: "height: 1.2em; vertical-align: -0.155em; color:#0066e9;",
    				icon: faQuestionCircle
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			button = element("button");
    			create_component(fontawesomeicon.$$.fragment);
    			attr_dev(button, "class", "moreInfo");
    			attr_dev(button, "slot", "trigger");
    			attr_dev(button, "tabindex", "-1");
    			attr_dev(button, "aria-label", "Help");
    			add_location(button, file$4, 2347, 12, 100112);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			mount_component(fontawesomeicon, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[24], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(fontawesomeicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(fontawesomeicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			destroy_component(fontawesomeicon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_trigger_slot$1.name,
    		type: "slot",
    		source: "(2348:12) ",
    		ctx
    	});

    	return block;
    }

    // (2351:12) 
    function create_content_slot_1(ctx) {
    	let div;
    	let p;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			p.textContent = "This tool lets you set up multiple individual probability calculations. It's important to know that not all of the inputs above are linked. Use the \"Linked groups\" feature or Advanced section to calculate the probability of drawing cards from different groups.";
    			attr_dev(p, "class", "popover-content svelte-5le23k");
    			add_location(p, file$4, 2351, 16, 100429);
    			attr_dev(div, "slot", "content");
    			add_location(div, file$4, 2350, 12, 100391);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot_1.name,
    		type: "slot",
    		source: "(2351:12) ",
    		ctx
    	});

    	return block;
    }

    // (2423:8) {:else}
    function create_else_block_1(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Add a hypergeometric group or run a monte carlo simulation to show output probabilities.";
    			attr_dev(div, "class", "placeholder svelte-5le23k");
    			add_location(div, file$4, 2423, 9, 105120);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(2423:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (2362:8) {#if hasOutput}
    function create_if_block$2(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*generateTurnsArray*/ ctx[3](/*$numberOfTurns*/ ctx[4].length);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*getCombinedResults, groups, results, $probabilitiesByTurn, $monteCarloHandResults, totalManaRequirements, InitialDrawSize, $numberOfTurns, createGroupCards, generateTurnsArray*/ 205023) {
    				each_value_1 = /*generateTurnsArray*/ ctx[3](/*$numberOfTurns*/ ctx[4].length);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(2362:8) {#if hasOutput}",
    		ctx
    	});

    	return block;
    }

    // (2364:12) {#if createGroupCards(groups, results, $probabilitiesByTurn, turn).length > 0 || createGroupCards(groups, results, $monteCarloHandResults, turn, 'hand').length > 0}
    function create_if_block_1$1(ctx) {
    	let div2;
    	let div0;
    	let t0;
    	let t1;
    	let t2;
    	let br;
    	let t3;
    	let i;
    	let t4;

    	let t5_value = (/*turn*/ ctx[62] === 0
    	? `Draw ${/*InitialDrawSize*/ ctx[1]}`
    	: `Draw ${/*$numberOfTurns*/ ctx[4][/*turn*/ ctx[62] - 1]}`) + "";

    	let t5;
    	let t6;
    	let t7;
    	let div1;
    	let t8;
    	let each_value_2 = /*getCombinedResults*/ ctx[17](/*groups*/ ctx[0], /*results*/ ctx[2], /*$probabilitiesByTurn*/ ctx[7], /*$monteCarloHandResults*/ ctx[6], /*turn*/ ctx[62]);
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t0 = text("Turn ");
    			t1 = text(/*turn*/ ctx[62]);
    			t2 = text(":");
    			br = element("br");
    			t3 = space();
    			i = element("i");
    			t4 = text("(");
    			t5 = text(t5_value);
    			t6 = text(")");
    			t7 = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t8 = space();
    			add_location(br, file$4, 2366, 36, 101409);
    			attr_dev(i, "class", "svelte-5le23k");
    			add_location(i, file$4, 2367, 24, 101439);
    			attr_dev(div0, "class", "turn-label svelte-5le23k");
    			add_location(div0, file$4, 2365, 20, 101347);
    			attr_dev(div1, "class", "card-rectangles svelte-5le23k");
    			add_location(div1, file$4, 2369, 20, 101575);
    			attr_dev(div2, "class", "turn-row svelte-5le23k");
    			add_location(div2, file$4, 2364, 16, 101303);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, t0);
    			append_dev(div0, t1);
    			append_dev(div0, t2);
    			append_dev(div0, br);
    			append_dev(div0, t3);
    			append_dev(div0, i);
    			append_dev(i, t4);
    			append_dev(i, t5);
    			append_dev(i, t6);
    			append_dev(div2, t7);
    			append_dev(div2, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div1, null);
    				}
    			}

    			append_dev(div2, t8);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*InitialDrawSize, $numberOfTurns*/ 18 && t5_value !== (t5_value = (/*turn*/ ctx[62] === 0
    			? `Draw ${/*InitialDrawSize*/ ctx[1]}`
    			: `Draw ${/*$numberOfTurns*/ ctx[4][/*turn*/ ctx[62] - 1]}`) + "")) set_data_dev(t5, t5_value);

    			if (dirty[0] & /*totalManaRequirements, getCombinedResults, groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 139461) {
    				each_value_2 = /*getCombinedResults*/ ctx[17](/*groups*/ ctx[0], /*results*/ ctx[2], /*$probabilitiesByTurn*/ ctx[7], /*$monteCarloHandResults*/ ctx[6], /*turn*/ ctx[62]);
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(2364:12) {#if createGroupCards(groups, results, $probabilitiesByTurn, turn).length > 0 || createGroupCards(groups, results, $monteCarloHandResults, turn, 'hand').length > 0}",
    		ctx
    	});

    	return block;
    }

    // (2396:24) {:else}
    function create_else_block(ctx) {
    	let div6;
    	let t0;
    	let div5;
    	let div3;
    	let div2;
    	let div0;

    	let t1_value = (/*card*/ ctx[63].probability !== null
    	? `${/*card*/ ctx[63].probability}%`
    	: '') + "";

    	let t1;
    	let t2;
    	let div1;
    	let raw_value = /*card*/ ctx[63].ratioText + "";
    	let t3;
    	let div4;
    	let t4;
    	let if_block = /*turn*/ ctx[62] === 0 && create_if_block_5(ctx);
    	let each_value_4 = /*card*/ ctx[63].isBlank;
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    	}

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			if (if_block) if_block.c();
    			t0 = space();
    			div5 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			t1 = text(t1_value);
    			t2 = space();
    			div1 = element("div");
    			t3 = space();
    			div4 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space();
    			attr_dev(div0, "class", "probability svelte-5le23k");
    			set_style(div0, "color", getProbabilityColor(/*card*/ ctx[63].probability));
    			add_location(div0, file$4, 2403, 36, 104059);
    			attr_dev(div1, "class", "card-ratio svelte-5le23k");
    			add_location(div1, file$4, 2406, 34, 104321);
    			attr_dev(div2, "class", "card-details svelte-5le23k");
    			add_location(div2, file$4, 2402, 32, 103995);
    			attr_dev(div3, "class", "rectangle svelte-5le23k");
    			set_style(div3, "background-color", /*card*/ ctx[63].color);
    			add_location(div3, file$4, 2401, 30, 103898);
    			attr_dev(div4, "class", "stacked-cards svelte-5le23k");
    			add_location(div4, file$4, 2409, 30, 104483);
    			attr_dev(div5, "class", "card-container svelte-5le23k");
    			set_style(div5, "margin-right", 7 + (/*card*/ ctx[63].isBlank.length - 1) * 4 + "px");
    			add_location(div5, file$4, 2400, 28, 103777);
    			attr_dev(div6, "class", "card-group svelte-5le23k");
    			add_location(div6, file$4, 2396, 26, 103568);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			if (if_block) if_block.m(div6, null);
    			append_dev(div6, t0);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, t1);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			div1.innerHTML = raw_value;
    			append_dev(div5, t3);
    			append_dev(div5, div4);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div4, null);
    				}
    			}

    			append_dev(div6, t4);
    		},
    		p: function update(ctx, dirty) {
    			if (/*turn*/ ctx[62] === 0) if_block.p(ctx, dirty);

    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197 && t1_value !== (t1_value = (/*card*/ ctx[63].probability !== null
    			? `${/*card*/ ctx[63].probability}%`
    			: '') + "")) set_data_dev(t1, t1_value);

    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197) {
    				set_style(div0, "color", getProbabilityColor(/*card*/ ctx[63].probability));
    			}

    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197 && raw_value !== (raw_value = /*card*/ ctx[63].ratioText + "")) div1.innerHTML = raw_value;
    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197) {
    				set_style(div3, "background-color", /*card*/ ctx[63].color);
    			}

    			if (dirty[0] & /*getCombinedResults, groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 131269) {
    				each_value_4 = /*card*/ ctx[63].isBlank;
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div4, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_4.length;
    			}

    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197) {
    				set_style(div5, "margin-right", 7 + (/*card*/ ctx[63].isBlank.length - 1) * 4 + "px");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(2396:24) {:else}",
    		ctx
    	});

    	return block;
    }

    // (2372:24) {#if (card.source === 'monteCarloResults' || card.source === 'monteCarloHandResults') && totalManaRequirements > 0}
    function create_if_block_2(ctx) {
    	let div6;
    	let t0;
    	let t1;
    	let div5;
    	let div3;
    	let div2;
    	let div0;

    	let t2_value = (/*card*/ ctx[63].probability !== null
    	? `${/*card*/ ctx[63].probability}%`
    	: '') + "";

    	let t2;
    	let t3;
    	let div1;
    	let raw_value = /*card*/ ctx[63].ratioText + "";
    	let t4;
    	let div4;
    	let t5;
    	let div6_class_value;
    	let if_block0 = /*turn*/ ctx[62] === 0 && create_if_block_4(ctx);
    	let if_block1 = /*turn*/ ctx[62] === /*totalManaRequirements*/ ctx[13] && create_if_block_3(ctx);
    	let each_value_3 = /*card*/ ctx[63].isBlank;
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			div5 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			t2 = text(t2_value);
    			t3 = space();
    			div1 = element("div");
    			t4 = space();
    			div4 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t5 = space();
    			attr_dev(div0, "class", "probability svelte-5le23k");
    			set_style(div0, "color", getProbabilityColor(/*card*/ ctx[63].probability));
    			add_location(div0, file$4, 2382, 36, 102622);
    			attr_dev(div1, "class", "card-ratio svelte-5le23k");
    			add_location(div1, file$4, 2385, 34, 102884);
    			attr_dev(div2, "class", "card-details svelte-5le23k");
    			add_location(div2, file$4, 2381, 32, 102558);
    			attr_dev(div3, "class", "rectangle svelte-5le23k");
    			set_style(div3, "background-color", /*card*/ ctx[63].color);
    			add_location(div3, file$4, 2380, 30, 102461);
    			attr_dev(div4, "class", "stacked-cards svelte-5le23k");
    			add_location(div4, file$4, 2388, 30, 103046);
    			attr_dev(div5, "class", "card-container svelte-5le23k");
    			set_style(div5, "margin-right", 7 + (/*card*/ ctx[63].isBlank.length - 1) * 4 + "px");
    			add_location(div5, file$4, 2379, 28, 102340);

    			attr_dev(div6, "class", div6_class_value = "card-group " + (/*turn*/ ctx[62] === /*totalManaRequirements*/ ctx[13]
    			? 'on-curve'
    			: '') + " svelte-5le23k");

    			add_location(div6, file$4, 2372, 24, 101900);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			if (if_block0) if_block0.m(div6, null);
    			append_dev(div6, t0);
    			if (if_block1) if_block1.m(div6, null);
    			append_dev(div6, t1);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, t2);
    			append_dev(div2, t3);
    			append_dev(div2, div1);
    			div1.innerHTML = raw_value;
    			append_dev(div5, t4);
    			append_dev(div5, div4);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div4, null);
    				}
    			}

    			append_dev(div6, t5);
    		},
    		p: function update(ctx, dirty) {
    			if (/*turn*/ ctx[62] === 0) if_block0.p(ctx, dirty);

    			if (/*turn*/ ctx[62] === /*totalManaRequirements*/ ctx[13]) {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_3(ctx);
    					if_block1.c();
    					if_block1.m(div6, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197 && t2_value !== (t2_value = (/*card*/ ctx[63].probability !== null
    			? `${/*card*/ ctx[63].probability}%`
    			: '') + "")) set_data_dev(t2, t2_value);

    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197) {
    				set_style(div0, "color", getProbabilityColor(/*card*/ ctx[63].probability));
    			}

    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197 && raw_value !== (raw_value = /*card*/ ctx[63].ratioText + "")) div1.innerHTML = raw_value;
    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197) {
    				set_style(div3, "background-color", /*card*/ ctx[63].color);
    			}

    			if (dirty[0] & /*getCombinedResults, groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 131269) {
    				each_value_3 = /*card*/ ctx[63].isBlank;
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div4, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_3.length;
    			}

    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197) {
    				set_style(div5, "margin-right", 7 + (/*card*/ ctx[63].isBlank.length - 1) * 4 + "px");
    			}

    			if (dirty[0] & /*totalManaRequirements*/ 8192 && div6_class_value !== (div6_class_value = "card-group " + (/*turn*/ ctx[62] === /*totalManaRequirements*/ ctx[13]
    			? 'on-curve'
    			: '') + " svelte-5le23k")) {
    				attr_dev(div6, "class", div6_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(2372:24) {#if (card.source === 'monteCarloResults' || card.source === 'monteCarloHandResults') && totalManaRequirements > 0}",
    		ctx
    	});

    	return block;
    }

    // (2398:28) {#if turn === 0}
    function create_if_block_5(ctx) {
    	let div;
    	let t_value = /*card*/ ctx[63].label + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "card-label svelte-5le23k");
    			add_location(div, file$4, 2398, 30, 103670);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197 && t_value !== (t_value = /*card*/ ctx[63].label + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(2398:28) {#if turn === 0}",
    		ctx
    	});

    	return block;
    }

    // (2411:32) {#each card.isBlank as isBlank, i}
    function create_each_block_4(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "stacked-card svelte-5le23k");
    			set_style(div, "left", /*i*/ ctx[68] * 4 + "px");
    			set_style(div, "z-index", -(/*i*/ ctx[68] + 1));
    			set_style(div, "background-color", /*isBlank*/ ctx[66] ? '#f2efe8' : /*card*/ ctx[63].color);
    			set_style(div, "border-color", /*isBlank*/ ctx[66] ? '#c1c1c1' : '#666666');
    			add_location(div, file$4, 2411, 34, 104614);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197) {
    				set_style(div, "background-color", /*isBlank*/ ctx[66] ? '#f2efe8' : /*card*/ ctx[63].color);
    			}

    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197) {
    				set_style(div, "border-color", /*isBlank*/ ctx[66] ? '#c1c1c1' : '#666666');
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4.name,
    		type: "each",
    		source: "(2411:32) {#each card.isBlank as isBlank, i}",
    		ctx
    	});

    	return block;
    }

    // (2374:28) {#if turn === 0}
    function create_if_block_4(ctx) {
    	let div;
    	let t_value = /*card*/ ctx[63].label + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "card-label svelte-5le23k");
    			add_location(div, file$4, 2374, 30, 102053);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197 && t_value !== (t_value = /*card*/ ctx[63].label + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(2374:28) {#if turn === 0}",
    		ctx
    	});

    	return block;
    }

    // (2377:28) {#if turn === totalManaRequirements}
    function create_if_block_3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "on-curve turn";
    			attr_dev(div, "class", "on-curve-label svelte-5le23k");
    			add_location(div, file$4, 2377, 30, 102228);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(2377:28) {#if turn === totalManaRequirements}",
    		ctx
    	});

    	return block;
    }

    // (2390:32) {#each card.isBlank as isBlank, i}
    function create_each_block_3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "stacked-card svelte-5le23k");
    			set_style(div, "left", /*i*/ ctx[68] * 4 + "px");
    			set_style(div, "z-index", -(/*i*/ ctx[68] + 1));
    			set_style(div, "background-color", /*isBlank*/ ctx[66] ? '#f2efe8' : /*card*/ ctx[63].color);
    			set_style(div, "border-color", /*isBlank*/ ctx[66] ? '#c1c1c1' : '#666666');
    			add_location(div, file$4, 2390, 34, 103177);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197) {
    				set_style(div, "background-color", /*isBlank*/ ctx[66] ? '#f2efe8' : /*card*/ ctx[63].color);
    			}

    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197) {
    				set_style(div, "border-color", /*isBlank*/ ctx[66] ? '#c1c1c1' : '#666666');
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(2390:32) {#each card.isBlank as isBlank, i}",
    		ctx
    	});

    	return block;
    }

    // (2371:24) {#each getCombinedResults(groups, results, $probabilitiesByTurn, $monteCarloHandResults, turn) as card}
    function create_each_block_2(ctx) {
    	let if_block_anchor;

    	function select_block_type_1(ctx, dirty) {
    		if ((/*card*/ ctx[63].source === 'monteCarloResults' || /*card*/ ctx[63].source === 'monteCarloHandResults') && /*totalManaRequirements*/ ctx[13] > 0) return create_if_block_2;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(2371:24) {#each getCombinedResults(groups, results, $probabilitiesByTurn, $monteCarloHandResults, turn) as card}",
    		ctx
    	});

    	return block;
    }

    // (2363:8) {#each generateTurnsArray($numberOfTurns.length) as _, turn}
    function create_each_block_1(ctx) {
    	let show_if = /*createGroupCards*/ ctx[16](/*groups*/ ctx[0], /*results*/ ctx[2], /*$probabilitiesByTurn*/ ctx[7], /*turn*/ ctx[62]).length > 0 || /*createGroupCards*/ ctx[16](/*groups*/ ctx[0], /*results*/ ctx[2], /*$monteCarloHandResults*/ ctx[6], /*turn*/ ctx[62], 'hand').length > 0;
    	let if_block_anchor;
    	let if_block = show_if && create_if_block_1$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 197) show_if = /*createGroupCards*/ ctx[16](/*groups*/ ctx[0], /*results*/ ctx[2], /*$probabilitiesByTurn*/ ctx[7], /*turn*/ ctx[62]).length > 0 || /*createGroupCards*/ ctx[16](/*groups*/ ctx[0], /*results*/ ctx[2], /*$monteCarloHandResults*/ ctx[6], /*turn*/ ctx[62], 'hand').length > 0;

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$1(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(2363:8) {#each generateTurnsArray($numberOfTurns.length) as _, turn}",
    		ctx
    	});

    	return block;
    }

    // (2431:0) {#each $clonedOutputDiagrams as { id, node }
    function create_each_block$1(ctx) {
    	let div1;
    	let div0;
    	let div0_data_id_value;
    	let t;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t = space();
    			attr_dev(div0, "class", "cloned-output-wrapper");
    			attr_dev(div0, "data-id", div0_data_id_value = /*id*/ ctx[56]);
    			add_location(div0, file$4, 2432, 4, 105493);
    			attr_dev(div1, "class", "tab-content");

    			set_style(div1, "display", /*$activeTab*/ ctx[14] === /*index*/ ctx[59] + 1
    			? 'block'
    			: 'none');

    			add_location(div1, file$4, 2431, 0, 105364);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div1, t);
    			/*div1_binding*/ ctx[27](div1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$clonedOutputDiagrams*/ 32 && div0_data_id_value !== (div0_data_id_value = /*id*/ ctx[56])) {
    				attr_dev(div0, "data-id", div0_data_id_value);
    			}

    			if (dirty[0] & /*$activeTab*/ 16384) {
    				set_style(div1, "display", /*$activeTab*/ ctx[14] === /*index*/ ctx[59] + 1
    				? 'block'
    				: 'none');
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			/*div1_binding*/ ctx[27](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(2431:0) {#each $clonedOutputDiagrams as { id, node }",
    		ctx
    	});

    	return block;
    }

    // (2359:8) 
    function create_content_slot$1(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let t;

    	function select_block_type(ctx, dirty) {
    		if (/*hasOutput*/ ctx[8]) return create_if_block$2;
    		return create_else_block_1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);
    	let each_value = /*$clonedOutputDiagrams*/ ctx[5];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			if_block.c();
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "output-diagram svelte-5le23k");
    			add_location(div0, file$4, 2360, 16, 100958);
    			attr_dev(div1, "class", "tab-content");
    			set_style(div1, "display", /*$activeTab*/ ctx[14] === 0 ? 'block' : 'none');
    			add_location(div1, file$4, 2359, 12, 100859);
    			attr_dev(div2, "slot", "content");
    			add_location(div2, file$4, 2358, 8, 100825);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			if_block.m(div0, null);
    			/*div0_binding*/ ctx[26](div0);
    			append_dev(div2, t);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div2, null);
    				}
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div0, null);
    				}
    			}

    			if (dirty[0] & /*$activeTab*/ 16384) {
    				set_style(div1, "display", /*$activeTab*/ ctx[14] === 0 ? 'block' : 'none');
    			}

    			if (dirty[0] & /*$activeTab, clonedOutputContainer, $clonedOutputDiagrams*/ 17440) {
    				each_value = /*$clonedOutputDiagrams*/ ctx[5];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div2, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if_block.d();
    			/*div0_binding*/ ctx[26](null);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot$1.name,
    		type: "slot",
    		source: "(2359:8) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let h2;
    	let t1;
    	let t2;
    	let tabs_1;
    	let current;
    	let if_block = /*hasOutput*/ ctx[8] && create_if_block_6(ctx);

    	tabs_1 = new Tabs({
    			props: {
    				tabs: /*tabs*/ ctx[12],
    				activeTab,
    				$$slots: { content: [create_content_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			h2.textContent = "Probabilities";
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();
    			create_component(tabs_1.$$.fragment);
    			attr_dev(h2, "id", "probabilities-jump");
    			set_style(h2, "text-align", "center");
    			set_style(h2, "margin-bottom", "0");
    			add_location(h2, file$4, 2343, 4, 99753);
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(tabs_1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*hasOutput*/ ctx[8]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*hasOutput*/ 256) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_6(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t2.parentNode, t2);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const tabs_1_changes = {};
    			if (dirty[0] & /*tabs*/ 4096) tabs_1_changes.tabs = /*tabs*/ ctx[12];

    			if (dirty[0] & /*$clonedOutputDiagrams, $activeTab, clonedOutputContainer, outputDiagram, generateTurnsArray, $numberOfTurns, groups, results, $probabilitiesByTurn, $monteCarloHandResults, totalManaRequirements, InitialDrawSize, hasOutput*/ 26623 | dirty[2] & /*$$scope*/ 256) {
    				tabs_1_changes.$$scope = { dirty, ctx };
    			}

    			tabs_1.$set(tabs_1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(tabs_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(tabs_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(tabs_1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function selectInput(event) {
    	event.target.select(); // Selects all text in the input upon focus
    }

    // Function to calculate the total mana requirements for specified keys
    function calculateTotalManaRequirements(manaRequirements) {
    	const keysToInclude = ['W', 'U', 'B', 'R', 'G', 'C', 'ANY'];
    	return Object.entries(manaRequirements).filter(([key]) => keysToInclude.includes(key)).reduce((total, [,value]) => total + value, 0);
    }

    // Function to calculate combinations (n choose k)
    function choose(n, k) {
    	let result = 1;

    	for (let i = 1; i <= k; i++) {
    		result *= (n + 1 - i) / i;
    	}

    	return result;
    }

    // Function to calculate hypergeometric CDF
    function hypergeometricCDF(x, N, K, n) {
    	const Ckx = choose(K, x);
    	const CnKxn = choose(N - K, n - x);
    	const CnN = choose(N, n);
    	return Ckx * CnKxn / CnN;
    }

    //multivariateHypergeometricCDF 3 functions below
    function multivariateHypergeometricCDF(groupSizes, groupCardsToDraw, deckSize, cardsDrawn) {

    	function calculate(groupIndex, cardsLeft, accumulatedProbability) {
    		if (groupIndex === groupSizes.length) {
    			return accumulatedProbability * choose(deckSize - sumGroupSizes(groupIndex), cardsLeft) / choose(deckSize, cardsDrawn);
    		}

    		let groupProb = 0;

    		for (let i = groupCardsToDraw[groupIndex]; i <= Math.min(cardsLeft, groupSizes[groupIndex]); i++) {
    			groupProb += calculate(groupIndex + 1, cardsLeft - i, accumulatedProbability * choose(groupSizes[groupIndex], i));
    		}

    		return groupProb;
    	}

    	function sumGroupSizes(upToIndex) {
    		return groupSizes.slice(0, upToIndex).reduce((sum, size) => sum + size, 0);
    	}

    	return Math.min(1, calculate(0, cardsDrawn, 1));
    }

    function satisfiesRequirements(combination, requirements) {
    	// Create a list of all possible mana profiles this combination can produce
    	let possibleManaProfiles = combination.map(land => Object.keys(land));

    	// Generate all possible selections of mana from these profiles
    	let allSelections = generateAllSelections(possibleManaProfiles);

    	// Check if any selection satisfies the requirements
    	return allSelections.some(selection => {
    		let manaProfile = selection.reduce(
    			(profile, color) => {
    				profile[color] = (profile[color] || 0) + 1;
    				return profile;
    			},
    			{}
    		);

    		return Object.entries(requirements).every(([color, amount]) => manaProfile[color] >= amount);
    	});
    }

    //-------------------------------------------
    function generateAllSelections(possibleManaProfiles, index = 0, currentSelection = []) {
    	if (index === possibleManaProfiles.length) {
    		return [currentSelection.slice()];
    	}

    	let allSelections = [];

    	for (let color of possibleManaProfiles[index]) {
    		currentSelection.push(color);
    		allSelections.push(...generateAllSelections(possibleManaProfiles, index + 1, currentSelection));
    		currentSelection.pop();
    	}

    	return allSelections;
    }

    // Function to calculate the binomial coefficient
    function binomialCoefficient(n, k) {
    	if (k > n) return 0;
    	if (k === 0 || k === n) return 1;
    	k = Math.min(k, n - k); // Take advantage of symmetry
    	let c = 1;

    	for (let i = 0; i < k; i++) {
    		c = c * (n - i) / (i + 1);
    	}

    	return c;
    }

    // function getAllCombinations(lands, allowDuplicates, totalManaNeeded) {
    //     return new Promise((resolve, reject) => {
    //         // Reset the progress bar at the start of the simulation
    //         combinationProgress.set(0);
    //         const combinations = [];
    //         const landCounts = lands.reduce((counts, land) => {
    //             const key = JSON.stringify(land);
    //             counts[key] = (counts[key] || 0) + 1;
    //             return counts;
    //         }, {});
    //         const totalLands = lands.length; // Total number of lands for progress calculation
    //         const estimatedTotalCombinations = binomialCoefficient(totalLands, totalManaNeeded); // Estimate total combinations
    //         console.log(`Estimated Total Combinations: ${estimatedTotalCombinations}`);
    //         let currentIteration = 0; // Track the current iteration
    //         const stack = [{ index: 0, currentCombination: [], currentCounts: {} }];
    //         const batchSize = 100; // Number of iterations to process before yielding control
    //         function processBatch() {
    //             let batchCounter = 0;
    //             while (stack.length > 0 && batchCounter < batchSize) {
    //                 const { index, currentCombination, currentCounts } = stack.pop();
    //                 if (currentCombination.length > totalManaNeeded) continue;
    //                 if (index === lands.length) {
    //                     const combinationKey = JSON.stringify(currentCombination.map(land => JSON.stringify(land)).sort());
    //                     combinations.push(combinationKey);
    //                     currentIteration++;
    //                     continue;
    //                 }
    //                 // Update progress based on the current iteration and estimated total combinations
    //                 const progress = (currentIteration / estimatedTotalCombinations) * 100;
    //                 combinationProgress.set(progress);
    //                 stack.push({ index: index + 1, currentCombination, currentCounts });
    //                 const land = lands[index];
    //                 const landKey = JSON.stringify(land);
    //                 if (!currentCounts[landKey] || currentCounts[landKey] < landCounts[landKey]) {
    //                     const newCounts = { ...currentCounts, [landKey]: (currentCounts[landKey] || 0) + 1 };
    //                     stack.push({ index: index + 1, currentCombination: [...currentCombination, land], currentCounts: newCounts });
    //                 }
    //                 batchCounter++;
    //             }
    //             if (stack.length > 0) {
    //                 setTimeout(processBatch, 0); // Yield control back to the UI
    //             } else {
    //                 // All batches are complete, resolve the promise with the final combinations
    //                 const finalCombinations = Array.from(new Set(combinations)).map(key => JSON.parse(key).map(landStr => JSON.parse(landStr)));
    //                 console.log(`Total Combinations Generated: ${combinations.length}`);
    //                 console.log(`Final Combinations: ${JSON.stringify(finalCombinations)}`);
    //                 resolve(finalCombinations);
    //             }
    //         }
    //         processBatch();
    //     });
    // }
    function combineProfiles(profiles) {
    	return profiles.reduce(
    		(combinedProfile, profile) => {
    			Object.entries(profile).forEach(([color, amount]) => {
    				combinedProfile[color] = (combinedProfile[color] || 0) + amount;
    			});

    			return combinedProfile;
    		},
    		{}
    	);
    }

    function prepareCombinationsForAnalysis(combinations) {
    	return combinations.map(combination => {
    		const landCounts = combination.reduce(
    			(counts, land) => {
    				const key = JSON.stringify(land);
    				counts[key] = (counts[key] || 0) + 1;
    				return counts;
    			},
    			{}
    		);

    		return Object.entries(landCounts).map(([land, count]) => ({ land: JSON.parse(land), count }));
    	});
    }

    function calculateLandGroupSizes(lands) {
    	// Assuming each land in `lands` array is directly an object like { U: 1 } without a `land` property and a `count`.
    	const landGroupSizes = lands.reduce(
    		(sizes, land) => {
    			const key = JSON.stringify(land);
    			sizes[key] = (sizes[key] || 0) + 1; // Increment count for each unique land
    			return sizes;
    		},
    		{}
    	);

    	return Object.entries(landGroupSizes).map(([land, count]) => ({ land: JSON.parse(land), count }));
    }

    function preprocessRampCards(hand) {
    	let processedRampCards = [];

    	hand.forEach(card => {
    		if (card.ColorsCanProduce && card.CanProduce) {
    			for (let i = 0; i < card.CanProduce; i++) {
    				let processedCard = {};

    				Object.entries(card.ColorsCanProduce).forEach(([color, count]) => {
    					if (count > 0) {
    						processedCard[color] = count;
    					}
    				});

    				processedRampCards.push(processedCard);
    			}
    		}
    	});

    	return processedRampCards;
    }

    function handMeetsRequirements(hand, preparedCombinations) {
    	// Preprocess ramp cards
    	const processedRampCards = preprocessRampCards(hand);

    	// Combine lands and processed ramp cards
    	const combinedHand = hand.filter(card => !card.ColorsCanProduce).concat(processedRampCards);

    	// Log the processed ramp cards and combined hand
    	//  console.log('Processed Ramp Cards:', processedRampCards);
    	//  console.log('Combined Hand:', combinedHand);
    	return preparedCombinations.some(combination => {
    		const landCounts = combination.reduce(
    			(counts, land) => {
    				counts[JSON.stringify(land.land)] = land.count;
    				return counts;
    			},
    			{}
    		);

    		const handProfile = combinedHand.reduce(
    			(profile, land) => {
    				const key = JSON.stringify(land);
    				profile[key] = (profile[key] || 0) + 1;
    				return profile;
    			},
    			{}
    		);

    		// Log the hand profile and land counts
    		//  console.log('Hand Profile:', handProfile);
    		//  console.log('Land Counts:', landCounts);
    		return Object.entries(landCounts).every(([land, count]) => {
    			return handProfile[land] >= count;
    		});
    	});
    }

    //THIS IS BEFORE ADDED LESS CONFIRMED logic, such as color check, etc
    //   function londonMulligan(hand, remainingDeck) {
    //     let mulligansTaken = 0;
    //     let finalHand = hand;
    //     // Destructure the mulliganConfig store
    //     const { maxMulligans, firstMulliganFree, freeMulliganTillLands, minLandsInHand, maxLandsInHand } = $mulliganConfig;
    //     // Initial draw
    //     finalHand = _.sampleSize(remainingDeck, InitialDrawSize);
    //     remainingDeck = removeDrawnCardsFromDeck(remainingDeck, finalHand);
    //     // Log the initial hand and remaining deck
    //     console.log(`Initial Draw: Hand`, _.cloneDeep(finalHand));
    //  //   console.log(`Initial Draw: Remaining Deck`, _.cloneDeep(remainingDeck));
    //         // Adjust the loop condition to ignore maxMulligans when freeMulliganTillLands is true
    //         while (freeMulliganTillLands || mulligansTaken <= maxMulligans) {
    //         // Check if the hand meets the land requirements
    //         const landCount = finalHand.filter(card => !card.TotalManaCost && !card.dummy).length;
    //         const meetsLandRequirements = landCount >= minLandsInHand && landCount <= maxLandsInHand;
    //         // Log the land count and whether the hand meets the land requirements
    //         console.log(`Mulligan ${mulligansTaken}: Land Count`, landCount);
    //         console.log(`Mulligan ${mulligansTaken}: Meets Land Requirements`, meetsLandRequirements);
    //         if (meetsLandRequirements) {
    //             break;
    //         }
    //         if (mulligansTaken > 0 || firstMulliganFree || (freeMulliganTillLands && !meetsLandRequirements)) {
    //             // Shuffle hand into deck and redraw
    //             remainingDeck = remainingDeck.concat(finalHand);
    //             finalHand = _.sampleSize(remainingDeck, InitialDrawSize);
    //             remainingDeck = removeDrawnCardsFromDeck(remainingDeck, finalHand);
    //             // Log the new hand and remaining deck after redraw
    //             console.log(`Mulligan ${mulligansTaken}: Redrawn Hand`, _.cloneDeep(finalHand));
    //          //   console.log(`Mulligan ${mulligansTaken}: Remaining Deck`, _.cloneDeep(remainingDeck));
    //         }
    //         if (!(firstMulliganFree && mulligansTaken === 0) && !(freeMulliganTillLands && !meetsLandRequirements)) {
    //             // Place cards on the bottom of the deck for each mulligan taken
    //             for (let i = 0; i < mulligansTaken; i++) {
    //                 const cardToBottom = prioritizeCardToBottom(finalHand);
    //                 remainingDeck.push(cardToBottom);
    //                 // Log the card placed on the bottom
    //                 console.log(`Mulligan ${mulligansTaken}: Card Placed on Bottom`, _.cloneDeep(cardToBottom));
    //             }
    //         }
    //         mulligansTaken++;
    //     }
    //     // Log the final hand and remaining deck after mulligans
    //     console.log('Final Hand after Mulligans', _.cloneDeep(finalHand));
    //     console.log('Remaining Deck after Mulligans', _.cloneDeep(remainingDeck));
    //     return { finalHand, remainingDeck };
    // }
    function prioritizeCardToBottom(hand) {
    	// Prioritize placing a "dummy" card at the bottom
    	const dummyIndex = hand.findIndex(card => card.dummy);

    	if (dummyIndex !== -1) {
    		return hand.splice(dummyIndex, 1)[0];
    	}

    	// If no dummy card, prioritize placing a duplicate mana card at the bottom
    	const manaCounts = {};

    	hand.forEach(card => {
    		const key = JSON.stringify(card);
    		manaCounts[key] = (manaCounts[key] || 0) + 1;
    	});

    	for (const key in manaCounts) {
    		if (manaCounts[key] > 1) {
    			const duplicateIndex = hand.findIndex(card => JSON.stringify(card) === key);

    			if (duplicateIndex !== -1) {
    				return hand.splice(duplicateIndex, 1)[0];
    			}
    		}
    	}

    	// If no dummy or duplicate mana card, place the first card at the bottom
    	return hand.pop();
    }

    //     if (handMeetsRequirements(AvailableManaThisTurn, $simulationData.preparedCards)) {
    //     return { AvailableManaThisTurn, meetsRequirements: true };
    // }
    // return { AvailableManaThisTurn, meetsRequirements: false };
    function getTotalManaCost(manaCost) {
    	if (!manaCost) return Infinity; // Return a high value if manaCost is undefined or null
    	return Object.values(manaCost).reduce((sum, value) => sum + value, 0);
    }

    function addRampManaToAvailable(rampCard, AvailableManaThisTurn) {
    	if (rampCard.CustomRamp === 'signet') {
    		// Handle signet logic
    		if (removeManaForSignet(AvailableManaThisTurn)) {
    			const signetMana = simplifySignetManaProduction(rampCard.ColorsCanProduce);
    			AvailableManaThisTurn.push(...signetMana);
    		}
    	} else {
    		// Existing logic for other ramp cards
    		const simplifiedMana = simplifyManaProduction(rampCard.ColorsCanProduce, rampCard.CanProduce);

    		AvailableManaThisTurn.push(...simplifiedMana);
    	}
    }

    function removeManaForSignet(AvailableManaThisTurn) {
    	// Prioritize removing mana that produces "C" and "ANY"
    	let indexToRemove = AvailableManaThisTurn.findIndex(mana => mana.C && mana.ANY);

    	if (indexToRemove === -1) {
    		// Calculate the total count of each color (excluding "ANY")
    		const colorTotals = {};

    		AvailableManaThisTurn.forEach(mana => {
    			Object.entries(mana).forEach(([color, value]) => {
    				if (color !== 'ANY') {
    					colorTotals[color] = (colorTotals[color] || 0) + value;
    				}
    			});
    		});

    		console.log('Color Totals:', colorTotals);

    		// Find the color with the highest total count
    		let maxColor = null;

    		let maxCount = 0;

    		Object.entries(colorTotals).forEach(([color, count]) => {
    			if (count > maxCount) {
    				maxColor = color;
    				maxCount = count;
    			}
    		});

    		console.log('Max Color:', maxColor, 'Max Count:', maxCount);

    		// Find the mana to remove based on the most common color and least number of different colors
    		let minColors = Infinity;

    		AvailableManaThisTurn.forEach((mana, index) => {
    			if (mana[maxColor]) {
    				const colorCount = Object.keys(mana).filter(color => color !== 'ANY').length;

    				if (colorCount < minColors) {
    					minColors = colorCount;
    					indexToRemove = index;
    				}
    			}
    		});
    	}

    	if (indexToRemove !== -1) {
    		console.log('Removing mana for signet:', AvailableManaThisTurn[indexToRemove]);
    		AvailableManaThisTurn.splice(indexToRemove, 1);
    		return true;
    	}

    	return false;
    }

    function simplifySignetManaProduction(ColorsCanProduce) {
    	const simplified = [];
    	const strippedColors = Object.fromEntries(Object.entries(ColorsCanProduce).filter(([color, value]) => value > 0 && color !== 'ANY'));

    	Object.keys(strippedColors).forEach(color => {
    		simplified.push({ [color]: 1, ANY: 1 });
    	});

    	return simplified;
    }

    function simplifyManaProduction(ColorsCanProduce, CanProduce) {
    	const simplified = [];
    	const strippedColors = Object.fromEntries(Object.entries(ColorsCanProduce).filter(([color, value]) => value > 0));

    	for (let i = 0; i < CanProduce; i++) {
    		simplified.push({ ...strippedColors });
    	}

    	return simplified;
    }

    function deductMana(AvailableManaThisTurn, manaCost) {
    	// Deduct specific color mana first
    	for (const color in manaCost) {
    		if (color !== 'ANY' && manaCost[color] > 0) {
    			let required = manaCost[color];

    			for (let i = 0; i < AvailableManaThisTurn.length; i++) {
    				if (AvailableManaThisTurn[i][color] > 0) {
    					const usedMana = Math.min(AvailableManaThisTurn[i][color], required);
    					required -= usedMana;

    					// Remove the entire entry if any part of it is used
    					AvailableManaThisTurn.splice(i, 1);

    					i--; // Adjust index after removal
    					if (required <= 0) break;
    				}
    			}
    		}
    	}

    	// Deduct ANY mana next
    	if (manaCost.ANY > 0) {
    		let required = manaCost.ANY;

    		// First use mana sources that only have ANY
    		for (let i = 0; i < AvailableManaThisTurn.length; i++) {
    			if (Object.keys(AvailableManaThisTurn[i]).length === 1 && AvailableManaThisTurn[i].ANY > 0) {
    				const usedMana = Math.min(AvailableManaThisTurn[i].ANY, required);
    				required -= usedMana;

    				// Remove the entire entry if any part of it is used
    				AvailableManaThisTurn.splice(i, 1);

    				i--; // Adjust index after removal
    				if (required <= 0) break;
    			}
    		}

    		// Then use other mana sources that include ANY
    		if (required > 0) {
    			for (let i = 0; i < AvailableManaThisTurn.length; i++) {
    				if (AvailableManaThisTurn[i].ANY > 0) {
    					const usedMana = Math.min(AvailableManaThisTurn[i].ANY, required);
    					required -= usedMana;

    					// Remove the entire entry if any part of it is used
    					AvailableManaThisTurn.splice(i, 1);

    					i--; // Adjust index after removal
    					if (required <= 0) break;
    				}
    			}
    		}
    	}
    }

    function convertPercentToRatio(percent) {
    	if (percent === null) return '';

    	// Directly map the percentage to a scale of 20
    	let number = Math.round(percent / 100 * 20);

    	return `${number} out<br aria-hidden="true">of 20`;
    }

    //changes the percent output based on probability percent, to align to Frank K values
    //https://www.channelfireball.com/article/How-Many-Sources-Do-You-Need-to-Consistently-Cast-Your-Spells-A-2022-Update/dc23a7d2-0a16-4c0b-ad36-586fcca03ad8/
    function getProbabilityColor(probability) {
    	if (probability >= 0 && probability < 75) {
    		return '#a35800';
    	} else if (probability >= 75 && probability < 90) {
    		return '#7a6e00';
    	} else if (probability >= 90 && probability <= 100) {
    		return '#0c7a00';
    	}

    	return 'black'; // Default color
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let totalManaRequirements;
    	let tabs;
    	let generateTurnsArray;
    	let $numberOfTurns;
    	let $clonedOutputDiagrams;
    	let $monteCarloHandResults;
    	let $probabilitiesByTurn;
    	let $groupColors;
    	let $monteCarloResults;
    	let $simulationData;
    	let $simulationType;
    	let $mulliganConfig;
    	let $cancelSimulation;
    	let $simplifiedRampMana;
    	let $activeTab;
    	validate_store(numberOfTurns, 'numberOfTurns');
    	component_subscribe($$self, numberOfTurns, $$value => $$invalidate(4, $numberOfTurns = $$value));
    	validate_store(clonedOutputDiagrams, 'clonedOutputDiagrams');
    	component_subscribe($$self, clonedOutputDiagrams, $$value => $$invalidate(5, $clonedOutputDiagrams = $$value));
    	validate_store(monteCarloHandResults, 'monteCarloHandResults');
    	component_subscribe($$self, monteCarloHandResults, $$value => $$invalidate(6, $monteCarloHandResults = $$value));
    	validate_store(groupColors, 'groupColors');
    	component_subscribe($$self, groupColors, $$value => $$invalidate(29, $groupColors = $$value));
    	validate_store(monteCarloResults, 'monteCarloResults');
    	component_subscribe($$self, monteCarloResults, $$value => $$invalidate(30, $monteCarloResults = $$value));
    	validate_store(simulationData, 'simulationData');
    	component_subscribe($$self, simulationData, $$value => $$invalidate(21, $simulationData = $$value));
    	validate_store(simulationType, 'simulationType');
    	component_subscribe($$self, simulationType, $$value => $$invalidate(31, $simulationType = $$value));
    	validate_store(mulliganConfig, 'mulliganConfig');
    	component_subscribe($$self, mulliganConfig, $$value => $$invalidate(22, $mulliganConfig = $$value));
    	validate_store(cancelSimulation, 'cancelSimulation');
    	component_subscribe($$self, cancelSimulation, $$value => $$invalidate(32, $cancelSimulation = $$value));
    	validate_store(simplifiedRampMana, 'simplifiedRampMana');
    	component_subscribe($$self, simplifiedRampMana, $$value => $$invalidate(23, $simplifiedRampMana = $$value));
    	validate_store(activeTab, 'activeTab');
    	component_subscribe($$self, activeTab, $$value => $$invalidate(14, $activeTab = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Calculation', slots, []);
    	let hasOutput = false;
    	let outputDiagram;
    	let clonedOutputContainer; // Declare the variable

    	function calculateLinkedGroups(linkedGroups) {
    		const groupResults = [];
    		const groupSizes = linkedGroups.map(group => group.size);
    		const groupCardsToDraw = linkedGroups.map(group => group.cardsToDraw);
    		const linkName = linkedGroups[0].link;
    		let initialProb = multivariateHypergeometricCDF(groupSizes, groupCardsToDraw, deckSize, InitialDrawSize);

    		// Calculate probability for turn 0 with mulligans taken into account
    		let turn0Prob = 1 - Math.pow(1 - initialProb, mulliganCount + 1);

    		groupResults.push({ turn: 0, probability: turn0Prob });
    		let totalCardsSeen = InitialDrawSize;
    		let adjustedDeckSize = deckSize;

    		for (let turn = 1; turn <= $numberOfTurns.length; turn++) {
    			totalCardsSeen += $numberOfTurns[turn - 1]; // Use the number of cards drawn for each turn
    			let probAtLeastDesiredA = multivariateHypergeometricCDF(groupSizes, groupCardsToDraw, adjustedDeckSize, totalCardsSeen);

    			if (mulliganCount > 0) {
    				let probNotDrawingCombination = Math.pow(1 - initialProb, mulliganCount); // (1 - P) for each mulligan
    				probAtLeastDesiredA = 1 - probNotDrawingCombination * (1 - probAtLeastDesiredA);
    			}

    			groupResults.push({ turn, probability: probAtLeastDesiredA });
    		}

    		$$invalidate(2, results[linkName] = groupResults, results);
    	}

    	let { groups = [] } = $$props;
    	let { deckSize } = $$props;
    	let { mulliganCount } = $$props;
    	let { InitialDrawSize } = $$props;
    	let results = {};
    	let showPopover = false;

    	// //Reactive statement to run monte carlo simulation on groups or other changes (live vs button)
    	// $: if (groups.length > 0 && deckSize && mulliganCount !== undefined && InitialDrawSize) {
    	//     identifyProfiles();
    	// }
    	function calculateProbabilities() {
    		console.log('At start of calculateProbabilities, InitialDrawSize:', InitialDrawSize);
    		console.log("Calculating probabilities for groups:", groups);
    		$$invalidate(2, results = {});
    		console.log('Mulligan count at start of calculateProbabilities:', mulliganCount);

    		// Group by links, excluding empty links
    		const links = {};

    		groups.forEach(group => {
    			if (group.link && group.link.trim() !== '') {
    				// Check for non-empty link
    				if (!links[group.link]) links[group.link] = [];

    				links[group.link].push(group);
    			} else {
    				calculateSingleGroup(group);
    			}
    		});

    		// Calculate probabilities for linked groups
    		for (const link in links) {
    			calculateLinkedGroups(links[link]);
    		}
    	}

    	//The parameters for the hypergeometricCDF function are as follows:
    	//x: The number of successes in the sample (in our case, the number of desired cards we want to draw).
    	//N: The size of the population (in our case, the total deck size).
    	//K: The number of successes in the population (in our case, the size of the group of desired cards in the deck).
    	//n: The size of the sample (in our case, the total number of cards drawn).
    	//before I messed with draws PER TURN
    	// function calculateSingleGroup(group) {
    	//     const groupResults = [];
    	//     let totalCardsSeen = InitialDrawSize;
    	//     // Calculate the probability for turn 0 without mulligans
    	//     let initialProb = 0;
    	//     for (let k = group.cardsToDraw; k <= Math.min(totalCardsSeen, group.size); k++) {
    	//         initialProb += hypergeometricCDF(k, deckSize, group.size, totalCardsSeen);
    	//     }
    	//     // Adjust the initial probability to account for mulligans
    	//     let turn0Prob = 1 - Math.pow((1 - initialProb), mulliganCount + 1);
    	//     groupResults.push({ turn: 0, probability: turn0Prob });
    	//     for (let turn = 1; turn <= $numberOfTurns; turn++) {
    	//         totalCardsSeen += 1;
    	//         let probAtLeastDesiredA = 0;
    	//         for (let k = group.cardsToDraw; k <= Math.min(totalCardsSeen, group.size); k++) {
    	//             probAtLeastDesiredA += hypergeometricCDF(k, deckSize, group.size, totalCardsSeen);
    	//         }
    	//         if (mulliganCount > 0) {
    	//             let probNotDrawingCombination = Math.pow((1 - initialProb), mulliganCount); // (1 - P) for each mulligan
    	//             probAtLeastDesiredA = 1 - (probNotDrawingCombination * (1 - probAtLeastDesiredA));
    	//         }
    	//         groupResults.push({ turn, probability: probAtLeastDesiredA });
    	//     }
    	//     results[group.name] = groupResults;
    	// }
    	function calculateSingleGroup(group) {
    		const groupResults = [];
    		let totalCardsSeen = InitialDrawSize;

    		// Calculate the probability for turn 0 without mulligans
    		let initialProb = 0;

    		for (let k = group.cardsToDraw; k <= Math.min(totalCardsSeen, group.size); k++) {
    			initialProb += hypergeometricCDF(k, deckSize, group.size, totalCardsSeen);
    		}

    		// Adjust the initial probability to account for mulligans
    		let turn0Prob = 1 - Math.pow(1 - initialProb, mulliganCount + 1);

    		groupResults.push({ turn: 0, probability: turn0Prob });
    		console.log(`Turn 0 - Group: ${group.name}, Probability: ${turn0Prob}`);

    		for (let turn = 1; turn <= $numberOfTurns.length; turn++) {
    			totalCardsSeen += $numberOfTurns[turn - 1]; // Use the number of cards drawn for each turn
    			let probAtLeastDesiredA = 0;

    			for (let k = group.cardsToDraw; k <= Math.min(totalCardsSeen, group.size); k++) {
    				probAtLeastDesiredA += hypergeometricCDF(k, deckSize, group.size, totalCardsSeen);
    			}

    			if (mulliganCount > 0) {
    				let probNotDrawingCombination = Math.pow(1 - initialProb, mulliganCount); // (1 - P) for each mulligan
    				probAtLeastDesiredA = 1 - probNotDrawingCombination * (1 - probAtLeastDesiredA);
    			}

    			groupResults.push({ turn, probability: probAtLeastDesiredA });
    		}

    		$$invalidate(2, results[group.name] = groupResults, results);
    		console.log(`Group Results for ${group.name}:`, groupResults);
    	}

    	// //the following is the old less efficient combination code
    	// //still undergoing full testing to verify new code is accurate before delete this
    	//     function determineNeededCombinations(lands, requirements, totalManaNeeded) {
    	//     let combinedLands = [...lands, ...$simplifiedRampMana];
    	//     console.log('Combined Lands:', combinedLands); // Log the combined lands
    	//     const combinations = getAllCombinations(combinedLands, true, totalManaNeeded);
    	//     return combinations.filter(combination => satisfiesRequirements(combination, requirements, totalManaNeeded));
    	// }
    	//     function satisfiesRequirements(combination, requirements, totalManaNeeded) {
    	//         if (combination.length < totalManaNeeded) return false;
    	//         // Create a list of all possible mana profiles this combination can produce
    	//         let possibleManaProfiles = combination.map(land => Object.keys(land));
    	//         // Generate all possible selections of mana from these profiles
    	//         let allSelections = generateAllSelections(possibleManaProfiles);
    	//         // Check if any selection satisfies the requirements
    	//         return allSelections.some(selection => {
    	//             let manaProfile = selection.reduce((profile, color) => {
    	//                 profile[color] = (profile[color] || 0) + 1;
    	//                 return profile;
    	//             }, {});
    	//             return Object.entries(requirements).every(([color, amount]) => manaProfile[color] >= amount);
    	//         });
    	//     }
    	// //BEFORE MASSIVE CHANGES ATTEMPT TO BATCH
    	// function getAllCombinations(lands, allowDuplicates, totalManaNeeded) {
    	//     // Reset the progress bar at the start of the simulation
    	//     combinationProgress.set(0);
    	//     const combinations = [];
    	//     const landCounts = lands.reduce((counts, land) => {
    	//         const key = JSON.stringify(land);
    	//         counts[key] = (counts[key] || 0) + 1;
    	//         return counts;
    	//     }, {});
    	//     const totalLands = lands.length; // Total number of lands for progress calculation
    	//     const estimatedTotalCombinations = binomialCoefficient(totalLands, totalManaNeeded); // Estimate total combinations
    	//     console.log(`Estimated Total Combinations: ${estimatedTotalCombinations}`);
    	//     let currentIteration = 0; // Track the current iteration
    	//     const generateCombinations = (index, currentCombination, currentCounts) => {
    	//       //  console.log(`Index: ${index}, Current Combination: ${JSON.stringify(currentCombination)}, Current Counts: ${JSON.stringify(currentCounts)}`);
    	//         if (currentCombination.length > totalManaNeeded) return;
    	//         if (index === lands.length) {
    	//             const combinationKey = JSON.stringify(currentCombination.map(land => JSON.stringify(land)).sort());
    	//             combinations.push(combinationKey);
    	//         //  console.log(`Added Combination: ${combinationKey}`);
    	//         currentIteration++;
    	//         return;
    	//         }
    	//         // Update progress based on the current iteration and estimated total combinations
    	//         const progress = (currentIteration / estimatedTotalCombinations) * 100;
    	//         combinationProgress.set(progress);
    	//       //  console.log(`Progress: ${progress}%`);
    	//         generateCombinations(index + 1, currentCombination, currentCounts);
    	//         const land = lands[index];
    	//         const landKey = JSON.stringify(land);
    	//         if (!currentCounts[landKey] || currentCounts[landKey] < landCounts[landKey]) {
    	//             const newCounts = { ...currentCounts, [landKey]: (currentCounts[landKey] || 0) + 1 };
    	//             generateCombinations(index + 1, [...currentCombination, land], newCounts);
    	//         }
    	//     };
    	//     generateCombinations(0, [], {});
    	//     const finalCombinations = Array.from(new Set(combinations)).map(key => JSON.parse(key).map(landStr => JSON.parse(landStr)));
    	//     console.log(`Total Combinations Generated: ${combinations.length}`);
    	//     console.log(`Final Combinations: ${JSON.stringify(finalCombinations)}`);
    	//     return finalCombinations;
    	// }
    	//------------------------------------------------------------------------------------
    	//the following is updated more efficient combination code. some day maybe try changing this to a bipartite matching approach.
    	//still undergoing full testing to verify accuracy. Replaced the recursive combination generation with a dynamic programming approach.This approach uses a 2D array (dp) where dp[i] contains sets of combinations of size i. For each land, it iterates backward through dp to update possible combinations efficiently
    	function determineNeededCombinations(lands, requirements, totalManaNeeded) {
    		return new Promise(resolve => {
    				// Filter out ramp spells from lands
    				const filteredLands = lands.filter(land => !land.ColorsCanProduce);

    				let combinedLands = [...filteredLands, ...$simplifiedRampMana];
    				console.log('Combined Lands:', combinedLands); // Log the combined lands
    				getAllCombinations(combinedLands, totalManaNeeded, resolve);
    			}).then(combinations => {
    			return combinations.filter(combination => satisfiesRequirements(combination, requirements));
    		});
    	}

    	function getAllCombinations(lands, totalManaNeeded, resolve) {
    		const dp = Array(totalManaNeeded + 1).fill(null).map(() => new Set());
    		dp[0].add("[]");
    		const estimatedTotalCombinations = binomialCoefficient(lands.length, totalManaNeeded);
    		let processedCombinations = 0;

    		const stack = [
    			{
    				index: 0,
    				currentCombination: [],
    				currentCounts: new Map()
    			}
    		];

    		const iterationsPerFrame = 500000; // Adjust this size based on performance needs

    		function processChunk() {
    			let iterations = 0;

    			while (stack.length > 0 && iterations < iterationsPerFrame) {
    				if ($cancelSimulation) {
    					// Check if the simulation is canceled
    					console.log("Simulation canceled");

    					resolve([]); // Resolve with an empty array or appropriate value
    					return;
    				}

    				const { index, currentCombination, currentCounts } = stack.pop();

    				if (currentCombination.length >= totalManaNeeded) {
    					if (currentCombination.length === totalManaNeeded) {
    						const sortedCombination = currentCombination.map(land => land).sort((a, b) => JSON.stringify(a).localeCompare(JSON.stringify(b)));
    						dp[totalManaNeeded].add(JSON.stringify(sortedCombination));
    						processedCombinations++;
    					}

    					continue;
    				}

    				if (index < lands.length) {
    					stack.push({
    						index: index + 1,
    						currentCombination,
    						currentCounts
    					});

    					const land = lands[index];
    					const landKey = JSON.stringify(land);
    					const count = currentCounts.get(landKey) || 0;
    					const newCounts = new Map(currentCounts);
    					newCounts.set(landKey, count + 1);

    					stack.push({
    						index: index + 1,
    						currentCombination: currentCombination.concat(land),
    						currentCounts: newCounts
    					});
    				}

    				iterations++;
    			}

    			const progress = processedCombinations / estimatedTotalCombinations * 100;
    			combinationProgress.set(progress);
    			console.log(`Progress: ${progress}%`);

    			if (stack.length > 0) {
    				requestAnimationFrame(processChunk); // Yield control back to the UI
    			} else {
    				const finalCombinations = Array.from(dp[totalManaNeeded]).map(key => JSON.parse(key));
    				console.log(`Total Combinations Generated: ${finalCombinations.length}`);
    				console.log(`Final Combinations: ${JSON.stringify(finalCombinations)}`);
    				resolve(finalCombinations);
    			}
    		}

    		processChunk();
    	}

    	// function transformCombinationForLinkedGroups(combination, landGroupSizes) {
    	//     return combination.map(landCount => {
    	//         const landKey = JSON.stringify(landCount.land);
    	//         const groupSize = landGroupSizes.find(group => JSON.stringify(group.land) === landKey).count;
    	//         return {
    	//             size: groupSize,
    	//             cardsToDraw: landCount.count
    	//         };
    	//     });
    	// }
    	//ORIGINAL MONTE CARLO SIM BEFORE RAMP Attempts
    	// function monteCarloSimulation(preparedCombinations, landGroupSizes, deckSize, mulliganCount, initialDrawSize, numberOfTurns, numIterations) {
    	//     return new Promise((resolve, reject) => {
    	//         const probabilitiesByTurn = Array.from({ length: numberOfTurns.length + 1 }, () => 0); // Updated to use numberOfTurns.length
    	//         const totalLands = landGroupSizes.reduce((sum, land) => sum + land.count, 0);
    	//         const numDummyCards = Math.max(deckSize - totalLands, 0);
    	//         const completeDeck = landGroupSizes.flatMap(land => Array(land.count).fill(land.land)).concat(Array(numDummyCards).fill({ dummy: 1 }));
    	//         let iteration = 0;
    	//         // Calculate the total mana needed to determine the batch size. this
    	//         // improves performance 
    	//         const totalManaNeeded = Object.values(manaRequirements).reduce((sum, amount) => sum + amount, 0);
    	//         let batchSize;
    	//         if (totalManaNeeded <= 2) {
    	//             batchSize = 50;
    	//         } else if (totalManaNeeded === 3) {
    	//             batchSize = 30;
    	//         } else if (totalManaNeeded === 4) {
    	//             batchSize = 20;
    	//         } else if (totalManaNeeded === 5) {
    	//             batchSize = 20;
    	//         } else {
    	//             batchSize = 20;
    	//         }
    	//         function runIteration() {
    	//             if ($cancelSimulation) {
    	//                 reject(new Error("Simulation canceled by user"));
    	//                 return;
    	//             }
    	//             let batchCounter = 0;
    	//             while (batchCounter < batchSize && iteration < numIterations) {
    	//                 let hand = [];
    	//                 let remainingDeck = _.cloneDeep(completeDeck); // Reset the deck for each iteration
    	//                 let metRequirementTurn = -1; // Track when requirements are met
    	//                 // Handle mulligans for turn 0
    	//                 for (let mulligan = 0; mulligan <= mulliganCount; mulligan++) {
    	//                     hand = _.sampleSize(remainingDeck, initialDrawSize);
    	//                     remainingDeck = removeDrawnCardsFromDeck(remainingDeck, hand);
    	//                     if (handMeetsRequirements(hand, preparedCombinations)) {
    	//                         probabilitiesByTurn[0]++;
    	//                         metRequirementTurn = 0;
    	//                         break;
    	//                     }
    	//                 }
    	//                 // Simulate drawing for subsequent turns if requirements not met in mulligans
    	//                 if (metRequirementTurn == -1) {
    	//                     for (let turn = 1; turn <= numberOfTurns.length; turn++) { // Updated to use numberOfTurns.length
    	//                         const cardsToDraw = numberOfTurns[turn - 1]; // Use the number of cards drawn for each turn
    	//                         const newCards = _.sampleSize(remainingDeck, cardsToDraw); // Draw multiple cards based on numberOfTurns
    	//                         hand.push(...newCards);
    	//                         remainingDeck = removeDrawnCardsFromDeck(remainingDeck, newCards);
    	//                         if (handMeetsRequirements(hand, preparedCombinations)) {
    	//                             probabilitiesByTurn[turn]++;
    	//                             metRequirementTurn = turn;
    	//                             break; // Stop further drawings for this iteration
    	//                         }
    	//                     }
    	//                 }
    	//                 // Mark all subsequent turns as meeting requirements once the requirement is met
    	//                 if (metRequirementTurn != -1) {
    	//                     for (let turn = metRequirementTurn + 1; turn <= numberOfTurns.length; turn++) { // Updated to use numberOfTurns.length
    	//                         probabilitiesByTurn[turn]++;
    	//                     }
    	//                 }
    	//                 iteration++;
    	//                 batchCounter++;
    	//             }
    	//             // Update the progress of the simulation
    	//             simulationProgress.set((iteration / numIterations) * 100);
    	//             if (iteration < numIterations) {
    	//                 setTimeout(runIteration, 0); // Schedule the next batch
    	//             } else {
    	//                 // Set Monte Carlo results in the dedicated store right before resolving the promise
    	//                 monteCarloResults.set(probabilitiesByTurn.map(prob => (prob / numIterations * 100).toFixed(1)));
    	//                 resolve(probabilitiesByTurn.map(prob => (prob / numIterations * 100).toFixed(1)));
    	//             }
    	//         }
    	//         runIteration(); // Start the first iteration
    	//     });
    	// }
    	//---------------------------------------------------------------------
    	// ORIGINAL HAND MEETS REQUIREMENTS - CHECKING HAND NOT AvailableManaThisTurn
    	// function handMeetsRequirements(hand, preparedCombinations) {
    	//      //   console.log('Checking hand against requirements:', hand);
    	//      //   console.log('Prepared combinations:', preparedCombinations);
    	//         return preparedCombinations.some(combination => {
    	//             const landCounts = combination.reduce((counts, land) => {
    	//                 counts[JSON.stringify(land.land)] = land.count;
    	//                 return counts;
    	//             }, {});
    	//             const handProfile = hand.reduce((profile, land) => {
    	//                 const key = JSON.stringify(land);
    	//                 profile[key] = (profile[key] || 0) + 1;
    	//                 return profile;
    	//             }, {});
    	//            // console.log(`Checking hand against requirements:`, handProfile, landCounts);
    	//             const meetsRequirements = Object.entries(landCounts).every(([land, count]) => {
    	//                 return handProfile[land] >= count;
    	//             });
    	//             if (meetsRequirements) {
    	//               //  console.log(`Hand meets the combination requirements:`, combination);
    	//             } else {
    	//               //  console.log(`Hand does not meet the combination requirements:`, combination);
    	//             }
    	//             return meetsRequirements;
    	//         });
    	//     }
    	function monteCarloSimulation(
    		preparedCombinations,
    	landGroupSizes,
    	deckSize,
    	mulliganConfig,
    	initialDrawSize,
    	numberOfTurns,
    	numIterations,
    	neededCombinations
    	) {
    		return new Promise((resolve, reject) => {
    				console.log('mulliganConfig:', _.cloneDeep(mulliganConfig)); // Log mulliganConfig to verify it's passed correctly
    				const probabilitiesByTurn = Array.from({ length: numberOfTurns.length + 1 }, () => 0); // Updated to use numberOfTurns.length
    				const totalLands = landGroupSizes.reduce((sum, land) => sum + land.count, 0);
    				const numDummyCards = Math.max(deckSize - totalLands, 0);
    				const completeDeck = landGroupSizes.flatMap(land => Array(land.count).fill(land.land)).concat(Array(numDummyCards).fill({ dummy: 1 }));
    				let iteration = 0;

    				// Calculate the total mana needed to determine the batch size. this
    				// improves performance 
    				const totalManaNeeded = Object.values(manaRequirements).reduce((sum, amount) => sum + amount, 0);

    				let batchSize;

    				if (totalManaNeeded <= 2) {
    					batchSize = 20;
    				} else if (totalManaNeeded === 3) {
    					batchSize = 10;
    				} else {
    					batchSize = 10;
    				}

    				function runIteration() {
    					// Reset totalAvailableMana and totalAvailableRamp for each iteration
    					let totalAvailableMana = [];

    					let totalAvailableRamp = [];
    					let hand = _.sampleSize(completeDeck, initialDrawSize);
    					let remainingDeck = removeDrawnCardsFromDeck(completeDeck, hand);

    					// Perform mulligans
    					const { finalHand, remainingDeck: updatedDeck } = londonMulligan(hand, remainingDeck);

    					hand = finalHand;
    					remainingDeck = updatedDeck;

    					// Reset and update available mana
    					let { AvailableManaThisTurn, meetsRequirements } = resetAndUpdateAvailableMana(totalAvailableMana, totalAvailableRamp, 0, neededCombinations);

    					// Check 1: If requirements are met, update probabilities and continue
    					if (meetsRequirements) {
    						probabilitiesByTurn[0]++;

    						for (let turn = 1; turn <= numberOfTurns.length; turn++) {
    							probabilitiesByTurn[turn]++;
    						}
    					} else {
    						for (let turn = 1; turn <= numberOfTurns.length; turn++) {
    							// Updated to use numberOfTurns.length
    							const cardsToDraw = numberOfTurns[turn - 1]; // Use the number of cards drawn for each turn

    							const newCards = _.sampleSize(remainingDeck, cardsToDraw); // Draw multiple cards based on numberOfTurns
    							hand.push(...newCards);
    							remainingDeck = removeDrawnCardsFromDeck(remainingDeck, newCards);

    							// Log the card drawn and the hand after drawing
    							console.log(`Turn ${turn} - Draw ${cardsToDraw}`);

    							console.log('Card(s) Drawn:', _.cloneDeep(newCards));
    							console.log('Hand after drawing:', _.cloneDeep(hand));

    							// Play lands based on the new rules
    							playLands(hand, totalAvailableMana);

    							// Log after moving land to mana
    							console.log('After moving land to mana:');

    							console.log('Total played Mana:', _.cloneDeep(totalAvailableMana));
    							console.log('Hand:', _.cloneDeep(hand));

    							// Reset and update AvailableManaThisTurn
    							({ AvailableManaThisTurn, meetsRequirements } = resetAndUpdateAvailableMana(totalAvailableMana, totalAvailableRamp, turn, neededCombinations));

    							// Log the updated AvailableManaThisTurn
    							console.log('AvailableManaThisTurn:', _.cloneDeep(AvailableManaThisTurn));

    							// Play ramp cards if possible
    							playRampCards(hand, AvailableManaThisTurn, totalAvailableRamp, turn);

    							// Log after playing ramp cards
    							console.log('After playing ramp cards:');

    							console.log('Total played Ramp:', _.cloneDeep(totalAvailableRamp));
    							console.log('AvailableManaThisTurn:', _.cloneDeep(AvailableManaThisTurn));
    							console.log('Hand:', _.cloneDeep(hand));

    							// Check 2: Compare AvailableManaThisTurn against neededCombinations after all ramp is played
    							if (meetsRequirements) {
    								for (let t = turn; t <= numberOfTurns.length; t++) {
    									probabilitiesByTurn[t]++;
    								}

    								break; // Stop further drawings for this iteration
    							}
    						}
    					}

    					iteration++;
    				}

    				async function runBatch() {
    					let batchCounter = 0;

    					while (batchCounter < batchSize && iteration < numIterations) {
    						if ($cancelSimulation) {
    							reject(new Error("Simulation canceled by user"));
    							return;
    						}

    						await runIteration();
    						batchCounter++;
    					}

    					// Update the progress of the simulation
    					simulationProgress.set(iteration / numIterations * 100);

    					if (iteration < numIterations) {
    						setTimeout(runBatch, 0); // Schedule the next batch
    					} else {
    						// Set Monte Carlo results in the dedicated store right before resolving the promise
    						monteCarloResults.set(probabilitiesByTurn.map(prob => (prob / numIterations * 100).toFixed(1)));

    						console.log('Probabilities by Turn:', probabilitiesByTurn.map(prob => (prob / numIterations * 100).toFixed(1)));

    						resolve({
    							probabilitiesByTurn: probabilitiesByTurn.map(prob => (prob / numIterations * 100).toFixed(1))
    						});
    					}
    				}

    				runBatch();
    			});
    	}

    	function monteCarloSimulationHand(
    		preparedCombinations,
    	landGroupSizes,
    	deckSize,
    	mulliganConfig,
    	initialDrawSize,
    	numberOfTurns,
    	numIterations
    	) {
    		return new Promise((resolve, reject) => {
    				const probabilitiesByTurnHand = Array.from({ length: numberOfTurns.length + 1 }, () => 0); // Track success based on hand
    				const totalLands = landGroupSizes.reduce((sum, land) => sum + land.count, 0);
    				const numDummyCards = Math.max(deckSize - totalLands, 0);
    				const completeDeck = landGroupSizes.flatMap(land => Array(land.count).fill(land.land)).concat(Array(numDummyCards).fill({ dummy: 1 }));
    				let iteration = 0;

    				// Calculate the total mana needed to determine the batch size. this
    				// improves performance 
    				const totalManaNeeded = Object.values(manaRequirements).reduce((sum, amount) => sum + amount, 0);

    				let batchSize;

    				if (totalManaNeeded <= 2) {
    					batchSize = 50;
    				} else if (totalManaNeeded === 3) {
    					batchSize = 30;
    				} else {
    					batchSize = 20;
    				}

    				function runIteration() {
    					let hand = _.sampleSize(completeDeck, initialDrawSize);
    					let remainingDeck = removeDrawnCardsFromDeck(completeDeck, hand);

    					// Perform mulligans
    					const { finalHand, remainingDeck: updatedDeck } = londonMulligan(hand, remainingDeck);

    					hand = finalHand;
    					remainingDeck = updatedDeck;

    					// Check if the hand meets the requirements after mulligans
    					let meetsRequirements = handMeetsRequirements(hand, preparedCombinations);

    					if (meetsRequirements) {
    						for (let turn = 0; turn <= numberOfTurns.length; turn++) {
    							probabilitiesByTurnHand[turn]++;
    						}
    					} else {
    						for (let turn = 1; turn <= numberOfTurns.length; turn++) {
    							const cardsToDraw = numberOfTurns[turn - 1];
    							const newCards = _.sampleSize(remainingDeck, cardsToDraw);
    							hand.push(...newCards);
    							remainingDeck = removeDrawnCardsFromDeck(remainingDeck, newCards);

    							// Log the card drawn and the hand after drawing
    							console.log(`Turn ${turn} - Draw ${cardsToDraw}`);

    							console.log('Card(s) Drawn:', _.cloneDeep(newCards));
    							console.log('Hand after drawing:', _.cloneDeep(hand));

    							if (handMeetsRequirements(hand, preparedCombinations)) {
    								for (let t = turn; t <= numberOfTurns.length; t++) {
    									probabilitiesByTurnHand[t]++;
    								}

    								console.log(`Turn ${turn} - Parallel hand meets requirements`);
    								break; // Stop further drawings for this iteration
    							}
    						}
    					}

    					iteration++;
    				}

    				function runBatch() {
    					let batchCounter = 0;

    					while (batchCounter < batchSize && iteration < numIterations) {
    						if ($cancelSimulation) {
    							reject(new Error("Simulation canceled by user"));
    							return;
    						}

    						runIteration();
    						batchCounter++;
    					}

    					// Update the progress of the simulation
    					simulationProgress.set(iteration / numIterations * 100);

    					if (iteration < numIterations) {
    						setTimeout(runBatch, 0); // Schedule the next batch
    					} else {
    						// Set Monte Carlo hand results in the dedicated store right before resolving the promise
    						monteCarloHandResults.set(probabilitiesByTurnHand.map(prob => (prob / numIterations * 100).toFixed(1)));

    						console.log('Probabilities by Turn (Hand):', probabilitiesByTurnHand.map(prob => (prob / numIterations * 100).toFixed(1)));

    						resolve({
    							probabilitiesByTurnHand: probabilitiesByTurnHand.map(prob => (prob / numIterations * 100).toFixed(1))
    						});
    					}
    				}

    				runBatch();
    			});
    	}

    	//MonTE CARLO SIM BEFORE HAND AND FIELD MERGE ATTEMPT-------------------------------
    	// function monteCarloSimulation(preparedCombinations, landGroupSizes, deckSize, mulliganConfig, initialDrawSize, numberOfTurns, numIterations, neededCombinations) {
    	//     return new Promise((resolve, reject) => {
    	//         console.log('mulliganConfig:', _.cloneDeep(mulliganConfig)); // Log mulliganConfig to verify it's passed correctly
    	//         const probabilitiesByTurn = Array.from({ length: numberOfTurns.length + 1 }, () => 0); // Updated to use numberOfTurns.length
    	//         const totalLands = landGroupSizes.reduce((sum, land) => sum + land.count, 0);
    	//         const numDummyCards = Math.max(deckSize - totalLands, 0);
    	//         const completeDeck = landGroupSizes.flatMap(land => Array(land.count).fill(land.land)).concat(Array(numDummyCards).fill({ dummy: 1 }));
    	//         let iteration = 0;
    	//         let totalAvailableMana = [];
    	//         let totalAvailableRamp = [];
    	//         // Calculate the total mana needed to determine the batch size. this
    	//         // improves performance 
    	//         const totalManaNeeded = Object.values(manaRequirements).reduce((sum, amount) => sum + amount, 0);
    	//         let batchSize;
    	//         if (totalManaNeeded <= 2) {
    	//             batchSize = 50;
    	//         } else if (totalManaNeeded === 3) {
    	//             batchSize = 30;
    	//         } else {
    	//             batchSize = 20;
    	//         }
    	//         function runIteration() {
    	//             // Reset totalAvailableMana and totalAvailableRamp for each iteration
    	//             let totalAvailableMana = [];
    	//             let totalAvailableRamp = [];
    	//             let hand = _.sampleSize(completeDeck, initialDrawSize);
    	//             let remainingDeck = removeDrawnCardsFromDeck(completeDeck, hand);
    	//             // Perform mulligans
    	//             const { finalHand, remainingDeck: updatedDeck } = londonMulligan(hand, remainingDeck);
    	//             hand = finalHand;
    	//             remainingDeck = updatedDeck;
    	//             // Reset and update available mana
    	//             let { AvailableManaThisTurn, meetsRequirements } = resetAndUpdateAvailableMana(totalAvailableMana, totalAvailableRamp, 0, neededCombinations);
    	//             // Check 1: If requirements are met, update probabilities and continue
    	//             if (meetsRequirements) {
    	//                 probabilitiesByTurn[0]++;
    	//                 for (let turn = 1; turn <= numberOfTurns.length; turn++) {
    	//                     probabilitiesByTurn[turn]++;
    	//                 }
    	//             } else {
    	//                 for (let turn = 1; turn <= numberOfTurns.length; turn++) { // Updated to use numberOfTurns.length
    	//                     const cardsToDraw = numberOfTurns[turn - 1]; // Use the number of cards drawn for each turn
    	//                     const newCards = _.sampleSize(remainingDeck, cardsToDraw); // Draw multiple cards based on numberOfTurns
    	//                     hand.push(...newCards);
    	//                     remainingDeck = removeDrawnCardsFromDeck(remainingDeck, newCards);
    	//                     // Log the card drawn and the hand after drawing
    	//                     console.log(`Turn ${turn} - Draw ${cardsToDraw}`);
    	//                     console.log('Card(s) Drawn:', _.cloneDeep(newCards));
    	//                     console.log('Hand after drawing:', _.cloneDeep(hand));
    	//                     // Play lands based on the new rules
    	//                     playLands(hand, totalAvailableMana);
    	//                     // Log after moving land to mana
    	//                     console.log('After moving land to mana:');
    	//                     console.log('Total played Mana:', _.cloneDeep(totalAvailableMana));
    	//                     console.log('Hand:', _.cloneDeep(hand));
    	//                     // Reset and update AvailableManaThisTurn
    	//                     ({ AvailableManaThisTurn, meetsRequirements } = resetAndUpdateAvailableMana(totalAvailableMana, totalAvailableRamp, turn, neededCombinations));
    	//                     // Log the updated AvailableManaThisTurn
    	//                     console.log('AvailableManaThisTurn:', _.cloneDeep(AvailableManaThisTurn));
    	//                     // Play ramp cards if possible
    	//                     playRampCards(hand, AvailableManaThisTurn, totalAvailableRamp, turn);
    	//                     // Log after playing ramp cards
    	//                     console.log('After playing ramp cards:');
    	//                     console.log('Total played Ramp:', _.cloneDeep(totalAvailableRamp));
    	//                     console.log('AvailableManaThisTurn:', _.cloneDeep(AvailableManaThisTurn));
    	//                     console.log('Hand:', _.cloneDeep(hand));
    	//                     // Check 2: Compare AvailableManaThisTurn against neededCombinations after all ramp is played
    	//                     if (meetsRequirements) {
    	//                         for (let t = turn; t <= numberOfTurns.length; t++) {
    	//                             probabilitiesByTurn[t]++;
    	//                         }
    	//                         break; // Stop further drawings for this iteration
    	//                     }
    	//                 }
    	//             }
    	//             iteration++;
    	//         }
    	//         function runBatch() {
    	//     let batchCounter = 0;
    	//     while (batchCounter < batchSize && iteration < numIterations) {
    	//         if ($cancelSimulation) {
    	//             reject(new Error("Simulation canceled by user"));
    	//             return;
    	//         }
    	//         runIteration();
    	//         batchCounter++;
    	//     }
    	//             // Update the progress of the simulation
    	//             simulationProgress.set((iteration / numIterations) * 100);
    	//             if (iteration < numIterations) {
    	//                 setTimeout(runBatch, 0); // Schedule the next batch
    	//             } else {
    	//                 // Set Monte Carlo results in the dedicated store right before resolving the promise
    	//                 monteCarloResults.set(probabilitiesByTurn.map(prob => (prob / numIterations * 100).toFixed(1)));
    	//                 resolve(probabilitiesByTurn.map(prob => (prob / numIterations * 100).toFixed(1)));
    	//             }
    	//         }
    	//         runBatch(); // Start the first batch
    	//     });
    	// }
    	//---------------------------------------------------
    	//DEAD END THIS VERSION TRIED TO DO THE COMBINATION CALC DIRECTLY
    	// function manaPoolMeetsRequirements(availableMana) {
    	//     const manaRequirements = $simulationData.manaRequirements;
    	//     console.log('manaPoolMeetsRequirements AvailableManaThisTurn:', _.cloneDeep(availableMana));
    	//     console.log('manaPoolMeetsRequirements manaRequirements:', _.cloneDeep(manaRequirements));
    	//     // Convert manaRequirements into an array of single color requirements
    	//     const requirementArray = Object.entries(manaRequirements).map(([color, count]) => {
    	//         const reqs = [];
    	//         for (let i = 0; i < count; i++) {
    	//             reqs.push({ [color]: 1 });
    	//         }
    	//         return reqs;
    	//     }).flat();
    	//     // Helper function to generate all combinations of a specific length
    	//     function generateCombinations(arr, length) {
    	//         const result = [];
    	//         const combination = [];
    	//         function helper(start) {
    	//             if (combination.length === length) {
    	//                 result.push(combination.slice());
    	//                 return;
    	//             }
    	//             for (let i = start; i < arr.length; i++) {
    	//                 combination.push(arr[i]);
    	//                 helper(i + 1);
    	//                 combination.pop();
    	//             }
    	//         }
    	//         helper(0);
    	//         return result;
    	//     }
    	//     // Check if a given combination can meet the mana requirements
    	//     function meetsRequirements(combination, requirements) {
    	//         console.log('Checking combination:', combination);
    	//         const usedSources = new Set();
    	//         const requirementList = requirements.slice();
    	//         for (const requirement of requirementList) {
    	//             const [color] = Object.keys(requirement);
    	//             let found = false;
    	//             for (let i = 0; i < combination.length; i++) {
    	//                 if (!usedSources.has(i)) {
    	//                     const source = combination[i];
    	//                     if (source[color] > 0) {
    	//                         usedSources.add(i);
    	//                         source[color]--;
    	//                         found = true;
    	//                         console.log(`Requirement for ${color} met by source ${i}`, source);
    	//                         break;
    	//                     }
    	//                 }
    	//             }
    	//             if (!found) {
    	//                 console.log(`Requirement for ${color} not met`);
    	//                 return false;
    	//             }
    	//         }
    	//         return true;
    	//     }
    	//     // Generate all combinations of available mana sources with length equal to the number of different mana requirements
    	//     const combinations = generateCombinations(availableMana, requirementArray.length);
    	//     // Check each combination to see if it meets the mana requirements
    	//     for (const combination of combinations) {
    	//         if (meetsRequirements(_.cloneDeep(combination), requirementArray)) {
    	//             console.log('manaRequirements met: yes');
    	//             return true;
    	//         }
    	//     }
    	//     console.log('manaRequirements met: no');
    	//     return false;
    	// }
    	//THIS VRESION WAS using the neededCombinations, not trying to calc directly
    	function manaPoolMeetsRequirements(availableMana, neededCombinations) {
    		console.log('AvailableManaThisTurn:', _.cloneDeep(availableMana));
    		console.log('neededCombinations:', _.cloneDeep(neededCombinations));

    		const result = neededCombinations.some(combination => {
    			// Create a copy of availableMana to track used mana
    			const availableManaCopy = _.cloneDeep(availableMana);

    			// console.log('Checking combination:', combination);
    			// Check if every needed mana object in the combination is matched by an available mana object
    			const combinationResult = combination.every(needed => {
    				const index = availableManaCopy.findIndex(mana => {
    					const match = Object.keys(needed).length === Object.keys(mana).length && Object.entries(needed).every(([color, count]) => {
    						return mana[color] === count;
    					});

    					// console.log(`Needed: ${JSON.stringify(needed)}, Mana: ${JSON.stringify(mana)}, Match: ${match}`);
    					return match;
    				});

    				if (index !== -1) {
    					// Remove the matched mana from the copy to prevent reuse
    					// console.log(`Matched and removing: ${JSON.stringify(availableManaCopy[index])}`);
    					availableManaCopy.splice(index, 1);

    					return true;
    				}

    				return false;
    			});

    			// console.log(`Combination result: ${combinationResult}`);
    			return combinationResult;
    		});

    		console.log(`neededCombinations met: ${result ? 'yes' : 'no'}`);
    		return result;
    	}

    	function londonMulligan(hand, remainingDeck) {
    		let mulligansTaken = 0;
    		let finalHand = hand;

    		// Destructure the mulliganConfig store
    		const { maxMulligans, firstMulliganFree, freeMulliganTillLands, minLandsInHand, maxLandsInHand, mulliganIfLandsRampCanOnlyMake, mustHavePlayableRamp } = $mulliganConfig;

    		// Initial draw
    		finalHand = _.sampleSize(remainingDeck, InitialDrawSize);

    		remainingDeck = removeDrawnCardsFromDeck(remainingDeck, finalHand);

    		// Log the initial hand and remaining deck
    		console.log(`Initial Draw: Hand`, _.cloneDeep(finalHand));

    		// console.log(`Initial Draw: Remaining Deck`, _.cloneDeep(remainingDeck));
    		// Define valid colors
    		const validColors = ['W', 'U', 'B', 'R', 'G'];

    		const validColorsWithAny = ['W', 'U', 'B', 'R', 'G', 'C', 'ANY'];

    		// Function to count the total number of colors the hand can produce
    		function countTotalColors(hand) {
    			const uniqueColors = new Set();

    			hand.forEach(card => {
    				if (card.ColorsCanProduce) {
    					Object.keys(card.ColorsCanProduce).forEach(color => {
    						if (card.ColorsCanProduce[color] > 0 && validColors.includes(color)) {
    							uniqueColors.add(color);
    						}
    					});
    				} else {
    					Object.keys(card).forEach(color => {
    						if (card[color] > 0 && validColors.includes(color)) {
    							uniqueColors.add(color);
    						}
    					});
    				}
    			});

    			return uniqueColors.size;
    		}

    		// Function to check if the hand has a playable ramp card
    		function hasPlayableRamp(hand) {
    			const lands = hand.filter(card => Object.keys(card).some(key => validColorsWithAny.includes(key)));
    			const rampCards = hand.filter(card => card.ColorsCanProduce && card.TotalManaCost);
    			console.log('Lands in hand:', lands);
    			console.log('Ramp cards in hand:', rampCards);

    			if (rampCards.length === 0) {
    				console.log('No ramp cards in hand.');
    				return false; // No ramp cards in hand
    			}

    			return rampCards.some(rampCard => {
    				const totalManaCost = Object.values(rampCard.TotalManaCost).reduce((sum, value) => sum + value, 0);

    				if (lands.length < totalManaCost) {
    					console.log(`Not enough lands to play ramp card: ${JSON.stringify(rampCard)}`);
    					return false; // Not enough lands to play the ramp card
    				}

    				// Check if the lands can produce the required colors
    				const requiredColors = Object.entries(rampCard.TotalManaCost).filter(([color, count]) => count > 0);

    				const availableColors = lands.reduce(
    					(acc, land) => {
    						Object.keys(land).forEach(color => {
    							if (land[color] > 0 && validColorsWithAny.includes(color)) {
    								// Include 'ANY' here
    								acc[color] = (acc[color] || 0) + land[color];
    							}
    						});

    						return acc;
    					},
    					{}
    				);

    				const canPlayRamp = requiredColors.every(([color, count]) => (availableColors[color] || 0) >= count);
    				console.log(`Can play ramp card ${JSON.stringify(rampCard)}: ${canPlayRamp}`);
    				return canPlayRamp;
    			});
    		}

    		// Adjust the loop condition to ignore maxMulligans when freeMulliganTillLands is true
    		while (freeMulliganTillLands || mulligansTaken <= maxMulligans) {
    			// Check if the hand meets the land requirements
    			const landCount = finalHand.filter(card => Object.keys(card).some(key => validColorsWithAny.includes(key))).length;

    			const meetsLandRequirements = landCount >= minLandsInHand && landCount <= maxLandsInHand;

    			// Log the land count and whether the hand meets the land requirements
    			console.log(`Mulligan ${mulligansTaken}: Land Count`, landCount);

    			console.log(`Mulligan ${mulligansTaken}: Meets Land Requirements`, meetsLandRequirements);

    			// Check if the hand meets the color requirements
    			const totalColors = countTotalColors(finalHand);

    			const meetsColorRequirements = !mulliganIfLandsRampCanOnlyMake || totalColors >= mulliganIfLandsRampCanOnlyMake;

    			// Log the total colors and whether the hand meets the color requirements
    			console.log(`Mulligan ${mulligansTaken}: Total Colors`, totalColors);

    			console.log(`Mulligan ${mulligansTaken}: Meets Color Requirements`, meetsColorRequirements);

    			// Check if the hand has a playable ramp card
    			const meetsRampRequirements = !mustHavePlayableRamp || hasPlayableRamp(finalHand);

    			// Log whether the hand meets the ramp requirements
    			console.log(`Mulligan ${mulligansTaken}: Meets Ramp Requirements`, meetsRampRequirements);

    			if (meetsLandRequirements && meetsColorRequirements && meetsRampRequirements) {
    				break;
    			}

    			if (mulligansTaken > 0 || firstMulliganFree || freeMulliganTillLands && (!meetsLandRequirements || !meetsColorRequirements || !meetsRampRequirements)) {
    				// Shuffle hand into deck and redraw
    				remainingDeck = remainingDeck.concat(finalHand);

    				finalHand = _.sampleSize(remainingDeck, InitialDrawSize);
    				remainingDeck = removeDrawnCardsFromDeck(remainingDeck, finalHand);

    				// Log the new hand and remaining deck after redraw
    				console.log(`Mulligan ${mulligansTaken}: Redrawn Hand`, _.cloneDeep(finalHand));
    			} // console.log(`Mulligan ${mulligansTaken}: Remaining Deck`, _.cloneDeep(finalHand));

    			if (!(firstMulliganFree && mulligansTaken === 0) && !(freeMulliganTillLands && (!meetsLandRequirements || !meetsColorRequirements || !meetsRampRequirements))) {
    				// Place cards on the bottom of the deck for each mulligan taken
    				for (let i = 0; i < mulligansTaken; i++) {
    					const cardToBottom = prioritizeCardToBottom(finalHand);
    					remainingDeck.push(cardToBottom);

    					// Log the card placed on the bottom
    					console.log(`Mulligan ${mulligansTaken}: Card Placed on Bottom`, _.cloneDeep(cardToBottom));
    				}
    			}

    			mulligansTaken++;
    		}

    		// Log the final hand and remaining deck after mulligans
    		console.log('Final Hand after Mulligans', _.cloneDeep(finalHand));

    		// console.log('Remaining Deck after Mulligans', _.cloneDeep(finalHand));
    		return { finalHand, remainingDeck };
    	}

    	function playLands(hand, totalAvailableMana) {
    		// Filter out land cards (which do not have TotalManaCost and dummy, and have ANY attribute)
    		//this is shakey logic - custom cards could be named ANY or dummy
    		const landCards = hand.filter(card => !card.TotalManaCost && !card.dummy && card.ANY !== undefined);

    		// Calculate the total required mana for each color from all ramp cards in hand
    		const totalRequiredMana = {};

    		hand.filter(card => card.TotalManaCost).forEach(card => {
    			Object.keys(card.TotalManaCost).forEach(color => {
    				if (color !== 'ANY') {
    					totalRequiredMana[color] = (totalRequiredMana[color] || 0) + card.TotalManaCost[color];
    				}
    			});
    		});

    		// Calculate the total available mana for each color in totalAvailableMana
    		const totalAvailableManaCount = {};

    		totalAvailableMana.forEach(mana => {
    			Object.keys(mana).forEach(color => {
    				if (color !== 'ANY') {
    					totalAvailableManaCount[color] = (totalAvailableManaCount[color] || 0) + mana[color];
    				}
    			});
    		});

    		console.log('Total Required Mana:', totalRequiredMana);
    		console.log('Total Available Mana Count:', totalAvailableManaCount);

    		// Priority 1: Get the highest priority color for the lowest TotalManaCost ramp card in hand
    		const nonLandCards = hand.filter(card => card.TotalManaCost && Object.keys(card.TotalManaCost).some(color => card.TotalManaCost[color] > 0 && color !== 'ANY'));

    		nonLandCards.sort((a, b) => getTotalManaCost(a.TotalManaCost) - getTotalManaCost(b.TotalManaCost));
    		const highestPriorityCard = nonLandCards[0];
    		let highestPriorityColor = getHighestPriorityColor(highestPriorityCard);
    		console.log('Hand:', hand);
    		console.log('Total Available Mana:', totalAvailableMana);
    		console.log('Highest Priority Card:', highestPriorityCard);
    		console.log('Highest Priority Color:', highestPriorityColor);

    		if (highestPriorityColor !== null) {
    			// Check if the highest priority color is already in totalAvailableMana
    			const availableColors = new Set();

    			totalAvailableMana.forEach(mana => {
    				Object.keys(mana).forEach(color => {
    					if (mana[color] > 0 && color !== 'ANY') {
    						availableColors.add(color);
    					}
    				});
    			});

    			if (availableColors.has(highestPriorityColor)) {
    				// Find another color required by the highest priority card that is not in totalAvailableMana
    				const otherColors = Object.keys(highestPriorityCard.TotalManaCost).filter(color => highestPriorityCard.TotalManaCost[color] > 0 && color !== 'ANY' && !availableColors.has(color));

    				if (otherColors.length > 0) {
    					highestPriorityColor = otherColors[0];
    				}
    			}

    			// Find a land that can produce the highest priority color
    			for (let i = 0; i < landCards.length; i++) {
    				const card = landCards[i];

    				if (card[highestPriorityColor] > 0) {
    					// Move the land card from hand to totalAvailableMana
    					const landCard = hand.splice(hand.indexOf(card), 1)[0];

    					totalAvailableMana.push(landCard);

    					// Log the land card played and the updated mana
    					console.log('Land card played (priority 1):', landCard);

    					console.log('Total Available Mana after playing land (priority 1):', _.cloneDeep(totalAvailableMana));
    					return; // Exit after playing the land
    				}
    			}
    		}

    		// Priority 2: Play a land that can produce a color not currently in totalAvailableMana
    		const availableColors = new Set();

    		totalAvailableMana.forEach(mana => {
    			Object.keys(mana).forEach(color => {
    				if (mana[color] > 0 && color !== 'ANY') {
    					availableColors.add(color);
    				}
    			});
    		});

    		for (const color of colorPriority) {
    			if (!availableColors.has(color)) {
    				for (let i = 0; i < landCards.length; i++) {
    					const card = landCards[i];

    					if (card[color] > 0) {
    						// Move the land card from hand to totalAvailableMana
    						const landCard = hand.splice(hand.indexOf(card), 1)[0];

    						totalAvailableMana.push(landCard);

    						// Log the land card played and the updated mana
    						console.log(`Land card played (priority 2, new color ${color}):`, landCard);

    						console.log('Total Available Mana after playing land (priority 2):', _.cloneDeep(totalAvailableMana));
    						return; // Exit after playing the land
    					}
    				}
    			}
    		}

    		// Priority 3: Play a land that can produce the most colors
    		let maxColors = 0;

    		let bestLandCard = null;

    		for (let i = 0; i < landCards.length; i++) {
    			const card = landCards[i];
    			const colorCount = Object.keys(card).filter(color => card[color] > 0 && color !== 'ANY').length;

    			if (colorCount > maxColors) {
    				maxColors = colorCount;
    				bestLandCard = card;
    			}
    		}

    		if (bestLandCard) {
    			// Move the best land card from hand to totalAvailableMana
    			const landCard = hand.splice(hand.indexOf(bestLandCard), 1)[0];

    			totalAvailableMana.push(landCard);

    			// Log the land card played and the updated mana
    			console.log('Land card played (priority 3, most colors):', landCard);

    			console.log('Total Available Mana after playing land (priority 3):', _.cloneDeep(totalAvailableMana));
    			return; // Exit after playing the land
    		}

    		// Priority 4: Play a land in the colorPriority order
    		for (const color of colorPriority) {
    			for (let i = 0; i < landCards.length; i++) {
    				const card = landCards[i];

    				if (card[color] > 0) {
    					// Move the land card from hand to totalAvailableMana
    					const landCard = hand.splice(hand.indexOf(card), 1)[0];

    					totalAvailableMana.push(landCard);

    					// Log the land card played and the updated mana
    					console.log(`Land card played (priority 4, color ${color}):`, landCard);

    					console.log('Total Available Mana after playing land (priority 4):', _.cloneDeep(totalAvailableMana));
    					return; // Exit after playing the land
    				}
    			}
    		}
    	}

    	function getHighestPriorityColor(card) {
    		if (!card || !card.TotalManaCost) return null; // Return null if card or TotalManaCost is undefined or null
    		const colors = Object.keys(card.TotalManaCost).filter(color => card.TotalManaCost[color] > 0 && color !== 'ANY');
    		if (colors.length === 0) return null; // Return null if only "ANY" amounts are present
    		colors.sort((a, b) => getColorPriority(a) - getColorPriority(b));
    		console.log('Highest priority color for card:', card, 'is', colors[0] || null);
    		return colors[0] || null; // Return the highest priority color or null if no colors are found
    	}

    	const colorPriority = ['G', 'W', 'U', 'B', 'R'];

    	function getColorPriority(color) {
    		return colorPriority.indexOf(color);
    	}

    	function playRampCards(hand, AvailableManaThisTurn, totalAvailableRamp, currentTurn) {
    		let rampPlayed;

    		do {
    			rampPlayed = false;

    			// Sort hand based on priorities
    			hand.sort((a, b) => {
    				const aTotalCost = getTotalManaCost(a.TotalManaCost);
    				const bTotalCost = getTotalManaCost(b.TotalManaCost);

    				// Priority 1: Lowest TotalManaCost and AvailableTurnPlayed: 1
    				if (aTotalCost === bTotalCost) {
    					if (a.AvailableTurnPlayed === 1 && b.AvailableTurnPlayed !== 1) return -1;
    					if (a.AvailableTurnPlayed !== 1 && b.AvailableTurnPlayed === 1) return 1;
    				}

    				// Priority 2: Lowest TotalManaCost
    				if (aTotalCost !== bTotalCost) return aTotalCost - bTotalCost;

    				// Priority 3: AvailableTurnPlayed: 1
    				if (a.AvailableTurnPlayed === 1 && b.AvailableTurnPlayed !== 1) return -1;

    				if (a.AvailableTurnPlayed !== 1 && b.AvailableTurnPlayed === 1) return 1;

    				// Priority 4: Any other ramp
    				return aTotalCost - bTotalCost;
    			});

    			for (let i = 0; i < hand.length; i++) {
    				const card = hand[i];

    				if (card.CanProduce && canPlayRamp(card, AvailableManaThisTurn)) {
    					// Remove the ramp card from the hand
    					const rampCard = hand.splice(i, 1)[0];

    					rampCard.playedTurn = currentTurn; // Track the turn the ramp card was played
    					totalAvailableRamp.push(rampCard);

    					// Deduct the mana used to play the ramp card
    					deductMana(AvailableManaThisTurn, rampCard.TotalManaCost);

    					// Log the ramp card played and the updated mana
    					console.log('Ramp card played:', rampCard);

    					console.log('AvailableManaThisTurn after playing ramp:', _.cloneDeep(AvailableManaThisTurn));

    					// Add ramp card's mana production to AvailableManaThisTurn if AvailableTurnPlayed is 1
    					if (rampCard.AvailableTurnPlayed === 1) {
    						addRampManaToAvailable(rampCard, AvailableManaThisTurn);

    						// Log the updated AvailableManaThisTurn after adding ramp mana
    						console.log('AvailableManaThisTurn after adding ramp mana:', _.cloneDeep(AvailableManaThisTurn));
    					}

    					rampPlayed = true;
    					break; // Restart the loop to check for more ramp cards
    				}
    			}
    		} while (rampPlayed);
    	} //  Check 2: Compare AvailableManaThisTurn against preparedCombinations after all ramp is played
    	// NOTE THIS MIGHT be better above - check inbetween each ramp played vs after all played in a turn?

    	function canPlayRamp(card, AvailableManaThisTurn) {
    		const manaCost = card.TotalManaCost;
    		const manaCopy = _.cloneDeep(AvailableManaThisTurn);

    		for (const color in manaCost) {
    			if (manaCost[color] > 0) {
    				let required = manaCost[color];

    				for (let i = 0; i < manaCopy.length; i++) {
    					if (manaCopy[i][color] > 0) {
    						required -= manaCopy[i][color];

    						if (required <= 0) {
    							manaCopy.splice(i, 1); // Remove the entire mana entry
    							break;
    						}
    					}
    				}

    				if (required > 0) return false; // Not enough mana of this color
    			}
    		}

    		return true;
    	}

    	function resetAndUpdateAvailableMana(totalAvailableMana, totalAvailableRamp, currentTurn, neededCombinations) {
    		let AvailableManaThisTurn = [];
    		AvailableManaThisTurn.push(...totalAvailableMana);

    		// Add ramp mana to AvailableManaThisTurn based on AvailableTurnPlayed and the turn it was played
    		totalAvailableRamp.forEach(rampCard => {
    			if (rampCard.AvailableTurnPlayed === 1 || rampCard.AvailableTurnPlayed === 0 && currentTurn > rampCard.playedTurn) {
    				addRampManaToAvailable(rampCard, AvailableManaThisTurn);
    			}
    		});

    		console.log('AvailableManaThisTurn after update:', _.cloneDeep(AvailableManaThisTurn));

    		// Check 1: Compare AvailableManaThisTurn against neededCombinations
    		const meetsRequirements = manaPoolMeetsRequirements(AvailableManaThisTurn, neededCombinations);

    		return { AvailableManaThisTurn, meetsRequirements };
    	}

    	function removeDrawnCardsFromDeck(deck, drawnCards) {
    		let tempDeck = _.cloneDeep(deck);

    		drawnCards.forEach(card => {
    			let index = tempDeck.findIndex(deckCard => _.isEqual(deckCard, card));

    			if (index > -1) {
    				tempDeck.splice(index, 1); // Replace found card with dummy if it's not a dummy
    			}
    		});

    		return tempDeck;
    	}

    	//OLD HAND MEETS REQ - prolly delete, does not factor played cards etc anymore
    	// function handMeetsRequirements(hand, preparedCombinations) {
    	//  //   console.log('Checking hand against requirements:', hand);
    	//  //   console.log('Prepared combinations:', preparedCombinations);
    	//     return preparedCombinations.some(combination => {
    	//         const landCounts = combination.reduce((counts, land) => {
    	//             counts[JSON.stringify(land.land)] = land.count;
    	//             return counts;
    	//         }, {});
    	//         const handProfile = hand.reduce((profile, land) => {
    	//             const key = JSON.stringify(land);
    	//             profile[key] = (profile[key] || 0) + 1;
    	//             return profile;
    	//         }, {});
    	//        // console.log(`Checking hand against requirements:`, handProfile, landCounts);
    	//         const meetsRequirements = Object.entries(landCounts).every(([land, count]) => {
    	//             return handProfile[land] >= count;
    	//         });
    	//         if (meetsRequirements) {
    	//           //  console.log(`Hand meets the combination requirements:`, combination);
    	//         } else {
    	//           //  console.log(`Hand does not meet the combination requirements:`, combination);
    	//         }
    	//         return meetsRequirements;
    	//     });
    	// }
    	// Inside identifyProfiles function
    	async function identifyProfiles(numIterations) {
    		const totalManaNeeded = Object.values(manaRequirements).reduce((sum, amount) => sum + amount, 0);
    		const neededCombinations = await determineNeededCombinations(preparedCards, manaRequirements, totalManaNeeded); // Wait for the promise to resolve
    		neededCombinationsCount.set(neededCombinations.length); // Update the store with the count
    		const preparedCombinations = prepareCombinationsForAnalysis(neededCombinations);
    		const landGroupSizes = calculateLandGroupSizes(preparedCards);
    		console.log('Prepared combinations:', preparedCombinations); // Ensure this logs after the update
    		console.log('needed combinations:', preparedCombinations); // Ensure this logs after the update
    		let rawProbabilities;

    		if ($simulationType === 'hand') {
    			rawProbabilities = await monteCarloSimulationHand(preparedCombinations, landGroupSizes, deckSize, mulliganConfig, InitialDrawSize, $numberOfTurns, numIterations);
    		} else {
    			rawProbabilities = await monteCarloSimulation(preparedCombinations, landGroupSizes, deckSize, mulliganConfig, InitialDrawSize, $numberOfTurns, numIterations, neededCombinations);
    		}

    		probabilitiesByTurn.set(rawProbabilities); // Ensure you are using .set() correctly if it's a store
    		simulationRun.set(true); // Set simulation run flag to true
    		console.log('Simulation results:', $probabilitiesByTurn); // Ensure this logs after the update

    		// Call saveOutputDiagram after setting the simulation results. this ensures only trials
    		// are saved on simulation run, not hypergeometic changes too
    		tick().then(() => {
    			saveOutputDiagram();
    		});
    	}

    	// Initialize state
    	let preparedCards = [];

    	let manaRequirements = {};
    	let probabilitiesByTurn = writable([]);
    	validate_store(probabilitiesByTurn, 'probabilitiesByTurn');
    	component_subscribe($$self, probabilitiesByTurn, value => $$invalidate(7, $probabilitiesByTurn = value));

    	// let simulationRun = writable(false);
    	let currentTurn = writable(0); // Start from turn 0

    	async function runSimulation() {
    		simulationRun.set(true); // Enable the modal
    		cancelSimulation.set(false); // Ensure cancellation flag is reset before starting
    		neededCombinationsCount.set(null); // Set the count to a loading placeholder

    		// Use setTimeout to defer the simulation start until after the UI has updated
    		setTimeout(
    			async () => {
    				const numIterations = $simulationData.iterations || 8000;

    				try {
    					await identifyProfiles(numIterations);
    				} catch(error) {
    					console.error("Simulation was canceled or an error occurred:", error);
    				} finally {
    					simulationRun.set(false); // Disable the modal once complete
    					cancelSimulation.set(false); // Reset cancellation state
    					simulationProgress.set(0); // Reset progress to 0 after finishing the simulation
    				}
    			},
    			0
    		); // Timeout set to 0 to push to end of execution queue
    	}

    	function createGroupCards(
    		groups,
    	results,
    	probabilitiesByTurn,
    	turn,
    	simulationType = 'full',
    	excludeGroups = false
    	) {
    		let cards = [];
    		let linkedGroupData = {}; // To hold accumulated data for linked groups

    		// Calculate the effective draw size considering mulligans
    		const effectiveDrawSize = InitialDrawSize - mulliganCount + turn - 1;

    		// If Monte Carlo results are available, use them to calculate blanks
    		if (simulationType === 'full' && $monteCarloResults.length > 0 && $monteCarloResults[turn] !== undefined) {
    			let turnTotalProbability = parseFloat($monteCarloResults[turn]);

    			// Calculate the total number of cards required by manaRequirements
    			let totalManaCards = Object.values(manaRequirements).reduce((sum, amount) => sum + amount, 0) - 1; // Subtract one to account for the top card

    			let blanksToAdd = Math.max(effectiveDrawSize - totalManaCards, 0);

    			cards.push({
    				probability: turnTotalProbability,
    				label: 'Field Simulation',
    				color: '#fff', // A distinct color for Monte Carlo results
    				ratioText: convertPercentToRatio(turnTotalProbability),
    				stackedCards: totalManaCards,
    				isBlank: Array(totalManaCards).fill(false).concat(Array(blanksToAdd).fill(true)), // Include actual and blank cards
    				source: 'monteCarloResults', // Add source property
    				
    			});
    		} else if (simulationType === 'hand' && $monteCarloHandResults.length > 0 && $monteCarloHandResults[turn] !== undefined) {
    			let turnTotalProbability = parseFloat($monteCarloHandResults[turn]);

    			// Calculate the total number of cards required by manaRequirements
    			let totalManaCards = Object.values(manaRequirements).reduce((sum, amount) => sum + amount, 0) - 1; // Subtract one to account for the top card

    			let blanksToAdd = Math.max(effectiveDrawSize - totalManaCards, 0);

    			cards.push({
    				probability: turnTotalProbability,
    				label: 'Hand Simulation',
    				color: '#fff', // A distinct color for Hand Simulation results
    				ratioText: convertPercentToRatio(turnTotalProbability),
    				stackedCards: totalManaCards,
    				isBlank: Array(totalManaCards).fill(false).concat(Array(blanksToAdd).fill(true)), // Include actual and blank cards
    				source: 'monteCarloHandResults', // Add source property
    				
    			});
    		}

    		// Process all groups if not excluded
    		if (!excludeGroups) {
    			groups.forEach(group => {
    				let groupName = group.link ? group.link : group.name;
    				let groupResult = results[groupName];

    				let probabilityPercent = groupResult && turn < groupResult.length
    				? Math.round(groupResult[turn].probability * 1000) / 10
    				: null;

    				let color = $groupColors[groupName] || '#e5e5e5';

    				if (group.link) {
    					if (!linkedGroupData[group.link]) {
    						linkedGroupData[group.link] = {
    							totalCardsToDraw: 0,
    							probability: probabilityPercent,
    							label: group.link,
    							color,
    							ratioText: convertPercentToRatio(probabilityPercent)
    						};
    					}

    					// Accumulate total cards to draw for linked groups
    					linkedGroupData[group.link].totalCardsToDraw += group.cardsToDraw;
    				} else {
    					// For individual groups, subtract one to account for the top card
    					let actualCardsToDraw = Math.max(group.cardsToDraw - 1, 0);

    					let blanksToAdd = Math.max(effectiveDrawSize - actualCardsToDraw, 0);

    					cards.push({
    						probability: probabilityPercent,
    						label: group.name,
    						color,
    						ratioText: convertPercentToRatio(probabilityPercent),
    						stackedCards: actualCardsToDraw,
    						isBlank: Array(actualCardsToDraw).fill(false).concat(Array(blanksToAdd).fill(true)), // Include actual and blank cards
    						
    					});
    				}
    			});

    			// Process linked groups
    			Object.values(linkedGroupData).forEach(group => {
    				// Correctly adjust for the top card in linked groups
    				let actualCardsToDraw = Math.max(group.totalCardsToDraw - 1, 0);

    				let blanksToAdd = Math.max(effectiveDrawSize - actualCardsToDraw, 0);

    				cards.push({
    					probability: group.probability,
    					label: group.label,
    					color: group.color,
    					ratioText: convertPercentToRatio(group.probability),
    					stackedCards: actualCardsToDraw,
    					isBlank: Array(actualCardsToDraw).fill(false).concat(Array(blanksToAdd).fill(true)), // Include actual and blank cards
    					
    				});
    			});
    		}

    		return cards;
    	}

    	const presetColors = ["#e4f5d0", "#c9f1ee", "#FFE0B2", "#edd7f1", "#cbedfd", "#ffdbd0", "#e0e5ff"]; // Example colors

    	function assignGroupColors(groups) {
    		let colorIndex = 0;
    		let updatedColors = {};

    		// First, assign colors based on unique names or links
    		groups.forEach(group => {
    			if (!updatedColors[group.name]) {
    				updatedColors[group.name] = presetColors[colorIndex % presetColors.length];
    				colorIndex++;
    			}
    		});

    		// Next, ensure linked groups share the same color
    		groups.forEach(group => {
    			if (group.link && group.link.trim() !== '') {
    				updatedColors[group.link] = updatedColors[group.name];
    			}
    		});

    		groupColors.set(updatedColors); // Update the store with new color mappings
    	}

    	async function saveOutputDiagram() {
    		await tick(); // Wait for the DOM to update

    		if (outputDiagram) {
    			console.log('Cloning outputDiagram:', outputDiagram);
    			const clone = outputDiagram.cloneNode(true);
    			const uniqueId = Date.now(); // Use a timestamp as a unique identifier
    			clonedOutputDiagrams.update(diagrams => [...diagrams, { id: uniqueId, node: clone }]);
    			console.log('Cloned outputDiagram added to store:', { id: uniqueId, node: clone });
    		} else {
    			console.log('outputDiagram is not defined');
    		}
    	}

    	//this is a helper function that removes groups redundancy in the output. 
    	//prolly a better way to do this!
    	function getCombinedResults(groups, results, probabilitiesByTurn, monteCarloHandResults, turn) {
    		const fullResults = createGroupCards(groups, results, probabilitiesByTurn, turn);
    		const handResults = createGroupCards(groups, results, monteCarloHandResults, turn, 'hand', true); // Exclude groups
    		const combinedResults = [...handResults, ...fullResults];

    		// Sort to ensure hand simulation results are always first or second
    		combinedResults.sort((a, b) => {
    			if (a.label === 'Hand Simulation') return -1;
    			if (b.label === 'Hand Simulation') return 1;
    			return 0;
    		});

    		console.log('Combined Results:', combinedResults);
    		return combinedResults;
    	}

    	$$self.$$.on_mount.push(function () {
    		if (deckSize === undefined && !('deckSize' in $$props || $$self.$$.bound[$$self.$$.props['deckSize']])) {
    			console_1$2.warn("<Calculation> was created without expected prop 'deckSize'");
    		}

    		if (mulliganCount === undefined && !('mulliganCount' in $$props || $$self.$$.bound[$$self.$$.props['mulliganCount']])) {
    			console_1$2.warn("<Calculation> was created without expected prop 'mulliganCount'");
    		}

    		if (InitialDrawSize === undefined && !('InitialDrawSize' in $$props || $$self.$$.bound[$$self.$$.props['InitialDrawSize']])) {
    			console_1$2.warn("<Calculation> was created without expected prop 'InitialDrawSize'");
    		}
    	});

    	const writable_props = ['groups', 'deckSize', 'mulliganCount', 'InitialDrawSize'];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<Calculation> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate(11, showPopover = !showPopover);

    	function popover_show_binding(value) {
    		showPopover = value;
    		$$invalidate(11, showPopover);
    	}

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			outputDiagram = $$value;
    			$$invalidate(9, outputDiagram);
    		});
    	}

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			clonedOutputContainer = $$value;
    			$$invalidate(10, clonedOutputContainer);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('groups' in $$props) $$invalidate(0, groups = $$props.groups);
    		if ('deckSize' in $$props) $$invalidate(18, deckSize = $$props.deckSize);
    		if ('mulliganCount' in $$props) $$invalidate(19, mulliganCount = $$props.mulliganCount);
    		if ('InitialDrawSize' in $$props) $$invalidate(1, InitialDrawSize = $$props.InitialDrawSize);
    	};

    	$$self.$capture_state = () => ({
    		groupColors,
    		neededCombinationsCount,
    		numberOfTurns,
    		activeTab,
    		simulationData,
    		monteCarloResults,
    		monteCarloHandResults,
    		simulationRun,
    		cancelSimulation,
    		simulationProgress,
    		combinationProgress,
    		shouldResetSimulation,
    		mulliganConfig,
    		simplifiedRampMana,
    		simulationType,
    		clonedOutputDiagrams,
    		sampleSize: lodashExports.sampleSize,
    		_,
    		onMount,
    		tick,
    		writable,
    		Popover,
    		faQuestionCircle,
    		faTimes,
    		FontAwesomeIcon,
    		Tabs,
    		hasOutput,
    		outputDiagram,
    		clonedOutputContainer,
    		selectInput,
    		calculateTotalManaRequirements,
    		choose,
    		hypergeometricCDF,
    		multivariateHypergeometricCDF,
    		calculateLinkedGroups,
    		groups,
    		deckSize,
    		mulliganCount,
    		InitialDrawSize,
    		results,
    		showPopover,
    		calculateProbabilities,
    		calculateSingleGroup,
    		determineNeededCombinations,
    		satisfiesRequirements,
    		getAllCombinations,
    		generateAllSelections,
    		binomialCoefficient,
    		combineProfiles,
    		prepareCombinationsForAnalysis,
    		calculateLandGroupSizes,
    		monteCarloSimulation,
    		monteCarloSimulationHand,
    		preprocessRampCards,
    		handMeetsRequirements,
    		manaPoolMeetsRequirements,
    		londonMulligan,
    		prioritizeCardToBottom,
    		playLands,
    		getHighestPriorityColor,
    		colorPriority,
    		getColorPriority,
    		playRampCards,
    		getTotalManaCost,
    		addRampManaToAvailable,
    		removeManaForSignet,
    		simplifySignetManaProduction,
    		simplifyManaProduction,
    		canPlayRamp,
    		deductMana,
    		resetAndUpdateAvailableMana,
    		removeDrawnCardsFromDeck,
    		identifyProfiles,
    		preparedCards,
    		manaRequirements,
    		probabilitiesByTurn,
    		currentTurn,
    		runSimulation,
    		createGroupCards,
    		convertPercentToRatio,
    		presetColors,
    		assignGroupColors,
    		saveOutputDiagram,
    		getCombinedResults,
    		getProbabilityColor,
    		generateTurnsArray,
    		tabs,
    		totalManaRequirements,
    		$numberOfTurns,
    		$clonedOutputDiagrams,
    		$monteCarloHandResults,
    		$probabilitiesByTurn,
    		$groupColors,
    		$monteCarloResults,
    		$simulationData,
    		$simulationType,
    		$mulliganConfig,
    		$cancelSimulation,
    		$simplifiedRampMana,
    		$activeTab
    	});

    	$$self.$inject_state = $$props => {
    		if ('hasOutput' in $$props) $$invalidate(8, hasOutput = $$props.hasOutput);
    		if ('outputDiagram' in $$props) $$invalidate(9, outputDiagram = $$props.outputDiagram);
    		if ('clonedOutputContainer' in $$props) $$invalidate(10, clonedOutputContainer = $$props.clonedOutputContainer);
    		if ('groups' in $$props) $$invalidate(0, groups = $$props.groups);
    		if ('deckSize' in $$props) $$invalidate(18, deckSize = $$props.deckSize);
    		if ('mulliganCount' in $$props) $$invalidate(19, mulliganCount = $$props.mulliganCount);
    		if ('InitialDrawSize' in $$props) $$invalidate(1, InitialDrawSize = $$props.InitialDrawSize);
    		if ('results' in $$props) $$invalidate(2, results = $$props.results);
    		if ('showPopover' in $$props) $$invalidate(11, showPopover = $$props.showPopover);
    		if ('preparedCards' in $$props) preparedCards = $$props.preparedCards;
    		if ('manaRequirements' in $$props) $$invalidate(20, manaRequirements = $$props.manaRequirements);
    		if ('probabilitiesByTurn' in $$props) $$invalidate(15, probabilitiesByTurn = $$props.probabilitiesByTurn);
    		if ('currentTurn' in $$props) currentTurn = $$props.currentTurn;
    		if ('generateTurnsArray' in $$props) $$invalidate(3, generateTurnsArray = $$props.generateTurnsArray);
    		if ('tabs' in $$props) $$invalidate(12, tabs = $$props.tabs);
    		if ('totalManaRequirements' in $$props) $$invalidate(13, totalManaRequirements = $$props.totalManaRequirements);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*$numberOfTurns*/ 16) {
    			// Log the value of numberOfTurns
    			console.log('numberOfTurns:', $numberOfTurns);
    		}

    		if ($$self.$$.dirty[0] & /*$mulliganConfig*/ 4194304) {
    			console.log('Mulligan Configuration:', $mulliganConfig);
    		}

    		if ($$self.$$.dirty[0] & /*$simulationData*/ 2097152) {
    			// Reactive statement to update the component's data whenever the store changes
    			{
    				preparedCards = $simulationData.preparedCards;
    				$$invalidate(20, manaRequirements = $simulationData.manaRequirements);
    				$simulationData.iterations || 8000; // Default to 10000 if undefined
    			}
    		}

    		if ($$self.$$.dirty[0] & /*manaRequirements*/ 1048576) {
    			// Calculate the total mana requirements
    			$$invalidate(13, totalManaRequirements = calculateTotalManaRequirements(manaRequirements));
    		}

    		if ($$self.$$.dirty[0] & /*groups, $numberOfTurns, results*/ 21) {
    			// Reactive statement to calculate probabilities when groups or numberOfTurns changes
    			if (groups.length > 0 || $numberOfTurns) {
    				calculateProbabilities();
    				console.log('Results after calculateProbabilities:', results);
    			}
    		}

    		if ($$self.$$.dirty[0] & /*$simplifiedRampMana*/ 8388608) {
    			//the following is the start of mana probability calculations -------------------
    			{
    				console.log('calculation file Simplified Ramp Mana:', $simplifiedRampMana); // Log the simplified ramp mana
    			}
    		}

    		if ($$self.$$.dirty[0] & /*$simulationData*/ 2097152) {
    			if ($simulationData && $simulationData.preparedCards.length > 0 && Object.values($simulationData.manaRequirements).some(value => value > 0)) {
    				runSimulation();
    			}
    		}

    		if ($$self.$$.dirty[0] & /*groups*/ 1) {
    			if (groups.length > 0) {
    				assignGroupColors(groups);
    				calculateProbabilities();
    			}
    		}

    		if ($$self.$$.dirty[0] & /*$numberOfTurns*/ 16) {
    			// Function to generate turns array
    			$$invalidate(3, generateTurnsArray = () => {
    				const array = Array.from({ length: $numberOfTurns.length + 1 }, (_, i) => i);
    				console.log('Generated Turns Array:', array);
    				return array;
    			});
    		}

    		if ($$self.$$.dirty[0] & /*generateTurnsArray, $numberOfTurns, groups, results, $probabilitiesByTurn, $monteCarloHandResults*/ 221) {
    			// Reactive statement to check if there's any output to display
    			{
    				$$invalidate(8, hasOutput = generateTurnsArray($numberOfTurns).some(turn => createGroupCards(groups, results, $probabilitiesByTurn, turn).length > 0 || createGroupCards(groups, results, $monteCarloHandResults, turn, 'hand').length > 0));
    			}
    		}

    		if ($$self.$$.dirty[0] & /*$clonedOutputDiagrams*/ 32) {
    			$$invalidate(12, tabs = [
    				'Live results',
    				...$clonedOutputDiagrams.map((_, index) => `Trial ${index + 1}`).reverse()
    			]);
    		}

    		if ($$self.$$.dirty[0] & /*$clonedOutputDiagrams*/ 32) {
    			if ($clonedOutputDiagrams.length > 0) {
    				console.log('clonedOutputDiagrams:', $clonedOutputDiagrams);

    				// Use tick to ensure the DOM is updated before appending nodes
    				tick().then(() => {
    					$clonedOutputDiagrams.forEach(({ id, node }, index) => {
    						const wrapper = document.querySelector(`.cloned-output-wrapper[data-id="${id}"]`);
    						console.log(`Appending node to wrapper with id ${id}:`, wrapper);

    						if (wrapper && !wrapper.hasChildNodes()) {
    							wrapper.appendChild(node);
    							console.log(`Node appended to wrapper with id ${id}`);
    						} else {
    							console.log(`Wrapper with id ${id} already has child nodes or does not exist`);
    						}
    					});
    				});
    			}
    		}
    	};

    	return [
    		groups,
    		InitialDrawSize,
    		results,
    		generateTurnsArray,
    		$numberOfTurns,
    		$clonedOutputDiagrams,
    		$monteCarloHandResults,
    		$probabilitiesByTurn,
    		hasOutput,
    		outputDiagram,
    		clonedOutputContainer,
    		showPopover,
    		tabs,
    		totalManaRequirements,
    		$activeTab,
    		probabilitiesByTurn,
    		createGroupCards,
    		getCombinedResults,
    		deckSize,
    		mulliganCount,
    		manaRequirements,
    		$simulationData,
    		$mulliganConfig,
    		$simplifiedRampMana,
    		click_handler,
    		popover_show_binding,
    		div0_binding,
    		div1_binding
    	];
    }

    class Calculation extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$4,
    			create_fragment$4,
    			safe_not_equal,
    			{
    				groups: 0,
    				deckSize: 18,
    				mulliganCount: 19,
    				InitialDrawSize: 1
    			},
    			null,
    			[-1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Calculation",
    			options,
    			id: create_fragment$4.name
    		});
    	}

    	get groups() {
    		throw new Error_1("<Calculation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groups(value) {
    		throw new Error_1("<Calculation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get deckSize() {
    		throw new Error_1("<Calculation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set deckSize(value) {
    		throw new Error_1("<Calculation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get mulliganCount() {
    		throw new Error_1("<Calculation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set mulliganCount(value) {
    		throw new Error_1("<Calculation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get InitialDrawSize() {
    		throw new Error_1("<Calculation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set InitialDrawSize(value) {
    		throw new Error_1("<Calculation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var css_248z$3 = "";
    styleInject(css_248z$3);

    /* src\FAQ.svelte generated by Svelte v3.59.2 */

    const { console: console_1$1 } = globals;
    const file$3 = "src\\FAQ.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i].question;
    	child_ctx[11] = list[i].answer;
    	child_ctx[13] = i;
    	return child_ctx;
    }

    // (127:12) {#if openItem === index}
    function create_if_block$1(ctx) {
    	let div;
    	let html_tag;
    	let raw_value = /*answer*/ ctx[11] + "";
    	let t;
    	let div_transition;
    	let current;
    	let if_block = /*copySuccessMessage*/ ctx[2] && create_if_block_1(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			html_tag = new HtmlTag(false);
    			t = space();
    			if (if_block) if_block.c();
    			html_tag.a = t;
    			attr_dev(div, "class", "answer svelte-11sck9f");
    			add_location(div, file$3, 127, 16, 3463);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			html_tag.m(raw_value, div);
    			append_dev(div, t);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*faqs*/ 1) && raw_value !== (raw_value = /*answer*/ ctx[11] + "")) html_tag.p(raw_value);

    			if (/*copySuccessMessage*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			if (local) {
    				add_render_callback(() => {
    					if (!current) return;
    					if (!div_transition) div_transition = create_bidirectional_transition(div, slide, { duration: 250 }, true);
    					div_transition.run(1);
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			if (local) {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, { duration: 250 }, false);
    				div_transition.run(0);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(127:12) {#if openItem === index}",
    		ctx
    	});

    	return block;
    }

    // (130:20) {#if copySuccessMessage}
    function create_if_block_1(ctx) {
    	let p;
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(/*copySuccessMessage*/ ctx[2]);
    			attr_dev(p, "class", "copy-success svelte-11sck9f");
    			add_location(p, file$3, 130, 24, 3632);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*copySuccessMessage*/ 4) set_data_dev(t, /*copySuccessMessage*/ ctx[2]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(130:20) {#if copySuccessMessage}",
    		ctx
    	});

    	return block;
    }

    // (120:4) {#each faqs as {question, answer}
    function create_each_block(ctx) {
    	let div;
    	let h3;
    	let t0_value = /*question*/ ctx[10] + "";
    	let t0;
    	let t1;
    	let t2;
    	let mounted;
    	let dispose;
    	let if_block = /*openItem*/ ctx[1] === /*index*/ ctx[13] && create_if_block$1(ctx);

    	function click_handler(...args) {
    		return /*click_handler*/ ctx[6](/*index*/ ctx[13], ...args);
    	}

    	function keydown_handler(...args) {
    		return /*keydown_handler*/ ctx[7](/*index*/ ctx[13], ...args);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();
    			add_location(h3, file$3, 125, 12, 3388);
    			attr_dev(div, "class", "accordion-item svelte-11sck9f");

    			set_style(div, "background-color", /*openItem*/ ctx[1] === /*index*/ ctx[13]
    			? 'white'
    			: 'transparent');

    			attr_dev(div, "tabindex", "0");
    			add_location(div, file$3, 120, 8, 3099);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(h3, t0);
    			append_dev(div, t1);
    			if (if_block) if_block.m(div, null);
    			append_dev(div, t2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "click", click_handler, false, false, false, false),
    					listen_dev(div, "keydown", keydown_handler, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*faqs*/ 1 && t0_value !== (t0_value = /*question*/ ctx[10] + "")) set_data_dev(t0, t0_value);

    			if (/*openItem*/ ctx[1] === /*index*/ ctx[13]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*openItem*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, t2);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*openItem*/ 2) {
    				set_style(div, "background-color", /*openItem*/ ctx[1] === /*index*/ ctx[13]
    				? 'white'
    				: 'transparent');
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(120:4) {#each faqs as {question, answer}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let div;
    	let each_value = /*faqs*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "accordion svelte-11sck9f");
    			add_location(div, file$3, 118, 2, 3019);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div, null);
    				}
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*openItem, handleAccordionItemClick, handleKeydown, copySuccessMessage, faqs*/ 31) {
    				each_value = /*faqs*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('FAQ', slots, []);
    	let openItem = null;

    	function toggleItem(index) {
    		$$invalidate(1, openItem = openItem === index ? null : index);
    	}

    	function handleKeydown(event, index) {
    		if (event.key === 'Enter') {
    			handleAccordionItemClick(event, index); // Reuse the item click handler for keyboard Enter key
    		}
    	}

    	let { faqs = [] } = $$props;
    	let { customClass = '' } = $$props;
    	let copySuccessMessage = ''; // Holds the message shown when copying is successful

    	function handleAccordionItemClick(event, index) {
    		const linkElement = event.target.closest('a');

    		if (linkElement && linkElement.classList.contains('copy-email')) {
    			event.preventDefault(); // Prevent the default link action
    			event.stopPropagation(); // Stop the click from bubbling up
    			copyEmail(linkElement.dataset.email);
    		} else if (linkElement) {
    			// Allow default link behavior for all other links, don't toggle accordion
    			return;
    		} else {
    			toggleItem(index);
    		}
    	}

    	function copyEmail(email) {
    		navigator.clipboard.writeText(email).then(() => {
    			$$invalidate(2, copySuccessMessage = 'Email address copied to clipboard!');

    			setTimeout(
    				() => {
    					$$invalidate(2, copySuccessMessage = '');
    				},
    				4500
    			); // Clear the message after 3 seconds
    		}).catch(err => {
    			console.error('Failed to copy email: ', err);
    			$$invalidate(2, copySuccessMessage = 'Failed to copy email!');

    			setTimeout(
    				() => {
    					$$invalidate(2, copySuccessMessage = '');
    				},
    				4500
    			); // Clear the message after 3 seconds
    		});
    	}

    	const writable_props = ['faqs', 'customClass'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<FAQ> was created with unknown prop '${key}'`);
    	});

    	const click_handler = (index, event) => handleAccordionItemClick(event, index);
    	const keydown_handler = (index, event) => handleKeydown(event, index);

    	$$self.$$set = $$props => {
    		if ('faqs' in $$props) $$invalidate(0, faqs = $$props.faqs);
    		if ('customClass' in $$props) $$invalidate(5, customClass = $$props.customClass);
    	};

    	$$self.$capture_state = () => ({
    		slide,
    		onMount,
    		openItem,
    		toggleItem,
    		handleKeydown,
    		faqs,
    		customClass,
    		copySuccessMessage,
    		handleAccordionItemClick,
    		copyEmail
    	});

    	$$self.$inject_state = $$props => {
    		if ('openItem' in $$props) $$invalidate(1, openItem = $$props.openItem);
    		if ('faqs' in $$props) $$invalidate(0, faqs = $$props.faqs);
    		if ('customClass' in $$props) $$invalidate(5, customClass = $$props.customClass);
    		if ('copySuccessMessage' in $$props) $$invalidate(2, copySuccessMessage = $$props.copySuccessMessage);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		faqs,
    		openItem,
    		copySuccessMessage,
    		handleKeydown,
    		handleAccordionItemClick,
    		customClass,
    		click_handler,
    		keydown_handler
    	];
    }

    class FAQ extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { faqs: 0, customClass: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "FAQ",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get faqs() {
    		throw new Error("<FAQ>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set faqs(value) {
    		throw new Error("<FAQ>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get customClass() {
    		throw new Error("<FAQ>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set customClass(value) {
    		throw new Error("<FAQ>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var css_248z$2 = "";
    styleInject(css_248z$2);

    /* src\Intro.svelte generated by Svelte v3.59.2 */
    const file$2 = "src\\Intro.svelte";

    // (40:8) 
    function create_trigger_slot(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "venmoing me half a coffee";
    			attr_dev(button, "id", "moreInfo");
    			attr_dev(button, "class", "moreInfo svelte-lzaaod");
    			attr_dev(button, "slot", "trigger");
    			attr_dev(button, "tabindex", "-1");
    			attr_dev(button, "aria-label", "donate to me if you want!");
    			add_location(button, file$2, 39, 8, 3579);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[2], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_trigger_slot.name,
    		type: "slot",
    		source: "(40:8) ",
    		ctx
    	});

    	return block;
    }

    // (43:8) 
    function create_content_slot(ctx) {
    	let div1;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let a0;
    	let br;
    	let t2;
    	let a1;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			a0 = element("a");
    			a0.textContent = "Open in web";
    			br = element("br");
    			t2 = space();
    			a1 = element("a");
    			a1.textContent = "Open in mobile app";
    			if (!src_url_equal(img.src, img_src_value = "venmo_qrcode.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Coffee Image");
    			add_location(img, file$2, 44, 10, 3869);
    			attr_dev(a0, "href", "https://venmo.com/u/Benjamin-Gross-10");
    			attr_dev(a0, "target", "_blank");
    			add_location(a0, file$2, 46, 12, 3932);
    			add_location(br, file$2, 46, 91, 4011);
    			attr_dev(a1, "href", "venmo://paycharge?txn=pay&recipients=Benjamin-Gross-10&amount=2.5&note=half-a-coffee");
    			attr_dev(a1, "target", "_blank");
    			add_location(a1, file$2, 47, 12, 4029);
    			attr_dev(div0, "class", "popover-group svelte-lzaaod");
    			add_location(div0, file$2, 43, 10, 3828);
    			attr_dev(div1, "slot", "content");
    			add_location(div1, file$2, 42, 8, 3796);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, img);
    			append_dev(div0, t0);
    			append_dev(div0, a0);
    			append_dev(div0, br);
    			append_dev(div0, t2);
    			append_dev(div0, a1);
    		},
    		p: noop$3,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_content_slot.name,
    		type: "slot",
    		source: "(43:8) ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let link;
    	let t0;
    	let div;
    	let h1;
    	let t2;
    	let p;
    	let t3;
    	let popover;
    	let updating_show;
    	let t4;
    	let t5;
    	let faq;
    	let current;

    	function popover_show_binding(value) {
    		/*popover_show_binding*/ ctx[3](value);
    	}

    	let popover_props = {
    		placement: "bottom",
    		$$slots: {
    			content: [create_content_slot],
    			trigger: [create_trigger_slot]
    		},
    		$$scope: { ctx }
    	};

    	if (/*showPopover*/ ctx[0] !== void 0) {
    		popover_props.show = /*showPopover*/ ctx[0];
    	}

    	popover = new Popover({ props: popover_props, $$inline: true });
    	binding_callbacks.push(() => bind(popover, 'show', popover_show_binding));

    	faq = new FAQ({
    			props: {
    				customClass: "reduced-padding",
    				faqs: /*example*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			link = element("link");
    			t0 = space();
    			div = element("div");
    			h1 = element("h1");
    			h1.textContent = "Draw Probability Calculator";
    			t2 = space();
    			p = element("p");
    			t3 = text("This tool is made to answer questions like, \"what are the chances I draw one ramp spell and two lands in my opening hand.\" You can also take this a step further and calculate the chances you'll get certain mana or ability combinations in your opening turns. While I designed this tool in the frame of Commander Magic, it should work for any card game that draws a set number of cards to start, and then one card per turn after. If you find this helpful, consider \r\n      \r\n      ");
    			create_component(popover.$$.fragment);
    			t4 = text("\r\n   🙂.");
    			t5 = space();
    			create_component(faq.$$.fragment);
    			attr_dev(link, "href", "https://fonts.googleapis.com/css2?family=Vollkorn:wght@700&display=swap");
    			attr_dev(link, "rel", "stylesheet");
    			add_location(link, file$2, 31, 2, 2816);
    			attr_dev(h1, "class", "title svelte-lzaaod");
    			add_location(h1, file$2, 35, 4, 2959);
    			attr_dev(p, "class", "larger-text");
    			add_location(p, file$2, 36, 4, 3015);
    			attr_dev(div, "class", "intro-section svelte-lzaaod");
    			add_location(div, file$2, 34, 2, 2926);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, link, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, h1);
    			append_dev(div, t2);
    			append_dev(div, p);
    			append_dev(p, t3);
    			mount_component(popover, p, null);
    			append_dev(p, t4);
    			append_dev(div, t5);
    			mount_component(faq, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const popover_changes = {};

    			if (dirty & /*$$scope, showPopover*/ 17) {
    				popover_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_show && dirty & /*showPopover*/ 1) {
    				updating_show = true;
    				popover_changes.show = /*showPopover*/ ctx[0];
    				add_flush_callback(() => updating_show = false);
    			}

    			popover.$set(popover_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(popover.$$.fragment, local);
    			transition_in(faq.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(popover.$$.fragment, local);
    			transition_out(faq.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(link);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    			destroy_component(popover);
    			destroy_component(faq);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Intro', slots, []);
    	let showPopover = false;

    	document.addEventListener('DOMContentLoaded', function () {
    		var venmoLink = document.getElementById('venmoLink');

    		if (venmoLink && (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i).test(navigator.userAgent)) {
    			// Change the link for mobile devices
    			venmoLink.href = 'venmo://paycharge?txn=pay&recipients=Benjamin-Gross-10&amount=2.5&note=Payment';
    		}
    	});

    	let example = [
    		{
    			question: "Show examples of how to use this tool",
    			answer: `<h4 style='margin-bottom:0rem'>Basic usage</h4><p>This tool helps people think about probabilities of single and multiple-card combinations in their opening hands. For example, in the following setup, I can find the chances I'll get 3 lands in my opening hand given there are 38 lands in my deck.</p><img src='1.png' alt='Coffee Image'><img class='responsive-image' src='2.png' alt='Coffee Image'><hr><p>Using the link feature, I can find the chances I'll get 3 lands <i>and</i> 1 draw card in my opening hand.</p><img src='3.png' alt='Coffee Image'><img class='responsive-image-shorter' src='4.png' alt='Coffee Image'><hr><p>This tool also supports mulligans. I can see that my probabilities nearly double when I mulligan once.</p><img class='responsive-image-midsized' src='5.png' alt='Coffee Image'><img class='responsive-image-shorter' src='6.png' alt='Coffee Image'><hr><h4 style='margin-bottom:0rem'>Advanced usage</h4><p>In the "Advanced mana and attribute probabilities" section,</p><img src='6_5.png' alt='Coffee Image'><p>you can calculate more complex probabilities that consider card attributes, like mana. In the following setup, I've added all of the lands in my esper deck via the "Add mana group" button.</p><img src='7.png' alt='Coffee Image'><p>In Step 2, I'll input the amount of each mana I'd like to get.</p><img src='8.png' alt='Coffee Image'><p>After clicking "Run Simulation", the probability of getting 4 lands with the specified mana attributes is shown:</p><img class='responsive-image' src='9.png' alt='Coffee Image'><hr><h4 style='margin-bottom:0rem'>Advanced usage - custom groups</h4><p>The advanced section can also be used to add a custom group. For example, I'll use a custom group to represent the ramp spells in my deck.</p><img class='fixed-image' src='10.png' alt='Coffee Image'><p>Then, in step 2, I can add 1 ramp spell to my desired cards, in addition to any mana requirements.</p><img src='11.png' alt='Coffee Image'><p>Now, the resulting probability shows the chance I'll get the 4 lands of specific mana and 1 ramp spell:</p><img class='responsive-image' src='12.png' alt='Coffee Image'>`
    		}
    	];

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Intro> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => $$invalidate(0, showPopover = !showPopover);

    	function popover_show_binding(value) {
    		showPopover = value;
    		$$invalidate(0, showPopover);
    	}

    	$$self.$capture_state = () => ({ Popover, FAQ, showPopover, example });

    	$$self.$inject_state = $$props => {
    		if ('showPopover' in $$props) $$invalidate(0, showPopover = $$props.showPopover);
    		if ('example' in $$props) $$invalidate(1, example = $$props.example);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [showPopover, example, click_handler, popover_show_binding];
    }

    class Intro extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Intro",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    var css_248z$1 = "";
    styleInject(css_248z$1);

    /* src\SimulationModal.svelte generated by Svelte v3.59.2 */

    const file$1 = "src\\SimulationModal.svelte";

    // (37:0) {#if $simulationRun}
    function create_if_block(ctx) {
    	let div1;
    	let div0;
    	let h2;
    	let t1;
    	let p0;
    	let i0;
    	let t3;
    	let p1;
    	let i1;
    	let t4;
    	let strong;
    	let t5_value = formatCount(/*$neededCombinationsCount*/ ctx[2]) + "";
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let p2;
    	let i2;
    	let t10;
    	let p3;
    	let t12;
    	let progress0;
    	let t13;
    	let t14;
    	let t15;
    	let p4;
    	let t17;
    	let progress1;
    	let t18;
    	let t19;
    	let t20;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			h2 = element("h2");
    			h2.textContent = "Simulation in Progress...";
    			t1 = space();
    			p0 = element("p");
    			i0 = element("i");
    			i0.textContent = "Simulations with large amounts of cards, desired cards, or possible combinations can be slower to start.";
    			t3 = space();
    			p1 = element("p");
    			i1 = element("i");
    			t4 = text("Your desired cards can be drawn through ");
    			strong = element("strong");
    			t5 = text(t5_value);
    			t6 = text(" ");
    			t7 = text("combination(s).");
    			t8 = space();
    			p2 = element("p");
    			i2 = element("i");
    			i2.textContent = "If it's taking too long, you can try decreasing the iteration value. This will reduce probability accuracy.";
    			t10 = space();
    			p3 = element("p");
    			p3.textContent = "Calculate combinations";
    			t12 = space();
    			progress0 = element("progress");
    			t13 = text(/*$combinationProgress*/ ctx[3]);
    			t14 = text("%");
    			t15 = space();
    			p4 = element("p");
    			p4.textContent = "Simulate draws and turns";
    			t17 = space();
    			progress1 = element("progress");
    			t18 = text(/*$simulationProgress*/ ctx[4]);
    			t19 = text("%");
    			t20 = space();
    			button = element("button");
    			button.textContent = "Cancel Simulation";
    			attr_dev(h2, "class", "svelte-4ub2o8");
    			add_location(h2, file$1, 39, 8, 947);
    			add_location(i0, file$1, 40, 11, 994);
    			attr_dev(p0, "class", "svelte-4ub2o8");
    			add_location(p0, file$1, 40, 8, 991);
    			add_location(strong, file$1, 41, 54, 1165);
    			add_location(i1, file$1, 41, 11, 1122);
    			attr_dev(p1, "class", "svelte-4ub2o8");
    			add_location(p1, file$1, 41, 8, 1119);
    			add_location(i2, file$1, 42, 11, 1263);
    			attr_dev(p2, "class", "svelte-4ub2o8");
    			add_location(p2, file$1, 42, 8, 1260);
    			attr_dev(p3, "class", "svelte-4ub2o8");
    			add_location(p3, file$1, 43, 8, 1391);
    			attr_dev(progress0, "class", "progress-bar svelte-4ub2o8");
    			progress0.value = /*$combinationProgress*/ ctx[3];
    			attr_dev(progress0, "max", "100");
    			add_location(progress0, file$1, 44, 8, 1430);
    			attr_dev(p4, "class", "svelte-4ub2o8");
    			add_location(p4, file$1, 45, 8, 1548);
    			attr_dev(progress1, "class", "progress-bar svelte-4ub2o8");
    			progress1.value = /*$simulationProgress*/ ctx[4];
    			attr_dev(progress1, "max", "100");
    			add_location(progress1, file$1, 46, 8, 1589);
    			attr_dev(button, "class", "svelte-4ub2o8");
    			add_location(button, file$1, 47, 8, 1705);
    			attr_dev(div0, "class", "modal-content svelte-4ub2o8");
    			add_location(div0, file$1, 38, 4, 910);
    			attr_dev(div1, "class", "modal svelte-4ub2o8");
    			add_location(div1, file$1, 37, 0, 885);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, h2);
    			append_dev(div0, t1);
    			append_dev(div0, p0);
    			append_dev(p0, i0);
    			append_dev(div0, t3);
    			append_dev(div0, p1);
    			append_dev(p1, i1);
    			append_dev(i1, t4);
    			append_dev(i1, strong);
    			append_dev(strong, t5);
    			append_dev(strong, t6);
    			append_dev(i1, t7);
    			append_dev(div0, t8);
    			append_dev(div0, p2);
    			append_dev(p2, i2);
    			append_dev(div0, t10);
    			append_dev(div0, p3);
    			append_dev(div0, t12);
    			append_dev(div0, progress0);
    			append_dev(progress0, t13);
    			append_dev(progress0, t14);
    			append_dev(div0, t15);
    			append_dev(div0, p4);
    			append_dev(div0, t17);
    			append_dev(div0, progress1);
    			append_dev(progress1, t18);
    			append_dev(progress1, t19);
    			append_dev(div0, t20);
    			append_dev(div0, button);
    			/*button_binding*/ ctx[6](button);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*handleCancel*/ ctx[5], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$neededCombinationsCount*/ 4 && t5_value !== (t5_value = formatCount(/*$neededCombinationsCount*/ ctx[2]) + "")) set_data_dev(t5, t5_value);
    			if (dirty & /*$combinationProgress*/ 8) set_data_dev(t13, /*$combinationProgress*/ ctx[3]);

    			if (dirty & /*$combinationProgress*/ 8) {
    				prop_dev(progress0, "value", /*$combinationProgress*/ ctx[3]);
    			}

    			if (dirty & /*$simulationProgress*/ 16) set_data_dev(t18, /*$simulationProgress*/ ctx[4]);

    			if (dirty & /*$simulationProgress*/ 16) {
    				prop_dev(progress1, "value", /*$simulationProgress*/ ctx[4]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			/*button_binding*/ ctx[6](null);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(37:0) {#if $simulationRun}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let if_block_anchor;
    	let if_block = /*$simulationRun*/ ctx[1] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$simulationRun*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop$3,
    		o: noop$3,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function formatCount(count) {
    	return count === null ? '(loading...)' : count.toLocaleString();
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $simulationRun;
    	let $neededCombinationsCount;
    	let $combinationProgress;
    	let $simulationProgress;
    	validate_store(simulationRun, 'simulationRun');
    	component_subscribe($$self, simulationRun, $$value => $$invalidate(1, $simulationRun = $$value));
    	validate_store(neededCombinationsCount, 'neededCombinationsCount');
    	component_subscribe($$self, neededCombinationsCount, $$value => $$invalidate(2, $neededCombinationsCount = $$value));
    	validate_store(combinationProgress, 'combinationProgress');
    	component_subscribe($$self, combinationProgress, $$value => $$invalidate(3, $combinationProgress = $$value));
    	validate_store(simulationProgress, 'simulationProgress');
    	component_subscribe($$self, simulationProgress, $$value => $$invalidate(4, $simulationProgress = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SimulationModal', slots, []);
    	let cancelButton;

    	function handleCancel() {
    		cancelSimulation.set(true);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SimulationModal> was created with unknown prop '${key}'`);
    	});

    	function button_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			cancelButton = $$value;
    			$$invalidate(0, cancelButton);
    		});
    	}

    	$$self.$capture_state = () => ({
    		afterUpdate,
    		simulationRun,
    		cancelSimulation,
    		neededCombinationsCount,
    		simulationProgress,
    		combinationProgress,
    		cancelButton,
    		handleCancel,
    		formatCount,
    		$simulationRun,
    		$neededCombinationsCount,
    		$combinationProgress,
    		$simulationProgress
    	});

    	$$self.$inject_state = $$props => {
    		if ('cancelButton' in $$props) $$invalidate(0, cancelButton = $$props.cancelButton);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$simulationRun, cancelButton*/ 3) {
    			// Reactive statement to handle simulation run state changes
    			if ($simulationRun) {
    				// Reset progress bars when simulation starts
    				combinationProgress.set(0);

    				// Use afterUpdate to ensure DOM updates have been processed
    				afterUpdate(() => {
    					// Check if the cancelButton is rendered and focusable
    					if (cancelButton) {
    						cancelButton.focus();
    					}
    				});
    			}
    		}
    	};

    	return [
    		cancelButton,
    		$simulationRun,
    		$neededCombinationsCount,
    		$combinationProgress,
    		$simulationProgress,
    		handleCancel,
    		button_binding
    	];
    }

    class SimulationModal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SimulationModal",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    var css_248z = "";
    styleInject(css_248z);

    /* src\App.svelte generated by Svelte v3.59.2 */

    const { console: console_1 } = globals;
    const file = "src\\App.svelte";

    function create_fragment(ctx) {
    	let main;
    	let simulationmodal;
    	let t0;
    	let intro;
    	let t1;
    	let div2;
    	let div0;
    	let groupdefinition;
    	let t2;
    	let div1;
    	let calculation;
    	let t3;
    	let faq;
    	let current;
    	simulationmodal = new SimulationModal({ $$inline: true });
    	intro = new Intro({ $$inline: true });
    	groupdefinition = new GroupDefinition({ $$inline: true });
    	groupdefinition.$on("updateGroups", /*handleGroupUpdate*/ ctx[4]);

    	calculation = new Calculation({
    			props: {
    				groups: /*groups*/ ctx[1],
    				deckSize: /*deckSize*/ ctx[2],
    				InitialDrawSize: /*InitialDrawSize*/ ctx[0],
    				mulliganCount: /*mulliganCount*/ ctx[3]
    			},
    			$$inline: true
    		});

    	faq = new FAQ({
    			props: { faqs: /*faqs*/ ctx[5] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			main = element("main");
    			create_component(simulationmodal.$$.fragment);
    			t0 = space();
    			create_component(intro.$$.fragment);
    			t1 = space();
    			div2 = element("div");
    			div0 = element("div");
    			create_component(groupdefinition.$$.fragment);
    			t2 = space();
    			div1 = element("div");
    			create_component(calculation.$$.fragment);
    			t3 = space();
    			create_component(faq.$$.fragment);
    			attr_dev(div0, "class", "left-column svelte-7oug4h");
    			add_location(div0, file, 73, 8, 5567);
    			attr_dev(div1, "class", "right-column svelte-7oug4h");
    			add_location(div1, file, 76, 8, 5687);
    			attr_dev(div2, "class", "content svelte-7oug4h");
    			add_location(div2, file, 72, 4, 5536);
    			attr_dev(main, "class", "parameters svelte-7oug4h");
    			add_location(main, file, 69, 0, 5465);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			mount_component(simulationmodal, main, null);
    			append_dev(main, t0);
    			mount_component(intro, main, null);
    			append_dev(main, t1);
    			append_dev(main, div2);
    			append_dev(div2, div0);
    			mount_component(groupdefinition, div0, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			mount_component(calculation, div1, null);
    			append_dev(main, t3);
    			mount_component(faq, main, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const calculation_changes = {};
    			if (dirty & /*groups*/ 2) calculation_changes.groups = /*groups*/ ctx[1];
    			if (dirty & /*deckSize*/ 4) calculation_changes.deckSize = /*deckSize*/ ctx[2];
    			if (dirty & /*InitialDrawSize*/ 1) calculation_changes.InitialDrawSize = /*InitialDrawSize*/ ctx[0];
    			if (dirty & /*mulliganCount*/ 8) calculation_changes.mulliganCount = /*mulliganCount*/ ctx[3];
    			calculation.$set(calculation_changes);
    		},
    		i: function intro$1(local) {
    			if (current) return;
    			transition_in(simulationmodal.$$.fragment, local);
    			transition_in(intro.$$.fragment, local);
    			transition_in(groupdefinition.$$.fragment, local);
    			transition_in(calculation.$$.fragment, local);
    			transition_in(faq.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(simulationmodal.$$.fragment, local);
    			transition_out(intro.$$.fragment, local);
    			transition_out(groupdefinition.$$.fragment, local);
    			transition_out(calculation.$$.fragment, local);
    			transition_out(faq.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			destroy_component(simulationmodal);
    			destroy_component(intro);
    			destroy_component(groupdefinition);
    			destroy_component(calculation);
    			destroy_component(faq);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let $simulationRun;
    	validate_store(simulationRun, 'simulationRun');
    	component_subscribe($$self, simulationRun, $$value => $$invalidate(6, $simulationRun = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	let groups = [];
    	let deckSize = 99; // Default deck size
    	let InitialDrawSize = 7; // Default initial draw size
    	let mulliganCount = 0;
    	initGA(); // This kicks off Google Analytics tracking

    	function handleGroupUpdate(event) {
    		$$invalidate(1, groups = event.detail.groups);
    		$$invalidate(2, deckSize = event.detail.deckSize);
    		$$invalidate(0, InitialDrawSize = event.detail.InitialDrawSize);
    		$$invalidate(3, mulliganCount = event.detail.mulliganCount);
    		console.log('handleGroupUpdate - InitialDrawSize:', InitialDrawSize); // Log when handleGroupUpdate is called
    	}

    	let faqs = [
    		{
    			question: "How does this work?",
    			answer: "<p>For the top half of this tool, <a href='https://en.wikipedia.org/wiki/Hypergeometric_distribution' target='_blank'>hypergeometric distribution</a> math is applied to calculate draw probabilities common to Magic and other card games.</p><p>The advanced mana and card attributes section applies a <a href='https://en.wikipedia.org/wiki/Monte_Carlo_method' target='_blank'>monte carlo method</a>, which essentially means simulating drawing a deck thousands of times to estimate probabilities.</p>"
    		},
    		{
    			question: "How do you know this is accurate?",
    			answer: "<p>The top half of this tool (hypergeometric calculations) has been checked against others (<a href='https://deckulator.appspot.com/' target='_blank'>deckulator, </a> <a href='https://aetherhub.com/Apps/HyperGeometric' target='_blank'>aetherhub,</a><a href='https://www.andrew.cmu.edu/user/kmliu/mtg_combo_calc.html' target='_blank'> mtg combo calc,</a><a href='https://deckstats.net/' target='_blank'> deckstats</a>) for accuracy.</p><p>The monte carlo method (advanced mana and attribute probabilities) is more experimental. I am able to confirm some of the logic by setting card groups to only include one attribute (such as a group that only produces one type of mana). This setup is calculable by hypergeometric math, and you can see that the probabilities from the monte caro simulation align (accounting for monte carlo simulations not being perfectly accurate and number-of-iterations based). What hypergeometric math cannot confirm is calculations involving multiple attributes per group. I have no reason to believe this is inaccurate, but I am unaware of a tool (or mathematical method) that I can use to confirm my logic.</p><p>For the mulligan aspect of this tool, I have confirmed my logic against Michael Moore's manual calculations <a href='https://deckulator.blogspot.com/2022/07/mulligans-and-probability-redrawing.html' target='_blank'>here</a>.</p>"
    		},
    		{
    			question: "I'd like to support this or give feedback.",
    			answer: `<p>There's a lot of ways to help!</p> 
       

       

       <p><b>If you're a mathy person,</b> you could help me confirm the mulligan and monte carlo calculations in some specific situations. See the github <a href='https://github.com/savanaben/Draw-Probability-Calculator?tab=readme-ov-file#readme' target='_blank'>readme</a> for more info, or email me (<a href="#" class="copy-email" data-email="ben.c.gross@gmail.com">click to copy ben.c.gross@gmail.com</a>).</p> <p><b>If you're a developer,</b> feel free to check out the <a href='https://github.com/savanaben/Draw-Probability-Calculator?tab=readme-ov-file#readme' target='_blank'>readme</a> project and propose improvements/pull requests. The readme has a list of areas of improvement/known issues.</p> <p><b>If you have a great idea to make this more useful or usable,</b> send me an email (<a href="#" class="copy-email" data-email="ben.c.gross@gmail.com">click to copy ben.c.gross@gmail.com</a>). This is a passion project and I'd love to extend or add functionality that helps people build their deck.</p>
       <p>Finally, if you'd like to buy me half a coffee, I appreciate it! <a href='https://venmo.com/u/Benjamin-Gross-10' target='_blank'>(Open Venmo in web)</a> <a href='venmo://paycharge?txn=pay&recipients=Benjamin-Gross-10&amount=2.5&note=half-a-coffee' target='_blank'>(Open Venmo in mobile app)</a>.</p>
       `
    		},
    		{
    			question: "Thanks and credits",
    			answer: "<p>Greatest thanks to Michael Moore and their <a href='https://deckulator.appspot.com/' target='_blank'>deckulator</a> app, which helped confirm logic.</p> <p>Thanks to <a href='https://www.slightlymagic.net/forum/viewtopic.php?f=15&t=4430' target='_blank'>Goblin Hero</a> for their mana symbol svgs.</p><p>If you want to check out my other work, feel free to browse <a href='https://savanaben.github.io/folio/index.html' target='_blank'>my website</a>.</p>"
    		}
    	];

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		GroupDefinition,
    		Calculation,
    		Intro,
    		FAQ,
    		SimulationModal,
    		simulationRun,
    		initGA,
    		groups,
    		deckSize,
    		InitialDrawSize,
    		mulliganCount,
    		handleGroupUpdate,
    		faqs,
    		$simulationRun
    	});

    	$$self.$inject_state = $$props => {
    		if ('groups' in $$props) $$invalidate(1, groups = $$props.groups);
    		if ('deckSize' in $$props) $$invalidate(2, deckSize = $$props.deckSize);
    		if ('InitialDrawSize' in $$props) $$invalidate(0, InitialDrawSize = $$props.InitialDrawSize);
    		if ('mulliganCount' in $$props) $$invalidate(3, mulliganCount = $$props.mulliganCount);
    		if ('faqs' in $$props) $$invalidate(5, faqs = $$props.faqs);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$simulationRun*/ 64) {
    			// Reactive statement to control scrolling
    			{
    				if ($simulationRun) {
    					document.body.style.overflow = 'hidden';
    				} else {
    					document.body.style.overflow = 'auto';
    				}
    			}
    		}

    		if ($$self.$$.dirty & /*InitialDrawSize*/ 1) {
    			// Reactive statement to log InitialDrawSize whenever it changes
    			if (InitialDrawSize !== undefined) {
    				console.log('Reactive - InitialDrawSize:', InitialDrawSize);
    			}
    		}
    	};

    	return [
    		InitialDrawSize,
    		groups,
    		deckSize,
    		mulliganCount,
    		handleGroupUpdate,
    		faqs,
    		$simulationRun
    	];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
    	target: document.body,
    	props: {
    		name: 'world'
    	}
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
